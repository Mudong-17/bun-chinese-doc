import{_ as e,C as t,o as c,c as r,H as o,w as n,k as s,a as l,Q as p}from"./chunks/framework.33544f09.js";const W=JSON.parse('{"title":"Development","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"project/development.md","filePath":"project/development.md"}'),y={name:"project/development.md"},E=s("h1",{id:"development",tabindex:"-1"},[l("Development "),s("a",{class:"header-anchor",href:"#development","aria-label":'Permalink to "Development"'},"​")],-1),i=s("p",null,"为 Bun 配置开发环境可能需要 10-30 分钟，具体时间取决于您的互联网连接速度和计算机性能。您需要约 10GB 的可用磁盘空间用于存储代码库和构建产物。",-1),d=s("p",null,"如果您使用的是 Windows 操作系统，您必须使用 WSL 环境，因为 Bun 目前尚不能在 Windows 上本地编译。",-1),F=s("p",null,"在开始之前，您需要已经安装了 Bun 的发布版本，因为我们使用我们的打包工具来转译和压缩我们的代码。",-1),h=s("div",{class:"language-bash vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"bash"),s("pre",{class:"shiki github-dark vp-code-dark"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#6A737D"}},"#本地安装")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#B392F0"}},"$"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"curl"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#79B8FF"}},"-fsSL"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"https://bun.sh/install"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#F97583"}},"|"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#B392F0"}},"bash"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#6A737D"}},"# 适用于 macOS、Linux 和 WSL")])])]),s("pre",{class:"shiki github-light vp-code-light"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#6A737D"}},"#本地安装")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6F42C1"}},"$"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"curl"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#005CC5"}},"-fsSL"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"https://bun.sh/install"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#D73A49"}},"|"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#6F42C1"}},"bash"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#6A737D"}},"# 适用于 macOS、Linux 和 WSL")])])])],-1),u=s("div",{class:"language-bash vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"bash"),s("pre",{class:"shiki github-dark vp-code-dark"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#6A737D"}},"#npm安装")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#B392F0"}},"$"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"npm"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"install"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#79B8FF"}},"-g"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"bun"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#6A737D"}},"# 您将永远需要的最后一个 `npm` 命令")])])]),s("pre",{class:"shiki github-light vp-code-light"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#6A737D"}},"#npm安装")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6F42C1"}},"$"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"npm"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"install"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#005CC5"}},"-g"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"bun"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#6A737D"}},"# 您将永远需要的最后一个 `npm` 命令")])])])],-1),b=s("div",{class:"language-bash vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"bash"),s("pre",{class:"shiki github-dark vp-code-dark"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#6A737D"}},"#Homebrew安装")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#B392F0"}},"$"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"brew"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"tap"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"oven-sh/bun"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#6A737D"}},"# 适用于 macOS 和 Linux")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#B392F0"}},"$"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"brew"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"install"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"bun")])])]),s("pre",{class:"shiki github-light vp-code-light"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#6A737D"}},"#Homebrew安装")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6F42C1"}},"$"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"brew"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"tap"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"oven-sh/bun"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#6A737D"}},"# 适用于 macOS 和 Linux")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6F42C1"}},"$"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"brew"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"install"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"bun")])])])],-1),C=s("div",{class:"language-bash vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"bash"),s("pre",{class:"shiki github-dark vp-code-dark"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#6A737D"}},"#Docker安装")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#B392F0"}},"$"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"docker"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"pull"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"oven/bun")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#B392F0"}},"$"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"docker"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"run"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#79B8FF"}},"--rm"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#79B8FF"}},"--init"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#79B8FF"}},"--ulimit"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"memlock="),s("span",{style:{color:"#79B8FF"}},"-1"),s("span",{style:{color:"#9ECBFF"}},":-1"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"oven/bun")])])]),s("pre",{class:"shiki github-light vp-code-light"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#6A737D"}},"#Docker安装")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6F42C1"}},"$"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"docker"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"pull"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"oven/bun")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6F42C1"}},"$"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"docker"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"run"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#005CC5"}},"--rm"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#005CC5"}},"--init"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#005CC5"}},"--ulimit"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"memlock="),s("span",{style:{color:"#005CC5"}},"-1"),s("span",{style:{color:"#032F62"}},":-1"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"oven/bun")])])])],-1),g=s("div",{class:"language-bash vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"bash"),s("pre",{class:"shiki github-dark vp-code-dark"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#6A737D"}},"#proto安装")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#B392F0"}},"$"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"proto"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"install"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"bun")])])]),s("pre",{class:"shiki github-light vp-code-light"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#6A737D"}},"#proto安装")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6F42C1"}},"$"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"proto"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"install"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"bun")])])])],-1),B=s("h2",{id:"安装-llvm",tabindex:"-1"},[l("安装 LLVM "),s("a",{class:"header-anchor",href:"#安装-llvm","aria-label":'Permalink to "安装 LLVM"'},"​")],-1),v=s("p",null,[l("Bun 需要 LLVM 16 和 Clang 16（"),s("code",null,"clang"),l("是 LLVM 的一部分）。这个版本要求是为了与预编译的 WebKit 版本相匹配，因为不匹配的版本会导致运行时内存分配失败。在大多数情况下，您可以通过系统包管理器安装 LLVM：")],-1),k=s("div",{class:"language-bash vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"bash"),s("pre",{class:"shiki github-dark vp-code-dark"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#6A737D"}},"#macOS（Homebrew）")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#B392F0"}},"$"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"brew"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"install"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"llvm@16")])])]),s("pre",{class:"shiki github-light vp-code-light"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#6A737D"}},"#macOS（Homebrew）")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6F42C1"}},"$"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"brew"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"install"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"llvm@16")])])])],-1),m=s("div",{class:"language-bash vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"bash"),s("pre",{class:"shiki github-dark vp-code-dark"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#6A737D"}},"#Ubuntu/Debian")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#B392F0"}},"$"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#6A737D"}},"# LLVM有一个自动安装脚本，与所有版本的Ubuntu兼容")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#B392F0"}},"$"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"wget"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"https://apt.llvm.org/llvm.sh"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#79B8FF"}},"-O"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"-"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#F97583"}},"|"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#B392F0"}},"sudo"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"bash"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#79B8FF"}},"-s"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#79B8FF"}},"--"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#79B8FF"}},"16"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"all")])])]),s("pre",{class:"shiki github-light vp-code-light"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#6A737D"}},"#Ubuntu/Debian")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6F42C1"}},"$"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#6A737D"}},"# LLVM有一个自动安装脚本，与所有版本的Ubuntu兼容")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6F42C1"}},"$"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"wget"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"https://apt.llvm.org/llvm.sh"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#005CC5"}},"-O"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"-"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#D73A49"}},"|"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#6F42C1"}},"sudo"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"bash"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#005CC5"}},"-s"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#005CC5"}},"--"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#005CC5"}},"16"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"all")])])])],-1),$=s("div",{class:"language-bash vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"bash"),s("pre",{class:"shiki github-dark vp-code-dark"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#6A737D"}},"#Arch")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#B392F0"}},"$"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"sudo"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"pacman"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#79B8FF"}},"-S"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"llvm16"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"clang16"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"lld")])])]),s("pre",{class:"shiki github-light vp-code-light"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#6A737D"}},"#Arch")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6F42C1"}},"$"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"sudo"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"pacman"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#005CC5"}},"-S"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"llvm16"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"clang16"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"lld")])])])],-1),_=p('<p>如果以上解决方案都不适用，您将不得不<a href="https://github.com/llvm/llvm-project/releases/tag/llvmorg-16.0.6" target="_blank" rel="noreferrer">手动安装</a>LLVM。</p><p>确保 LLVM 16 在您的路径中：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">which</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">clang-16</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">which</span><span style="color:#24292E;"> </span><span style="color:#032F62;">clang-16</span></span></code></pre></div><p>如果没有，请运行以下命令手动链接它：</p>',4),f=s("div",{class:"language-bash vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"bash"),s("pre",{class:"shiki github-dark vp-code-dark"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#6A737D"}},"#macOS（Homebrew）")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6A737D"}},"# 如果您使用的是fish，请使用fish_add_path")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#B392F0"}},"$"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"export"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},'PATH="'),s("span",{style:{color:"#E1E4E8"}},"$PATH"),s("span",{style:{color:"#9ECBFF"}},":$("),s("span",{style:{color:"#B392F0"}},"brew"),s("span",{style:{color:"#9ECBFF"}}," "),s("span",{style:{color:"#79B8FF"}},"--prefix"),s("span",{style:{color:"#9ECBFF"}},' llvm@16)/bin"')]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#B392F0"}},"$"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"export"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},'LDFLAGS="'),s("span",{style:{color:"#E1E4E8"}},"$LDFLAGS"),s("span",{style:{color:"#9ECBFF"}}," -L$("),s("span",{style:{color:"#B392F0"}},"brew"),s("span",{style:{color:"#9ECBFF"}}," "),s("span",{style:{color:"#79B8FF"}},"--prefix"),s("span",{style:{color:"#9ECBFF"}},' llvm@16)/lib"')]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#B392F0"}},"$"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"export"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},'CPPFLAGS="'),s("span",{style:{color:"#E1E4E8"}},"$CPPFLAGS"),s("span",{style:{color:"#9ECBFF"}}," -I$("),s("span",{style:{color:"#B392F0"}},"brew"),s("span",{style:{color:"#9ECBFF"}}," "),s("span",{style:{color:"#79B8FF"}},"--prefix"),s("span",{style:{color:"#9ECBFF"}},' llvm@16)/include"')])])]),s("pre",{class:"shiki github-light vp-code-light"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#6A737D"}},"#macOS（Homebrew）")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6A737D"}},"# 如果您使用的是fish，请使用fish_add_path")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6F42C1"}},"$"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"export"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},'PATH="'),s("span",{style:{color:"#24292E"}},"$PATH"),s("span",{style:{color:"#032F62"}},":$("),s("span",{style:{color:"#6F42C1"}},"brew"),s("span",{style:{color:"#032F62"}}," "),s("span",{style:{color:"#005CC5"}},"--prefix"),s("span",{style:{color:"#032F62"}},' llvm@16)/bin"')]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6F42C1"}},"$"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"export"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},'LDFLAGS="'),s("span",{style:{color:"#24292E"}},"$LDFLAGS"),s("span",{style:{color:"#032F62"}}," -L$("),s("span",{style:{color:"#6F42C1"}},"brew"),s("span",{style:{color:"#032F62"}}," "),s("span",{style:{color:"#005CC5"}},"--prefix"),s("span",{style:{color:"#032F62"}},' llvm@16)/lib"')]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6F42C1"}},"$"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"export"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},'CPPFLAGS="'),s("span",{style:{color:"#24292E"}},"$CPPFLAGS"),s("span",{style:{color:"#032F62"}}," -I$("),s("span",{style:{color:"#6F42C1"}},"brew"),s("span",{style:{color:"#032F62"}}," "),s("span",{style:{color:"#005CC5"}},"--prefix"),s("span",{style:{color:"#032F62"}},' llvm@16)/include"')])])])],-1),A=s("div",{class:"language-bash vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"bash"),s("pre",{class:"shiki github-dark vp-code-dark"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#6A737D"}},"#Arch")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#B392F0"}},"$"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"export"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},'PATH="'),s("span",{style:{color:"#E1E4E8"}},"$PATH"),s("span",{style:{color:"#9ECBFF"}},':/usr/lib/llvm16/bin"')]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#B392F0"}},"$"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"export"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},'LDFLAGS="'),s("span",{style:{color:"#E1E4E8"}},"$LDFLAGS"),s("span",{style:{color:"#9ECBFF"}},' -L/usr/lib/llvm16/lib"')]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#B392F0"}},"$"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"export"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},'CPPFLAGS="'),s("span",{style:{color:"#E1E4E8"}},"$CPPFLAGS"),s("span",{style:{color:"#9ECBFF"}},' -I/usr/lib/llvm16/include"')])])]),s("pre",{class:"shiki github-light vp-code-light"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#6A737D"}},"#Arch")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6F42C1"}},"$"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"export"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},'PATH="'),s("span",{style:{color:"#24292E"}},"$PATH"),s("span",{style:{color:"#032F62"}},':/usr/lib/llvm16/bin"')]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6F42C1"}},"$"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"export"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},'LDFLAGS="'),s("span",{style:{color:"#24292E"}},"$LDFLAGS"),s("span",{style:{color:"#032F62"}},' -L/usr/lib/llvm16/lib"')]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6F42C1"}},"$"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"export"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},'CPPFLAGS="'),s("span",{style:{color:"#24292E"}},"$CPPFLAGS"),s("span",{style:{color:"#032F62"}},' -I/usr/lib/llvm16/include"')])])])],-1),D=s("h2",{id:"安装依赖项",tabindex:"-1"},[l("安装依赖项 "),s("a",{class:"header-anchor",href:"#安装依赖项","aria-label":'Permalink to "安装依赖项"'},"​")],-1),S=s("p",null,"使用您系统的包管理器，安装 Bun 的其他依赖项：",-1),L=s("div",{class:"language-bash vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"bash"),s("pre",{class:"shiki github-dark vp-code-dark"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#6A737D"}},"#macOS（Homebrew）")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#B392F0"}},"$"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"brew"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"install"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"automake"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"ccache"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"cmake"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"coreutils"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"esbuild"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"gnu-sed"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"go"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"libiconv"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"libtool"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"ninja"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"pkg-config"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"rust")])])]),s("pre",{class:"shiki github-light vp-code-light"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#6A737D"}},"#macOS（Homebrew）")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6F42C1"}},"$"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"brew"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"install"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"automake"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"ccache"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"cmake"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"coreutils"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"esbuild"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"gnu-sed"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"go"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"libiconv"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"libtool"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"ninja"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"pkg-config"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"rust")])])])],-1),x=s("div",{class:"language-bash vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"bash"),s("pre",{class:"shiki github-dark vp-code-dark"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#6A737D"}},"#Ubuntu/Debian")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#B392F0"}},"$"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"sudo"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"apt"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"install"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"cargo"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"ccache"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"cmake"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"git"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"golang"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"libtool"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"ninja-build"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"pkg-config"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"rustc"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"esbuild")])])]),s("pre",{class:"shiki github-light vp-code-light"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#6A737D"}},"#Ubuntu/Debian")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6F42C1"}},"$"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"sudo"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"apt"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"install"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"cargo"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"ccache"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"cmake"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"git"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"golang"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"libtool"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"ninja-build"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"pkg-config"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"rustc"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"esbuild")])])])],-1),P=s("div",{class:"language-bash vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"bash"),s("pre",{class:"shiki github-dark vp-code-dark"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#6A737D"}},"#Arch")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#B392F0"}},"$"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"sudo"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"pacman"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#79B8FF"}},"-S"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"base-devel"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"ccache"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"cmake"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"esbuild"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"git"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"go"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"libiconv"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"libtool"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"make"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"ninja"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"pkg-config"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"python"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"rust"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"sed"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"unzip")])])]),s("pre",{class:"shiki github-light vp-code-light"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#6A737D"}},"#Arch")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6F42C1"}},"$"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"sudo"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"pacman"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#005CC5"}},"-S"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"base-devel"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"ccache"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"cmake"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"esbuild"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"git"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"go"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"libiconv"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"libtool"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"make"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"ninja"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"pkg-config"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"python"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"rust"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"sed"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"unzip")])])])],-1),w=p(`<details><summary>Ubuntu — 无法找到软件包esbuild</summary> 如果您使用的 Ubuntu 镜像不包含原始 Ubuntu 服务器的精确副本，\`apt install esbuild\`命令可能会失败，并显示“无法找到软件包”错误。如果您没有使用任何镜像，但启用了 Ubuntu Universe，也可能会发生相同的错误。在这种情况下，您可以手动安装 esbuild： <div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">curl</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-fsSL</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">https://esbuild.github.io/dl/latest</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sh</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">chmod</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">+x</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./esbuild</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">mv</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./esbuild</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/usr/local/bin</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">curl</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-fsSL</span><span style="color:#24292E;"> </span><span style="color:#032F62;">https://esbuild.github.io/dl/latest</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sh</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">chmod</span><span style="color:#24292E;"> </span><span style="color:#032F62;">+x</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./esbuild</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sudo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mv</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./esbuild</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/usr/local/bin</span></span></code></pre></div></details><p>此外，您需要一个</p><p>npm 包管理器（如<code>bun</code>、<code>npm</code>等）来安装<code>package.json</code>的依赖项。</p><h2 id="安装-zig" tabindex="-1">安装 Zig <a class="header-anchor" href="#安装-zig" aria-label="Permalink to &quot;安装 Zig&quot;">​</a></h2><p>Zig 可以通过我们的 npm 包<a href="https://www.npmjs.com/package/@oven/zig" target="_blank" rel="noreferrer"><code>@oven/zig</code></a>安装，也可以使用<a href="https://github.com/marler8997/zigup" target="_blank" rel="noreferrer">zigup</a>进行安装。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bun</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-g</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">@oven/zig</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">zigup</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.12</span><span style="color:#9ECBFF;">.0-dev.163+6780a6bbf</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bun</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-g</span><span style="color:#24292E;"> </span><span style="color:#032F62;">@oven/zig</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">zigup</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.12</span><span style="color:#032F62;">.0-dev.163+6780a6bbf</span></span></code></pre></div><blockquote><p>我们最后在<strong>2023 年 7 月 18 日</strong>更新了 Zig</p></blockquote><h2 id="首次构建" tabindex="-1">首次构建 <a class="header-anchor" href="#首次构建" aria-label="Permalink to &quot;首次构建&quot;">​</a></h2><p>在克隆代码库后，运行以下命令以进行首次构建。这可能需要一些时间，因为它会克隆子模块并构建依赖项。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">make</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">setup</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">make</span><span style="color:#24292E;"> </span><span style="color:#032F62;">setup</span></span></code></pre></div><p>二进制文件将位于<code>packages/debug-bun-{platform}-{arch}/bun-debug</code>。建议将其添加到您的<code>$PATH</code>中。要验证构建是否成功，让我们在 Bun 的开发构建上打印版本号。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">packages/debug-bun-</span><span style="color:#79B8FF;">*</span><span style="color:#9ECBFF;">/bun-debug</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--version</span></span>
<span class="line"><span style="color:#B392F0;">bun</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#9ECBFF;">.x.y__dev</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">packages/debug-bun-</span><span style="color:#005CC5;">*</span><span style="color:#032F62;">/bun-debug</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--version</span></span>
<span class="line"><span style="color:#6F42C1;">bun</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#032F62;">.x.y__dev</span></span></code></pre></div><p>注意：<code>make setup</code>只是以下命令的别名：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">make</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">assert-deps</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">submodule</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">npm-install-dev</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">node-fallbacks</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">runtime_js</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">fallback_decoder</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bun_error</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">mimalloc</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">picohttp</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">zlib</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">boringssl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">libarchive</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">lolhtml</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sqlite</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">usockets</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">uws</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">tinycc</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">c-ares</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">zstd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">base64</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cpp</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">zig</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">link</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">make</span><span style="color:#24292E;"> </span><span style="color:#032F62;">assert-deps</span><span style="color:#24292E;"> </span><span style="color:#032F62;">submodule</span><span style="color:#24292E;"> </span><span style="color:#032F62;">npm-install-dev</span><span style="color:#24292E;"> </span><span style="color:#032F62;">node-fallbacks</span><span style="color:#24292E;"> </span><span style="color:#032F62;">runtime_js</span><span style="color:#24292E;"> </span><span style="color:#032F62;">fallback_decoder</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bun_error</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mimalloc</span><span style="color:#24292E;"> </span><span style="color:#032F62;">picohttp</span><span style="color:#24292E;"> </span><span style="color:#032F62;">zlib</span><span style="color:#24292E;"> </span><span style="color:#032F62;">boringssl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">libarchive</span><span style="color:#24292E;"> </span><span style="color:#032F62;">lolhtml</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sqlite</span><span style="color:#24292E;"> </span><span style="color:#032F62;">usockets</span><span style="color:#24292E;"> </span><span style="color:#032F62;">uws</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tinycc</span><span style="color:#24292E;"> </span><span style="color:#032F62;">c-ares</span><span style="color:#24292E;"> </span><span style="color:#032F62;">zstd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">base64</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cpp</span><span style="color:#24292E;"> </span><span style="color:#032F62;">zig</span><span style="color:#24292E;"> </span><span style="color:#032F62;">link</span></span></code></pre></div><h2 id="重新构建" tabindex="-1">重新构建 <a class="header-anchor" href="#重新构建" aria-label="Permalink to &quot;重新构建&quot;">​</a></h2><p>Bun 使用一系列 make 命令来重新构建代码库的各个部分。重新构建的一般规则是有<code>make link</code>用于重新运行链接器，然后不同的 make 目标用于代码库的不同部分。不要传递<code>-j</code>给 make，因为如果以无序的方式运行这些脚本，它们将会失败，并且在构建过程中将尽可能使用多个核心。</p><table><thead><tr><th>发生了什么变化</th><th>运行此命令</th></tr></thead><tbody><tr><td>Zig 代码</td><td><code>make zig</code></td></tr><tr><td>C++ 代码</td><td><code>make cpp</code></td></tr><tr><td>Zig + C++ 代码</td><td><code>make dev</code>（上述两个的组合）</td></tr><tr><td><code>src/js</code>中的 JS/TS 代码</td><td><code>make js</code>（在 bun-debug 中，js 是从磁盘加载的，无需重新编译）。如果您更改了任何文件的名称或添加/删除任何内容，还必须运行 <code>make dev</code>。</td></tr><tr><td><code>*.classes.ts</code></td><td><code>make generate-classes dev</code></td></tr><tr><td>JSSink</td><td><code>make generate-sink cpp</code></td></tr><tr><td><code>src/node_fallbacks/*</code></td><td><code>make node-fallbacks zig</code></td></tr><tr><td><code>identifier_data.zig</code></td><td><code>make identifier-cache zig</code></td></tr><tr><td>使用 <code>cppFn</code>/<code>JSC.markBinding</code> 的代码</td><td><code>make headers</code>（TODO：解释这用于什么以及为什么有用）</td></tr></tbody></table><p><code>make setup</code>克隆了一堆子模块并构建了子项目。当子模块已过时时，运行<code>make submodule</code>以快速重置/更新所有子模块，然后您可以使用各自的命令重建各个子模块。</p><table><thead><tr><th>依赖项</th><th>运行此命令</th></tr></thead><tbody><tr><td>WebKit</td><td><code>bun install</code>（这是一个预构建的包）</td></tr><tr><td>uWebSockets</td><td><code>make uws</code></td></tr><tr><td>Mimalloc</td><td><code>make mimalloc</code></td></tr><tr><td>PicoHTTPParser</td><td><code>make picohttp</code></td></tr><tr><td>zlib</td><td><code>make zlib</code></td></tr><tr><td>BoringSSL</td><td><code>make boringssl</code></td></tr><tr><td>libarchive</td><td><code>make libarchive</code></td></tr><tr><td>lolhtml</td><td><code>make lolhtml</code></td></tr><tr><td>sqlite</td><td><code>make sqlite</code></td></tr><tr><td>TinyCC</td><td><code>make tinycc</code></td></tr><tr><td>c-ares</td><td><code>make c-ares</code></td></tr><tr><td>zstd</td><td><code>make zstd</code></td></tr><tr><td>Base64</td><td><code>make base64</code></td></tr></tbody></table><p>上述命令可能还需要重新构建 Zig 和/或 C++代码。</p><h2 id="visual-studio-code" tabindex="-1">Visual Studio Code <a class="header-anchor" href="#visual-studio-code" aria-label="Permalink to &quot;Visual Studio Code&quot;">​</a></h2><p>Visual Studio Code 是 Bun 的推荐 IDE，因为已经进行了配置。一旦打开，您可以运行<code>Extensions: Show Recommended Extensions</code>来安装 Zig 和 C++的推荐扩展。ZLS 已经自动配置。</p><h2 id="javascript-内置模块" tabindex="-1">JavaScript 内置模块 <a class="header-anchor" href="#javascript-内置模块" aria-label="Permalink to &quot;JavaScript 内置模块&quot;">​</a></h2><p>当您更改<code>src/js/builtins/*</code>中的任何内容或切换分支时，请运行以下命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">make</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">js</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cpp</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">make</span><span style="color:#24292E;"> </span><span style="color:#032F62;">js</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cpp</span></span></code></pre></div><p>这会将 TypeScript 代码嵌入到 C++头文件中。</p><blockquote><p>确保已安装<code>ccache</code>，否则重新生成将花费比应该更长的时间。</p></blockquote><p>有关<code>src/js</code>的工作原理的更多信息，请参阅代码库中的<code>src/js/README.md</code>。</p><h2 id="代码生成脚本" tabindex="-1">代码生成脚本 <a class="header-anchor" href="#代码生成脚本" aria-label="Permalink to &quot;代码生成脚本&quot;">​</a></h2><p>Bun 利用了许多代码生成脚本。</p><p><a href="https://github.com/oven-sh/bun/blob/main/src/bun.js/bindings/headers.h" target="_blank" rel="noreferrer">./src/bun.js/bindings/headers.h</a>文件具有 Zig &lt;&gt; C++代码的绑定。此文件是通过运行以下命令生成的：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">make</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">headers</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">make</span><span style="color:#24292E;"> </span><span style="color:#032F62;">headers</span></span></code></pre></div><p>这确保了 Zig 和 C++的类型正确匹配，通过导出/导入的函数使用 comptime 反射。</p><p>以<code>*.classes.ts</code>结尾的 TypeScript 文件是另一个代码生成脚本。它为在 Zig 中实现的类生成 C++样板代码。生成的代码位于以下位置：</p><ul><li><a href="https://github.com/oven-sh/bun/tree/main/src/bun.js/bindings/ZigGeneratedClasses.cpp" target="_blank" rel="noreferrer">src/bun.js/bindings/ZigGeneratedClasses.cpp</a></li><li><a href="https://github.com/oven-sh/bun/tree/main/src/bun.js/bindings/ZigGeneratedClasses.h" target="_blank" rel="noreferrer">src/bun.js/bindings/ZigGeneratedClasses.h</a></li><li><a href="https://github.com/oven-sh/bun/tree/main/src/bun.js/bindings/generated_classes.zig" target="_blank" rel="noreferrer">src/bun.js/bindings/generated_classes.zig</a></li></ul><p>要生成代码，请运行：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">make</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">codegen</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">make</span><span style="color:#24292E;"> </span><span style="color:#032F62;">codegen</span></span></code></pre></div><p>最后，</p><p>我们还有一个<a href="https://github.com/oven-sh/bun/blob/main/src/bun.js/scripts/generate-jssink.js" target="_blank" rel="noreferrer">代码生成脚本</a>用于我们的本地流实现。要运行它，运行：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">make</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">generate-sink</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">make</span><span style="color:#24292E;"> </span><span style="color:#032F62;">generate-sink</span></span></code></pre></div><p>您可能不需要经常运行它。</p><h2 id="修改-esm-模块" tabindex="-1">修改 ESM 模块 <a class="header-anchor" href="#修改-esm-模块" aria-label="Permalink to &quot;修改 ESM 模块&quot;">​</a></h2><p>某些模块，如<code>node:fs</code>、<code>node:stream</code>、<code>bun:sqlite</code>和<code>ws</code>，是用 JavaScript 实现的。这些模块位于<code>src/js/{node,bun,thirdparty}</code>文件中，并且使用 Bun 进行预捆绑。捆绑的代码已提交，以便 CI 构建可以在不需要 Bun 副本的情况下运行。</p><p>当更改这些模块时，请运行：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">$ make js</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">$ make js</span></span></code></pre></div><p>在调试构建中，Bun 会自动从文件系统加载这些模块，无论它在何处编译，因此无需重新运行<code>make dev</code>。</p><h2 id="发布构建" tabindex="-1">发布构建 <a class="header-anchor" href="#发布构建" aria-label="Permalink to &quot;发布构建&quot;">​</a></h2><p>要构建 Bun 的发布版本，请运行：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">make</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">release-bindings</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-j12</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">make</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">release</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">make</span><span style="color:#24292E;"> </span><span style="color:#032F62;">release-bindings</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-j12</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">make</span><span style="color:#24292E;"> </span><span style="color:#032F62;">release</span></span></code></pre></div><p>二进制文件将位于<code>packages/bun-{platform}-{arch}/bun</code>。</p><h2 id="valgrind" tabindex="-1">Valgrind <a class="header-anchor" href="#valgrind" aria-label="Permalink to &quot;Valgrind&quot;">​</a></h2><p>在 Linux 上，Valgrind 可以帮助找到内存问题。</p><p>请注意：</p><ul><li>JavaScriptCore 不支持 Valgrind。它会报告虚假的错误。</li><li>Valgrind 很慢</li><li>当启用调试构建时，Mimalloc 有时会引发虚假错误</li></ul><p>由于 DWARF 5 调试符号的原因，您需要 Valgrind 的最新版本。您可能需要手动编译 Valgrind，而不是从 Linux 包管理器中使用它。</p><p>如果在 Bun 中运行多线程代码（例如 bundler），则需要使用<code>--fair-sched=try</code>，否则它会挂起。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">valgrind</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--fair-sched=try</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--track-origins=yes</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bun-debug</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">arg</span><span style="color:#E1E4E8;">s</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">valgrind</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--fair-sched=try</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--track-origins=yes</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bun-debug</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">arg</span><span style="color:#24292E;">s</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><h2 id="更新webkit" tabindex="-1">更新<code>WebKit</code> <a class="header-anchor" href="#更新webkit" aria-label="Permalink to &quot;更新\`WebKit\`&quot;">​</a></h2><p>Bun 团队偶尔会提升 Bun 中使用的 WebKit 版本。当这种情况发生时，您可能会在运行<code>git status</code>时看到类似以下内容：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">status</span></span>
<span class="line"><span style="color:#B392F0;">On</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">branch</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">my-branch</span></span>
<span class="line"><span style="color:#B392F0;">Changes</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">not</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">staged</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">for</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">commit:</span></span>
<span class="line"><span style="color:#E1E4E8;">  (</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;git add &lt;file&gt;...&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">to</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">update</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">what</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">will</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">be</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">committed</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  (</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;git restore &lt;file&gt;...&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">to</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">discard</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">changes</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">working</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">directory</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">modified:</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">src/bun.js/WebKit</span><span style="color:#E1E4E8;"> (new </span><span style="color:#9ECBFF;">commits</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">status</span></span>
<span class="line"><span style="color:#6F42C1;">On</span><span style="color:#24292E;"> </span><span style="color:#032F62;">branch</span><span style="color:#24292E;"> </span><span style="color:#032F62;">my-branch</span></span>
<span class="line"><span style="color:#6F42C1;">Changes</span><span style="color:#24292E;"> </span><span style="color:#032F62;">not</span><span style="color:#24292E;"> </span><span style="color:#032F62;">staged</span><span style="color:#24292E;"> </span><span style="color:#032F62;">for</span><span style="color:#24292E;"> </span><span style="color:#032F62;">commit:</span></span>
<span class="line"><span style="color:#24292E;">  (</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;git add &lt;file&gt;...&quot;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">to</span><span style="color:#24292E;"> </span><span style="color:#032F62;">update</span><span style="color:#24292E;"> </span><span style="color:#032F62;">what</span><span style="color:#24292E;"> </span><span style="color:#032F62;">will</span><span style="color:#24292E;"> </span><span style="color:#032F62;">be</span><span style="color:#24292E;"> </span><span style="color:#032F62;">committed</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  (</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;git restore &lt;file&gt;...&quot;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">to</span><span style="color:#24292E;"> </span><span style="color:#032F62;">discard</span><span style="color:#24292E;"> </span><span style="color:#032F62;">changes</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#032F62;">working</span><span style="color:#24292E;"> </span><span style="color:#032F62;">directory</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">modified:</span><span style="color:#24292E;">   </span><span style="color:#032F62;">src/bun.js/WebKit</span><span style="color:#24292E;"> (new </span><span style="color:#032F62;">commits</span><span style="color:#24292E;">)</span></span></code></pre></div><p>出于性能原因，<code>make submodule</code>不会自动更新 WebKit 子模块。要更新，请从 Bun 仓库的根目录运行以下命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bun</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">make</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cpp</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bun</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">make</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cpp</span></span></code></pre></div><h2 id="故障排除" tabindex="-1">故障排除 <a class="header-anchor" href="#故障排除" aria-label="Permalink to &quot;故障排除&quot;">​</a></h2><h3 id="ubuntu-上的-span-文件未找到" tabindex="-1">Ubuntu 上的“span”文件未找到 <a class="header-anchor" href="#ubuntu-上的-span-文件未找到" aria-label="Permalink to &quot;Ubuntu 上的“span”文件未找到&quot;">​</a></h3><blockquote><p>⚠️ 请注意，下面的说明特定于在 Ubuntu 上发生的问题。其他 Linux 发行版不太可能出现相同的问题。</p></blockquote><p>Clang 编译器通常默认使用<code>libstdc++</code> C++标准库。<code>libstdc++</code>是由 GNU 编译器集合（GCC）提供的默认 C++标准库实现。虽然 Clang 可能会链接到<code>libc++</code>库，但这需要在运行 Clang 时显式提供<code>-stdlib</code>标志。</p><p>Bun 依赖于 C++20 功能，如<code>std::span</code>，而这些功能在低于 11 的 GCC 版本中不可用。GCC 10 没有实现所有 C++20 功能。因此，运行<code>make setup</code>可能会失败，并显示以下错误：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">fatal error: &#39;span&#39; file not found</span></span>
<span class="line"><span style="color:#e1e4e8;">#include &lt;span&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">         ^~~~~~</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">fatal error: &#39;span&#39; file not found</span></span>
<span class="line"><span style="color:#24292e;">#include &lt;span&gt;</span></span>
<span class="line"><span style="color:#24292e;">         ^~~~~~</span></span></code></pre></div><p>要解决此错误，我们需要将 GCC 版本更新到 11。以下是一般步骤：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">apt</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">update</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">apt</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">gcc-11</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">g++-11</span></span>
<span class="line"><span style="color:#6A737D;"># 如果上面的命令失败并显示“无法找到软件包gcc-11”，我们需要添加APT存储库</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add-apt-repository</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-y</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ppa:ubuntu-toolchain-r/test</span></span>
<span class="line"><span style="color:#6A737D;"># 现在再次运行“apt install”</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">apt</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">gcc-11</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">g++-11</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sudo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">apt</span><span style="color:#24292E;"> </span><span style="color:#032F62;">update</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sudo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">apt</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">gcc-11</span><span style="color:#24292E;"> </span><span style="color:#032F62;">g++-11</span></span>
<span class="line"><span style="color:#6A737D;"># 如果上面的命令失败并显示“无法找到软件包gcc-11”，我们需要添加APT存储库</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sudo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add-apt-repository</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-y</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ppa:ubuntu-toolchain-r/test</span></span>
<span class="line"><span style="color:#6A737D;"># 现在再次运行“apt install”</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sudo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">apt</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">gcc-11</span><span style="color:#24292E;"> </span><span style="color:#032F62;">g++-11</span></span></code></pre></div><p>现在，我们需要将 GCC 11 设置为默认编译器：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">update-alternatives</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/usr/bin/gcc</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">gcc</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/usr/bin/gcc-11</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">update-alternatives</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/usr/bin/g++</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">g++</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/usr/bin/g++-11</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sudo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">update-alternatives</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/usr/bin/gcc</span><span style="color:#24292E;"> </span><span style="color:#032F62;">gcc</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/usr/bin/gcc-11</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sudo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">update-alternatives</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/usr/bin/g++</span><span style="color:#24292E;"> </span><span style="color:#032F62;">g++</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/usr/bin/g++-11</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span></span></code></pre></div><h3 id="libarchive" tabindex="-1">libarchive <a class="header-anchor" href="#libarchive" aria-label="Permalink to &quot;libarchive&quot;">​</a></h3><p>如果在编译<code>libarchive</code>时遇到错误，请运行以下命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">brew</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pkg-config</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">brew</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pkg-config</span></span></code></pre></div><h3 id="zig-build-obj上的文件丢失" tabindex="-1"><code>zig build obj</code>上的文件丢失 <a class="header-anchor" href="#zig-build-obj上的文件丢失" aria-label="Permalink to &quot;\`zig build obj\`上的文件丢失&quot;">​</a></h3><p>如果出现有关<code>zig build obj</code>上缺少文件的错误，请确保已构建了头文件。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">make</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">headers</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">make</span><span style="color:#24292E;"> </span><span style="color:#032F62;">headers</span></span></code></pre></div><h3 id="未找到cmakeconfig-h" tabindex="-1">未找到<code>cmakeconfig.h</code> <a class="header-anchor" href="#未找到cmakeconfig-h" aria-label="Permalink to &quot;未找到\`cmakeconfig.h\`&quot;">​</a></h3><p>如果出现找不到<code>cmakeconfig.h</code>的错误，请检查预编译的 WebKit 是否正确安装。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bun</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bun</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span></span></code></pre></div><p>检查命令是否安装了 webkit，并且您可以手动查找<code>node_modules/bun-webkit-{platform}-{arch}</code>：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 这应该会显示两个目录。如果没有，请出了问题</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">node_modules/bun-webkit</span><span style="color:#79B8FF;">*</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 这应该会显示两个目录。如果没有，请出了问题</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">node_modules/bun-webkit</span><span style="color:#005CC5;">*</span></span></code></pre></div><h3 id="macos-上的-library-not-found-for-lsystem" tabindex="-1">macOS 上的“library not found for -lSystem” <a class="header-anchor" href="#macos-上的-library-not-found-for-lsystem" aria-label="Permalink to &quot;macOS 上的“library not found for -lSystem”&quot;">​</a></h3><p>如果在编译时看到此错误，请运行：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">xcode-select</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--install</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">xcode-select</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--install</span></span></code></pre></div><h2 id="arch-linux-找不到libatomic-a" tabindex="-1">Arch Linux / 找不到<code>libatomic.a</code> <a class="header-anchor" href="#arch-linux-找不到libatomic-a" aria-label="Permalink to &quot;Arch Linux / 找不到\`libatomic.a\`&quot;">​</a></h2><p>Bun 需要以静态方式链接<code>libatomic</code>。在 Arch Linux 上，它仅以共享库的形式提供，但是可以通过创建符号链接来解决此问题，以在本地使构建正常工作。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ln</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-s</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/lib/libatomic.so</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/lib/libatomic.a</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sudo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ln</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-s</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/lib/libatomic.so</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/lib/libatomic.a</span></span></code></pre></div><p>以这种方式编译的 Bun 版本可能不适用于其他系统。</p>`,90);function q(j,z,T,G,V,H){const a=t("codetabs");return c(),r("div",null,[E,i,d,F,o(a,null,{default:n(()=>[h,u,b,C,g]),_:1}),B,v,o(a,null,{default:n(()=>[k,m,$]),_:1}),_,o(a,null,{default:n(()=>[f,A]),_:1}),D,S,o(a,null,{default:n(()=>[L,x,P]),_:1}),w])}const Z=e(y,[["render",q]]);export{W as __pageData,Z as default};
