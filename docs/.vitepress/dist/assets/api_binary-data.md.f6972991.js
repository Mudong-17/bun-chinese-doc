import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.33544f09.js";const B=JSON.parse('{"title":"Binary data","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"api/binary-data.md","filePath":"api/binary-data.md"}'),p={name:"api/binary-data.md"},o=l(`<h1 id="binary-data" tabindex="-1">Binary data <a class="header-anchor" href="#binary-data" aria-label="Permalink to &quot;Binary data&quot;">​</a></h1><p>这个页面旨在介绍在 JavaScript 中处理二进制数据的方法。Bun 实现了许多用于处理二进制数据的数据类型和实用工具，其中大多数是 Web 标准。任何 Bun 特定的 API 都将被明确标注。</p><p>以下是一个快速的“速查表”，也可作为目录使用。单击左列中的项目以跳转到该部分。</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>TypedArray</td><td>一系列类，为与二进制数据交互提供类似于<code>Array</code>的接口。包括<code>Uint8Array</code>、<code>Uint16Array</code>、<code>Int8Array</code>等。</td></tr><tr><td>Buffer</td><td><code>Uint8Array</code>的子类，实现了许多便利方法。与表中的其他元素不同，这是一个 Node.js API（Bun 实现了它）。它不能在浏览器中使用。</td></tr><tr><td>DataView</td><td>一个提供了对<code>ArrayBuffer</code>上的一些字节进行读取或写入的<code>get/set</code> API 的类。通常用于读取或写入二进制协议。</td></tr><tr><td>Blob</td><td>通常表示文件的只读二进制数据块。具有 MIME 类型、大小和将其转换为<code>ArrayBuffer</code>、<code>ReadableStream</code>和字符串的方法。</td></tr><tr><td>BunFile</td><td>仅限 Bun。表示在磁盘上延迟加载的文件的<code>Blob</code>子类。使用<code>Bun.file(path)</code>创建。</td></tr></tbody></table><h2 id="arraybuffer-和视图" tabindex="-1"><code>ArrayBuffer</code> 和视图 <a class="header-anchor" href="#arraybuffer-和视图" aria-label="Permalink to &quot;\`ArrayBuffer\` 和视图&quot;">​</a></h2><p>直到 2009 年，JavaScript 中没有本地语言方式来存储和操作二进制数据。ECMAScript v5 引入了一系列新的机制来实现这一点。最基本的构建块是<code>ArrayBuffer</code>，它是一种表示内存中一系列字节的简单数据结构。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 此缓冲区可以存储8个字节</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">buf</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ArrayBuffer</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 此缓冲区可以存储8个字节</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">buf</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ArrayBuffer</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">);</span></span></code></pre></div><p>尽管它的名字是<code>ArrayBuffer</code>，但它并不是一个数组，也不支持数组方法和运算符。事实上，没有直接从<code>ArrayBuffer</code>读取或写入值的方法。除了检查其大小并从中创建“片段”外，几乎没有什么可以做的。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">buf</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ArrayBuffer</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">buf.byteLength; </span><span style="color:#6A737D;">// =&gt; 8</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">slice</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> buf.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 返回新的ArrayBuffer</span></span>
<span class="line"><span style="color:#E1E4E8;">slice.byteLength; </span><span style="color:#6A737D;">// =&gt; 4</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">buf</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ArrayBuffer</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">buf.byteLength; </span><span style="color:#6A737D;">// =&gt; 8</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">slice</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> buf.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 返回新的ArrayBuffer</span></span>
<span class="line"><span style="color:#24292E;">slice.byteLength; </span><span style="color:#6A737D;">// =&gt; 4</span></span></code></pre></div><p>要做有趣的事情，我们需要一种称为“视图”的构造。视图是一个类，它<em>包装</em>一个<code>ArrayBuffer</code>实例，允许您读取和操作底层数据。有两种类型的视图：<em>类型化数组</em>和<code>DataView</code>。</p><h3 id="dataview" tabindex="-1"><code>DataView</code> <a class="header-anchor" href="#dataview" aria-label="Permalink to &quot;\`DataView\`&quot;">​</a></h3><p><code>DataView</code>类是用于读取和操作<code>ArrayBuffer</code>中的数据的较低级别接口。</p><p>下面我们创建一个新的<code>DataView</code>并将第一个字节设置为 5。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">buf</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ArrayBuffer</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// [0x0, 0x0, 0x0, 0x0]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">dv</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DataView</span><span style="color:#E1E4E8;">(buf);</span></span>
<span class="line"><span style="color:#E1E4E8;">dv.</span><span style="color:#B392F0;">setUint8</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 在字节偏移0处写入值3</span></span>
<span class="line"><span style="color:#E1E4E8;">dv.</span><span style="color:#B392F0;">getUint8</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// =&gt; 3</span></span>
<span class="line"><span style="color:#6A737D;">// [0x11, 0x0, 0x0, 0x0]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">buf</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ArrayBuffer</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// [0x0, 0x0, 0x0, 0x0]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">dv</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DataView</span><span style="color:#24292E;">(buf);</span></span>
<span class="line"><span style="color:#24292E;">dv.</span><span style="color:#6F42C1;">setUint8</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 在字节偏移0处写入值3</span></span>
<span class="line"><span style="color:#24292E;">dv.</span><span style="color:#6F42C1;">getUint8</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// =&gt; 3</span></span>
<span class="line"><span style="color:#6A737D;">// [0x11, 0x0, 0x0, 0x0]</span></span></code></pre></div><p>现在让我们在字节偏移<code>1</code>处写入一个<code>Uint16</code>。这需要两个字节。我们使用值<code>513</code>，它是<code>2 * 256 + 1</code>；以字节表示，它是<code>00000010 00000001</code>。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">dv.</span><span style="color:#B392F0;">setUint16</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">513</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// [0x11, 0x10, 0x1, 0x0]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(dv.</span><span style="color:#B392F0;">getUint16</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">// =&gt; 513</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">dv.</span><span style="color:#6F42C1;">setUint16</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">513</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// [0x11, 0x10, 0x1, 0x0]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(dv.</span><span style="color:#6F42C1;">getUint16</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// =&gt; 513</span></span></code></pre></div><p>现在我们已经为底层<code>ArrayBuffer</code>中的前三个字节分配了一个值。尽管第二和第三个字节是使用\`set</p><p>Uint16<code>写入的，但</code>getUint16\`会自动处理这两个字节，并返回合并的结果。</p><h3 id="类型化数组-typedarray" tabindex="-1">类型化数组（TypedArray） <a class="header-anchor" href="#类型化数组-typedarray" aria-label="Permalink to &quot;类型化数组（TypedArray）&quot;">​</a></h3><p>类型化数组是 ECMAScript 6 引入的一种构造，它是对<code>ArrayBuffer</code>的包装，允许您像使用普通 JavaScript 数组一样使用它们。</p><p>有多种类型化数组，包括<code>Uint8Array</code>、<code>Uint16Array</code>、<code>Int32Array</code>等，它们允许您在<code>ArrayBuffer</code>上以不同的数据类型操作数据。</p><p>以下是一个使用<code>Uint8Array</code>的示例：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">buf</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ArrayBuffer</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">view</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Uint8Array</span><span style="color:#E1E4E8;">(buf);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">view[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">view[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">view[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">view[</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(view); </span><span style="color:#6A737D;">// =&gt; Uint8Array [ 1, 2, 3, 4 ]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">buf</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ArrayBuffer</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">view</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Uint8Array</span><span style="color:#24292E;">(buf);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">view[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">view[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">view[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">view[</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(view); </span><span style="color:#6A737D;">// =&gt; Uint8Array [ 1, 2, 3, 4 ]</span></span></code></pre></div><p>在上述示例中，我们首先创建一个长度为 4 的<code>ArrayBuffer</code>，然后创建一个<code>Uint8Array</code>视图来操作它。我们分别将值 1、2、3 和 4 设置到视图的不同索引位置。最后，我们查看了<code>Uint8Array</code>的内容，它会显示我们刚刚设置的值。</p><p>需要注意的是，不同类型化数组的方法和属性会略有不同，这取决于底层数据的数据类型。在处理二进制数据时，类型化数组通常是最常见的选择。</p><h3 id="buffer" tabindex="-1"><code>Buffer</code> <a class="header-anchor" href="#buffer" aria-label="Permalink to &quot;\`Buffer\`&quot;">​</a></h3><p><code>Buffer</code>是 Node.js 中的一个类，它与<code>TypedArray</code>类似，但在某些方面更加强大。它专门用于处理二进制数据，特别是在 I/O 操作中。</p><p>以下是一个示例，演示如何在 Node.js 中使用<code>Buffer</code>：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">buffer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Buffer.</span><span style="color:#B392F0;">alloc</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 创建一个包含4个字节的Buffer</span></span>
<span class="line"><span style="color:#E1E4E8;">buffer.</span><span style="color:#B392F0;">writeUInt8</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 在偏移0处写入一个无符号8位整数</span></span>
<span class="line"><span style="color:#E1E4E8;">buffer.</span><span style="color:#B392F0;">writeUInt8</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 在偏移1处写入一个无符号8位整数</span></span>
<span class="line"><span style="color:#E1E4E8;">buffer.</span><span style="color:#B392F0;">writeUInt8</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 在偏移2处写入一个无符号8位整数</span></span>
<span class="line"><span style="color:#E1E4E8;">buffer.</span><span style="color:#B392F0;">writeUInt8</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 在偏移3处写入一个无符号8位整数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(buffer); </span><span style="color:#6A737D;">// &lt;Buffer 01 02 03 04&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">buffer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Buffer.</span><span style="color:#6F42C1;">alloc</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 创建一个包含4个字节的Buffer</span></span>
<span class="line"><span style="color:#24292E;">buffer.</span><span style="color:#6F42C1;">writeUInt8</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 在偏移0处写入一个无符号8位整数</span></span>
<span class="line"><span style="color:#24292E;">buffer.</span><span style="color:#6F42C1;">writeUInt8</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 在偏移1处写入一个无符号8位整数</span></span>
<span class="line"><span style="color:#24292E;">buffer.</span><span style="color:#6F42C1;">writeUInt8</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 在偏移2处写入一个无符号8位整数</span></span>
<span class="line"><span style="color:#24292E;">buffer.</span><span style="color:#6F42C1;">writeUInt8</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 在偏移3处写入一个无符号8位整数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(buffer); </span><span style="color:#6A737D;">// &lt;Buffer 01 02 03 04&gt;</span></span></code></pre></div><p>在上述示例中，我们首先使用<code>Buffer.alloc</code>创建了一个包含 4 个字节的 Buffer。然后，我们使用<code>writeUInt8</code>方法在不同的偏移位置写入无符号 8 位整数。最后，我们查看了 Buffer 的内容。</p><p><code>Buffer</code>在 Node.js 中非常有用，因为它们与文件 I/O 和网络通信等操作紧密集成。但需要注意的是，在浏览器环境中，<code>Buffer</code>不可用，因此必须使用<code>TypedArray</code>或<code>DataView</code>来处理二进制数据。</p><h3 id="blob" tabindex="-1"><code>Blob</code> <a class="header-anchor" href="#blob" aria-label="Permalink to &quot;\`Blob\`&quot;">​</a></h3><p><code>Blob</code>表示不可变的、原始数据的片段或文件。它通常用于处理二进制数据，例如图像、音频和视频文件。</p><p>以下是一个创建和使用<code>Blob</code>的示例：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 创建一个包含文本的Blob</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">textBlob</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Blob</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;Hello, world!&quot;</span><span style="color:#E1E4E8;">], { type: </span><span style="color:#9ECBFF;">&quot;text/plain&quot;</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 创建一个包含二进制数据的Blob</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">binaryData</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Uint8Array</span><span style="color:#E1E4E8;">([</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">binaryBlob</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Blob</span><span style="color:#E1E4E8;">([binaryData], { type: </span><span style="color:#9ECBFF;">&quot;application/octet-stream&quot;</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 将Blob转换为ArrayBuffer</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">arrayBufferPromise</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> binaryBlob.</span><span style="color:#B392F0;">arrayBuffer</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">arrayBufferPromise.</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">arrayBuffer</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Uint8Array</span><span style="color:#E1E4E8;">(arrayBuffer)); </span><span style="color:#6A737D;">// Uint8Array [ 1, 2, 3, 4, 5 ]</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 获取Blob的大小和类型</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(textBlob.size); </span><span style="color:#6A737D;">// 13</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(textBlob.type); </span><span style="color:#6A737D;">// &#39;text/plain&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 创建一个包含文本的Blob</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">textBlob</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Blob</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&quot;Hello, world!&quot;</span><span style="color:#24292E;">], { type: </span><span style="color:#032F62;">&quot;text/plain&quot;</span><span style="color:#24292E;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 创建一个包含二进制数据的Blob</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">binaryData</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Uint8Array</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">binaryBlob</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Blob</span><span style="color:#24292E;">([binaryData], { type: </span><span style="color:#032F62;">&quot;application/octet-stream&quot;</span><span style="color:#24292E;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 将Blob转换为ArrayBuffer</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">arrayBufferPromise</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> binaryBlob.</span><span style="color:#6F42C1;">arrayBuffer</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">arrayBufferPromise.</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#E36209;">arrayBuffer</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Uint8Array</span><span style="color:#24292E;">(arrayBuffer)); </span><span style="color:#6A737D;">// Uint8Array [ 1, 2, 3, 4, 5 ]</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 获取Blob的大小和类型</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(textBlob.size); </span><span style="color:#6A737D;">// 13</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(textBlob.type); </span><span style="color:#6A737D;">// &#39;text/plain&#39;</span></span></code></pre></div><p>在上述示例中，我们首先创建了一个包含文本和二进制数据的两个不同 Blob。然后，我们使用<code>arrayBuffer</code>方法将二进制 Blob 转换为 ArrayBuffer，以便进一步处理。最后，我们获取了 Blob 的大小和类型。</p><p><code>Blob</code>通常用于处理从文件上传、<code>Fetch API</code>响应和其他数据源返回的二进制数据。</p><h3 id="bunfile" tabindex="-1"><code>BunFile</code> <a class="header-anchor" href="#bunfile" aria-label="Permalink to &quot;\`BunFile\`&quot;">​</a></h3><p><code>BunFile</code>是 Bun 框架中的一个特定概念，用于表示在磁盘上的文件。它是<code>Blob</code>的子类，具有额外的功能，例如文件路径和延迟加载。</p><p>以下是一个示例，演示如何在 Bun 中使用<code>BunFile</code>：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">Bun</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">BunFile</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;bun&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">bun</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Bun</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 创建一个BunFile对象</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">file</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> bun.</span><span style="color:#B392F0;">file</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/path/to/myfile.txt&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 读取文件内容</span></span>
<span class="line"><span style="color:#E1E4E8;">file</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">readText</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">content</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(content);</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">catch</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">error</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(error);</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">Bun</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">BunFile</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;bun&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">bun</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Bun</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 创建一个BunFile对象</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">file</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> bun.</span><span style="color:#6F42C1;">file</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/path/to/myfile.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 读取文件内容</span></span>
<span class="line"><span style="color:#24292E;">file</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">readText</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#E36209;">content</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(content);</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">((</span><span style="color:#E36209;">error</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(error);</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span></code></pre></div><p>在上述示例中，我们首先创建了一个<code>Bun</code>实例，然后使用<code>bun.file()</code>方法创建了一个<code>BunFile</code>对象，表示磁盘上的文件。接下来，我们使用<code>readText()</code>方法读取文件的文本内容。<code>BunFile</code>还提供了许多其他方法，用于处理文件的不同方面，例如读取二进制数据、检查文件是否存在等等。</p><p>请注意，<code>BunFile</code>是 Bun 框架的一部分，不是标准 JavaScript API。它专门用于 Bun 应用程序中处理文件和静态资源。</p><p>这个速查表提供了关于<code>ArrayBuffer</code>、<code>TypedArray</code>、<code>DataView</code>、<code>Blob</code>、<code>Buffer</code>和<code>BunFile</code>的基本信息。根据您的具体需求，您可以选择使用其中一个或多个来处理二进制数据。如果您有任何进一步的问题或需要更详细的信息，请随时提出。</p>`,44),e=[o];function c(t,r,y,E,i,d){return a(),n("div",null,e)}const u=s(p,[["render",c]]);export{B as __pageData,u as default};
