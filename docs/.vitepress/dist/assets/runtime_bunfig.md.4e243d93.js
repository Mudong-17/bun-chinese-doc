import{_ as s,o as a,c as l,Q as n}from"./chunks/framework.33544f09.js";const E=JSON.parse('{"title":"bunfig.toml","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"runtime/bunfig.md","filePath":"runtime/bunfig.md"}'),o={name:"runtime/bunfig.md"},e=n(`<h1 id="bunfig-toml" tabindex="-1">bunfig.toml <a class="header-anchor" href="#bunfig-toml" aria-label="Permalink to &quot;bunfig.toml&quot;">​</a></h1><p>Bun 的行为可以使用其配置文件<code>bunfig.toml</code>进行配置。</p><p>一般来说，Bun 依赖于预先存在的配置文件，如<code>package.json</code>和<code>tsconfig.json</code>来配置其行为。<code>bunfig.toml</code>仅用于配置 Bun 特定的内容。这个文件是可选的，没有它，Bun 也可以正常工作。</p><h2 id="全局与本地" tabindex="-1">全局与本地 <a class="header-anchor" href="#全局与本地" aria-label="Permalink to &quot;全局与本地&quot;">​</a></h2><p>一般来说，建议将<code>bunfig.toml</code>文件添加到项目的根目录，与<code>package.json</code>放在一起。</p><p>要在全局配置 Bun，您也可以在以下路径之一创建一个<code>.bunfig.toml</code>文件：</p><ul><li><code>$HOME/.bunfig.toml</code></li><li><code>$XDG_CONFIG_HOME/.bunfig.toml</code></li></ul><p>如果同时检测到全局和本地的<code>bunfig</code>，则会进行浅层合并，本地设置会覆盖全局设置。命令行标志将在适用的情况下覆盖<code>bunfig</code>设置。</p><h2 id="运行时" tabindex="-1">运行时 <a class="header-anchor" href="#运行时" aria-label="Permalink to &quot;运行时&quot;">​</a></h2><p>Bun 的运行时行为是通过<code>bunfig.toml</code>文件中的顶级字段进行配置的。</p><h3 id="preload" tabindex="-1"><code>preload</code> <a class="header-anchor" href="#preload" aria-label="Permalink to &quot;\`preload\`&quot;">​</a></h3><p>一个脚本数组，用于在运行文件或脚本之前执行。这对于注册插件很有用。</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 运行文件或脚本之前要运行的脚本</span></span>
<span class="line"><span style="color:#6A737D;"># 用于注册插件</span></span>
<span class="line"><span style="color:#E1E4E8;">preload = [</span><span style="color:#9ECBFF;">&quot;./preload.ts&quot;</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 运行文件或脚本之前要运行的脚本</span></span>
<span class="line"><span style="color:#6A737D;"># 用于注册插件</span></span>
<span class="line"><span style="color:#24292E;">preload = [</span><span style="color:#032F62;">&quot;./preload.ts&quot;</span><span style="color:#24292E;">]</span></span></code></pre></div><h3 id="jsx" tabindex="-1"><code>jsx</code> <a class="header-anchor" href="#jsx" aria-label="Permalink to &quot;\`jsx\`&quot;">​</a></h3><p>配置 Bun 如何处理 JSX。您还可以在<code>tsconfig.json</code>的<code>compilerOptions</code>中设置这些字段，但在非 TypeScript 项目中，它们也受到支持。</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">jsx = </span><span style="color:#9ECBFF;">&quot;react&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">jsxFactory = </span><span style="color:#9ECBFF;">&quot;h&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">jsxFragment = </span><span style="color:#9ECBFF;">&quot;Fragment&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">jsxImportSource = </span><span style="color:#9ECBFF;">&quot;react&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">jsx = </span><span style="color:#032F62;">&quot;react&quot;</span></span>
<span class="line"><span style="color:#24292E;">jsxFactory = </span><span style="color:#032F62;">&quot;h&quot;</span></span>
<span class="line"><span style="color:#24292E;">jsxFragment = </span><span style="color:#032F62;">&quot;Fragment&quot;</span></span>
<span class="line"><span style="color:#24292E;">jsxImportSource = </span><span style="color:#032F62;">&quot;react&quot;</span></span></code></pre></div><p>有关这些字段的更多信息，请参阅 tsconfig 文档。</p><ul><li><a href="https://www.typescriptlang.org/tsconfig#jsx" target="_blank" rel="noreferrer">jsx</a></li><li><a href="https://www.typescriptlang.org/tsconfig#jsxFactory" target="_blank" rel="noreferrer">jsxFactory</a></li><li><a href="https://www.typescriptlang.org/tsconfig#jsxFragment" target="_blank" rel="noreferrer">jsxFragment</a></li><li><a href="https://www.typescriptlang.org/tsconfig#jsxImportSource" target="_blank" rel="noreferrer">jsxImportSource</a></li></ul><h3 id="smol" tabindex="-1"><code>smol</code> <a class="header-anchor" href="#smol" aria-label="Permalink to &quot;\`smol\`&quot;">​</a></h3><p>启用<code>smol</code>模式。这会降低内存使用，但性能会有所降低。</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 降低内存使用，但牺牲性能</span></span>
<span class="line"><span style="color:#E1E4E8;">smol = </span><span style="color:#79B8FF;">true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 降低内存使用，但牺牲性能</span></span>
<span class="line"><span style="color:#24292E;">smol = </span><span style="color:#005CC5;">true</span></span></code></pre></div><h3 id="loglevel" tabindex="-1"><code>logLevel</code> <a class="header-anchor" href="#loglevel" aria-label="Permalink to &quot;\`logLevel\`&quot;">​</a></h3><p>设置日志级别。可以是<code>&quot;debug&quot;</code>、<code>&quot;warn&quot;</code>或<code>&quot;error&quot;</code>之一。</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">logLevel = </span><span style="color:#9ECBFF;">&quot;debug&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># &quot;debug&quot; | &quot;warn&quot; | &quot;error&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">logLevel = </span><span style="color:#032F62;">&quot;debug&quot;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># &quot;debug&quot; | &quot;warn&quot; | &quot;error&quot;</span></span></code></pre></div><h3 id="define" tabindex="-1"><code>define</code> <a class="header-anchor" href="#define" aria-label="Permalink to &quot;\`define\`&quot;">​</a></h3><p><code>define</code>字段允许您将某些全局标识符替换为常量表达式。Bun 将使用表达式替换标识符的任何用法。表达式应为 JSON 字符串。</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">define</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#6A737D;"># 将任何对&quot;p<wbr>rocess.env.bagel&quot;的用法替换为字符串\`lox\`。</span></span>
<span class="line"><span style="color:#6A737D;"># 值会解析为JSON，但支持单引号字符串和在JS中的\`&#39;undefined&#39;\`变成\`undefined\`。</span></span>
<span class="line"><span style="color:#6A737D;"># 这可能会在未来的版本中更改为普通的TOML。它是CLI参数解析的遗留物。</span></span>
<span class="line"><span style="color:#E1E4E8;">&quot;p<wbr>rocess.env.bagel&quot; = </span><span style="color:#9ECBFF;">&quot;&#39;lox&#39;&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">define</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#6A737D;"># 将任何对&quot;p<wbr>rocess.env.bagel&quot;的用法替换为字符串\`lox\`。</span></span>
<span class="line"><span style="color:#6A737D;"># 值会解析为JSON，但支持单引号字符串和在JS中的\`&#39;undefined&#39;\`变成\`undefined\`。</span></span>
<span class="line"><span style="color:#6A737D;"># 这可能会在未来的版本中更改为普通的TOML。它是CLI参数解析的遗留物。</span></span>
<span class="line"><span style="color:#24292E;">&quot;p<wbr>rocess.env.bagel&quot; = </span><span style="color:#032F62;">&quot;&#39;lox&#39;&quot;</span></span></code></pre></div><h3 id="loader" tabindex="-1"><code>loader</code> <a class="header-anchor" href="#loader" aria-label="Permalink to &quot;\`loader\`&quot;">​</a></h3><p>配置 Bun 如何将文件扩展名映射到加载器。这对于加载 Bun 不原生支持的文件非常有用。如果</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">loader</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#6A737D;"># 当导入.bagel文件时，将其视为tsx文件</span></span>
<span class="line"><span style="color:#E1E4E8;">&quot;.bagel&quot; = </span><span style="color:#9ECBFF;">&quot;tsx&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">loader</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#6A737D;"># 当导入.bagel文件时，将其视为tsx文件</span></span>
<span class="line"><span style="color:#24292E;">&quot;.bagel&quot; = </span><span style="color:#032F62;">&quot;tsx&quot;</span></span></code></pre></div><p>Bun 支持以下加载器：</p><ul><li><code>jsx</code></li><li><code>js</code></li><li><code>ts</code></li><li><code>tsx</code></li><li><code>css</code></li><li><code>file</code></li><li><code>json</code></li><li><code>toml</code></li><li><code>wasm</code></li><li><code>napi</code></li><li><code>base64</code></li><li><code>dataurl</code></li><li><code>text</code></li></ul><h3 id="telemetry" tabindex="-1"><code>telemetry</code> <a class="header-anchor" href="#telemetry" aria-label="Permalink to &quot;\`telemetry\`&quot;">​</a></h3><p><code>telemetry</code>字段允许启用/禁用分析记录。Bun 记录捆绑时间（以便我们可以用数据回答问题，&quot;Bun 是否越来越快？&quot;）和功能使用情况（例如，&quot;人们是否真正使用宏？&quot;）。请求主体大小约为 60 字节，因此数据量不大。默认情况下启用遥测。相当于<code>DO_NOT_TRACK</code>环境变量。</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">telemetry = </span><span style="color:#79B8FF;">false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">telemetry = </span><span style="color:#005CC5;">false</span></span></code></pre></div><h2 id="测试运行器" tabindex="-1">测试运行器 <a class="header-anchor" href="#测试运行器" aria-label="Permalink to &quot;测试运行器&quot;">​</a></h2><p>测试运行器在您的 bunfig.toml 的<code>[test]</code>部分中进行配置。</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#6A737D;"># 配置信息在此处</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#6A737D;"># 配置信息在此处</span></span></code></pre></div><h3 id="test-root" tabindex="-1"><code>test.root</code> <a class="header-anchor" href="#test-root" aria-label="Permalink to &quot;\`test.root\`&quot;">​</a></h3><p>运行测试的根目录。默认为<code>。</code>。</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">root = </span><span style="color:#9ECBFF;">&quot;./__tests__&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">root = </span><span style="color:#032F62;">&quot;./__tests__&quot;</span></span></code></pre></div><h3 id="test-preload" tabindex="-1"><code>test.preload</code> <a class="header-anchor" href="#test-preload" aria-label="Permalink to &quot;\`test.preload\`&quot;">​</a></h3><p>与顶级<code>preload</code>字段相同，但仅适用于<code>bun test</code>。</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">preload = [</span><span style="color:#9ECBFF;">&quot;./setup.ts&quot;</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">preload = [</span><span style="color:#032F62;">&quot;./setup.ts&quot;</span><span style="color:#24292E;">]</span></span></code></pre></div><h3 id="test-smol" tabindex="-1"><code>test.smol</code> <a class="header-anchor" href="#test-smol" aria-label="Permalink to &quot;\`test.smol\`&quot;">​</a></h3><p>与顶级<code>smol</code>字段相同，但仅适用于<code>bun test</code>。</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">smol = </span><span style="color:#79B8FF;">true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">smol = </span><span style="color:#005CC5;">true</span></span></code></pre></div><h3 id="test-coverage" tabindex="-1"><code>test.coverage</code> <a class="header-anchor" href="#test-coverage" aria-label="Permalink to &quot;\`test.coverage\`&quot;">​</a></h3><p>启用覆盖率报告。默认为<code>false</code>。使用<code>--coverage</code>来覆盖。</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">coverage = </span><span style="color:#79B8FF;">false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">coverage = </span><span style="color:#005CC5;">false</span></span></code></pre></div><h3 id="test-coveragethreshold" tabindex="-1"><code>test.coverageThreshold</code> <a class="header-anchor" href="#test-coveragethreshold" aria-label="Permalink to &quot;\`test.coverageThreshold\`&quot;">​</a></h3><p>指定覆盖率阈值。默认情况下，没有设置阈值。如果您的测试套件不满足或超过此阈值，<code>bun test</code>将以非零退出代码退出以指示失败。</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 要求90%的行级和函数级覆盖率</span></span>
<span class="line"><span style="color:#E1E4E8;">coverageThreshold = </span><span style="color:#79B8FF;">0.9</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 要求90%的行级和函数级覆盖率</span></span>
<span class="line"><span style="color:#24292E;">coverageThreshold = </span><span style="color:#005CC5;">0.9</span></span></code></pre></div><p>可以为行级、函数级和语句级覆盖率指定不同的阈值。</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">coverageThreshold = { line = </span><span style="color:#79B8FF;">0.7</span><span style="color:#E1E4E8;">, function = </span><span style="color:#79B8FF;">0.8</span><span style="color:#E1E4E8;">, statement = </span><span style="color:#79B8FF;">0.9</span><span style="color:#E1E4E8;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">coverageThreshold = { line = </span><span style="color:#005CC5;">0.7</span><span style="color:#24292E;">, function = </span><span style="color:#005CC5;">0.8</span><span style="color:#24292E;">, statement = </span><span style="color:#005CC5;">0.9</span><span style="color:#24292E;"> }</span></span></code></pre></div><h3 id="test-coverageskiptestfiles" tabindex="-1"><code>test.coverageSkipTestFiles</code> <a class="header-anchor" href="#test-coverageskiptestfiles" aria-label="Permalink to &quot;\`test.coverageSkipTestFiles\`&quot;">​</a></h3><p>计算覆盖统计信息时是否跳过测试文件。默认为<code>false</code>。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">toml</span></span>
<span class="line"><span style="color:#e1e4e8;">[test]</span></span>
<span class="line"><span style="color:#e1e4e8;">coverageSkipTestFiles = false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">toml</span></span>
<span class="line"><span style="color:#24292e;">[test]</span></span>
<span class="line"><span style="color:#24292e;">coverageSkipTestFiles = false</span></span></code></pre></div><h2 id="包管理器" tabindex="-1">包管理器 <a class="header-anchor" href="#包管理器" aria-label="Permalink to &quot;包管理器&quot;">​</a></h2><p>包管理是一个复杂的问题；为了支持各种用例，<code>bun install</code>的行为可以在<code>[install]</code>部分下进行配置。</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">install</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#6A737D;"># 在此处配置</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">install</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#6A737D;"># 在此处配置</span></span></code></pre></div><h3 id="install-optional" tabindex="-1"><code>install.optional</code> <a class="header-anchor" href="#install-optional" aria-label="Permalink to &quot;\`install.optional\`&quot;">​</a></h3><p>是否安装可选依赖项。默认为<code>true</code>。</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">install</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">optional = </span><span style="color:#79B8FF;">true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">install</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">optional = </span><span style="color:#005CC5;">true</span></span></code></pre></div><h3 id="install-dev" tabindex="-1"><code>install.dev</code> <a class="header-anchor" href="#install-dev" aria-label="Permalink to &quot;\`install.dev\`&quot;">​</a></h3><p>是否安装开发依赖项。默认为<code>true</code>。</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">install</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">dev = </span><span style="color:#79B8FF;">true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">install</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">dev = </span><span style="color:#005CC5;">true</span></span></code></pre></div><h3 id="install-peer" tabindex="-1"><code>install.peer</code> <a class="header-anchor" href="#install-peer" aria-label="Permalink to &quot;\`install.peer\`&quot;">​</a></h3><p>是否安装对等依赖项。默认为<code>false</code>。</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">install</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">peer = </span><span style="color:#79B8FF;">false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">install</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">peer = </span><span style="color:#005CC5;">false</span></span></code></pre></div><h3 id="install-production" tabindex="-1"><code>install.production</code> <a class="header-anchor" href="#install-production" aria-label="Permalink to &quot;\`install.production\`&quot;">​</a></h3><p><code>bun install</code>是否以&quot;生产模式&quot;运行。默认为<code>false</code>。</p><p>在生产模式下，不会安装&quot;devDependencies&quot;。您可以在 CLI 中使用<code>--production</code>来覆盖此设置。</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">install</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">production = </span><span style="color:#79B8FF;">false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">install</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">production = </span><span style="color:#005CC5;">false</span></span></code></pre></div><h3 id="install-exact" tabindex="-1"><code>install.exact</code> <a class="header-anchor" href="#install-exact" aria-label="Permalink to &quot;\`install.exact\`&quot;">​</a></h3><p>是否在<code>package.json</code>中设置精确的版本。默认为<code>false</code>。</p><p>默认情况下，Bun 使用 caret 范围；如果包的“最新”版本是<code>2.4.1</code>，则您的<code>package.json</code>中的版本范围将是<code>^2.4.1</code>。这表示任何版本从<code>2.4.1</code>到<code>3.0.0</code>之前（不包括<code>3.0.0</code>）都是可接受的。</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">install</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">exact = </span><span style="color:#79B8FF;">false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">install</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">exact = </span><span style="color:#005CC5;">false</span></span></code></pre></div><h3 id="install-auto" tabindex="-1"><code>install.auto</code> <a class="header-anchor" href="#install-auto" aria-label="Permalink to &quot;\`install.auto\`&quot;">​</a></h3><p>配置 Bun 的包自动安装行为。默认为<code>&quot;auto&quot;</code> —— 当找不到<code>node_modules</code>文件夹时，Bun 将在执行过程中自动安装依赖项。</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">install</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">auto = </span><span style="color:#9ECBFF;">&quot;auto&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">install</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">auto = </span><span style="color:#032F62;">&quot;auto&quot;</span></span></code></pre></div><p>有效的值为：</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td><code>&quot;auto&quot;</code></td><td>如果存在本地的 <code>node_modules</code>，则从本地解析模块。否则，动态地在执行过程中自动安装依赖项。</td></tr><tr><td><code>&quot;force&quot;</code></td><td>始终自动安装依赖项，即使存在 <code>node_modules</code>。</td></tr><tr><td><code>&quot;disable&quot;</code></td><td>从不自动安装依赖项。</td></tr><tr><td><code>&quot;fallback&quot;</code></td><td>首先检查本地的 <code>node_modules</code>，然后自动安装任何找不到的包。您可以使用 <code>bun -i</code> 从 CLI 启用此选项。</td></tr></tbody></table><h3 id="install-frozenlockfile" tabindex="-1"><code>install.frozenLockfile</code> <a class="header-anchor" href="#install-frozenlockfile" aria-label="Permalink to &quot;\`install.frozenLockfile\`&quot;">​</a></h3><p>当为 true 时，<code>bun install</code>不会更新<code>bun.lockb</code>。默认为<code>false</code>。如果<code>package.json</code>和现有的<code>bun.lockb</code>不一致，这将引发错误。</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">install</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">frozenLockfile = </span><span style="color:#79B8FF;">false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">install</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">frozenLockfile = </span><span style="color:#005CC5;">false</span></span></code></pre></div><h3 id="install-dryrun" tabindex="-1"><code>install.dryRun</code> <a class="header-anchor" href="#install-dryrun" aria-label="Permalink to &quot;\`install.dryRun\`&quot;">​</a></h3><p>是否安装可选依赖项。默认为<code>false</code>。当为 true 时，等效于在所有<code>bun install</code>命令上设置<code>--dry-run</code>。</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">install</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">dryRun = </span><span style="color:#79B8FF;">false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">install</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">dryRun = </span><span style="color:#005CC5;">false</span></span></code></pre></div><h3 id="install-globaldir" tabindex="-1"><code>install.globalDir</code> <a class="header-anchor" href="#install-globaldir" aria-label="Permalink to &quot;\`install.globalDir\`&quot;">​</a></h3><p>配置 Bun 放置全局安装的包的目录。</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">install</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#6A737D;"># 全局安装的包安装到这里</span></span>
<span class="line"><span style="color:#E1E4E8;">globalDir = </span><span style="color:#9ECBFF;">&quot;~/.bun/install/global&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">install</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#6A737D;"># 全局安装的包安装到这里</span></span>
<span class="line"><span style="color:#24292E;">globalDir = </span><span style="color:#032F62;">&quot;~/.bun/install/global&quot;</span></span></code></pre></div><h3 id="install-globalbindir" tabindex="-1"><code>install.globalBinDir</code> <a class="header-anchor" href="#install-globalbindir" aria-label="Permalink to &quot;\`install.globalBinDir\`&quot;">​</a></h3><p>配置 Bun 放置全局安装的二进制文件和命令行界面的目录。</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 全局安装的包的二进制文件链接到这里</span></span>
<span class="line"><span style="color:#E1E4E8;">globalBinDir = </span><span style="color:#9ECBFF;">&quot;~/.bun/bin&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 全局安装的包的二进制文件链接到这里</span></span>
<span class="line"><span style="color:#24292E;">globalBinDir = </span><span style="color:#032F62;">&quot;~/.bun/bin&quot;</span></span></code></pre></div><h3 id="install-registry" tabindex="-1"><code>install.registry</code> <a class="header-anchor" href="#install-registry" aria-label="Permalink to &quot;\`install.registry\`&quot;">​</a></h3><p>默认注册表是<code>https://registry.npmjs.org/</code>。这可以在<code>bunfig.toml</code>中全局配置：</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">install</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#6A737D;"># 将默认注册表设置为字符串</span></span>
<span class="line"><span style="color:#E1E4E8;">registry = </span><span style="color:#9ECBFF;">&quot;https://registry.npmjs.org&quot;</span></span>
<span class="line"><span style="color:#6A737D;"># 设置令牌</span></span>
<span class="line"><span style="color:#E1E4E8;">registry = { url = </span><span style="color:#9ECBFF;">&quot;https://registry.npmjs.org&quot;</span><span style="color:#E1E4E8;">, token = </span><span style="color:#9ECBFF;">&quot;123456&quot;</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#6A737D;"># 设置用户名/密码</span></span>
<span class="line"><span style="color:#E1E4E8;">registry = </span><span style="color:#9ECBFF;">&quot;https://username:password@registry.npmjs.org&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">install</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#6A737D;"># 将默认注册表设置为字符串</span></span>
<span class="line"><span style="color:#24292E;">registry = </span><span style="color:#032F62;">&quot;https://registry.npmjs.org&quot;</span></span>
<span class="line"><span style="color:#6A737D;"># 设置令牌</span></span>
<span class="line"><span style="color:#24292E;">registry = { url = </span><span style="color:#032F62;">&quot;https://registry.npmjs.org&quot;</span><span style="color:#24292E;">, token = </span><span style="color:#032F62;">&quot;123456&quot;</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#6A737D;"># 设置用户名/密码</span></span>
<span class="line"><span style="color:#24292E;">registry = </span><span style="color:#032F62;">&quot;https://username:password@registry.npmjs.org&quot;</span></span></code></pre></div><h3 id="install-scopes" tabindex="-1"><code>install.scopes</code> <a class="header-anchor" href="#install-scopes" aria-label="Permalink to &quot;\`install.scopes\`&quot;">​</a></h3><p>要为特定作用域（例如<code>@myorg/&lt;package&gt;</code>）配置特定注册表，请使用<code>install.scopes</code>。您可以使用<code>$variable</code>符号引用环境变量。</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">install</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">scopes</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#6A737D;"># 注册表为字符串</span></span>
<span class="line"><span style="color:#E1E4E8;">myorg = </span><span style="color:#9ECBFF;">&quot;https://username:password@registry.myorg.com/&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 带有用户名/密码的注册表</span></span>
<span class="line"><span style="color:#6A737D;"># 您可以引用环境变量</span></span>
<span class="line"><span style="color:#E1E4E8;">myorg = { username = </span><span style="color:#9ECBFF;">&quot;myusername&quot;</span><span style="color:#E1E4E8;">, password = </span><span style="color:#9ECBFF;">&quot;$npm_password&quot;</span><span style="color:#E1E4E8;">, url = </span><span style="color:#9ECBFF;">&quot;https://registry.myorg.com/&quot;</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 带有令牌的注册表</span></span>
<span class="line"><span style="color:#E1E4E8;">myorg = { token = </span><span style="color:#9ECBFF;">&quot;$npm_token&quot;</span><span style="color:#E1E4E8;">, url = </span><span style="color:#9ECBFF;">&quot;https://registry.myorg.com/&quot;</span><span style="color:#E1E4E8;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">install</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">scopes</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#6A737D;"># 注册表为字符串</span></span>
<span class="line"><span style="color:#24292E;">myorg = </span><span style="color:#032F62;">&quot;https://username:password@registry.myorg.com/&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 带有用户名/密码的注册表</span></span>
<span class="line"><span style="color:#6A737D;"># 您可以引用环境变量</span></span>
<span class="line"><span style="color:#24292E;">myorg = { username = </span><span style="color:#032F62;">&quot;myusername&quot;</span><span style="color:#24292E;">, password = </span><span style="color:#032F62;">&quot;$npm_password&quot;</span><span style="color:#24292E;">, url = </span><span style="color:#032F62;">&quot;https://registry.myorg.com/&quot;</span><span style="color:#24292E;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 带有令牌的注册表</span></span>
<span class="line"><span style="color:#24292E;">myorg = { token = </span><span style="color:#032F62;">&quot;$npm_token&quot;</span><span style="color:#24292E;">, url = </span><span style="color:#032F62;">&quot;https://registry.myorg.com/&quot;</span><span style="color:#24292E;"> }</span></span></code></pre></div><h3 id="install-cache" tabindex="-1"><code>install.cache</code> <a class="header-anchor" href="#install-cache" aria-label="Permalink to &quot;\`install.cache\`&quot;">​</a></h3><p>配置缓存行为：</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">install</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">cache</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 用于缓存的目录</span></span>
<span class="line"><span style="color:#E1E4E8;">dir = </span><span style="color:#9ECBFF;">&quot;~/.bun/install/cache&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 当为true时，不从全局缓存加载。</span></span>
<span class="line"><span style="color:#6A737D;"># Bun仍然可能会将文件写入node_modules/.cache</span></span>
<span class="line"><span style="color:#E1E4E8;">disable = </span><span style="color:#79B8FF;">false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 当为true时，始终从注册表中解析最新版本</span></span>
<span class="line"><span style="color:#E1E4E8;">disableManifest = </span><span style="color:#79B8FF;">false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">install</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">cache</span><span style="color:#24292E;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 用于缓存的目录</span></span>
<span class="line"><span style="color:#24292E;">dir = </span><span style="color:#032F62;">&quot;~/.bun/install/cache&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 当为true时，不从全局缓存加载。</span></span>
<span class="line"><span style="color:#6A737D;"># Bun仍然可能会将文件写入node_modules/.cache</span></span>
<span class="line"><span style="color:#24292E;">disable = </span><span style="color:#005CC5;">false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 当为true时，始终从注册表中解析最新版本</span></span>
<span class="line"><span style="color:#24292E;">disableManifest = </span><span style="color:#005CC5;">false</span></span></code></pre></div><h3 id="install-lockfile" tabindex="-1"><code>install.lockfile</code> <a class="header-anchor" href="#install-lockfile" aria-label="Permalink to &quot;\`install.lockfile\`&quot;">​</a></h3><p>要配置锁定文件行为，请使用<code>install.lockfile</code>部分。</p><p>是否在<code>bun install</code>上生成锁定文件。默认为<code>true</code>。</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">install</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">lockfile</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">save = </span><span style="color:#79B8FF;">true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">install</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">lockfile</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">save = </span><span style="color:#005CC5;">true</span></span></code></pre></div><p>是否在<code>bun.lockb</code>旁边生成非 Bun</p><p>锁定文件。（始终会创建<code>bun.lockb</code>。）目前，唯一受支持的值是<code>&quot;yarn&quot;</code>。</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">install</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">lockfile</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">print = </span><span style="color:#9ECBFF;">&quot;yarn&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">install</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">lockfile</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">print = </span><span style="color:#032F62;">&quot;yarn&quot;</span></span></code></pre></div>`,111),p=[e];function t(c,r,i,d,y,u){return a(),l("div",null,p)}const g=s(o,[["render",t]]);export{E as __pageData,g as default};
