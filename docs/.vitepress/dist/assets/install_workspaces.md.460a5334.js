import{_ as s,o,c as e,Q as a}from"./chunks/framework.33544f09.js";const m=JSON.parse('{"title":"Workspaces","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"install/workspaces.md","filePath":"install/workspaces.md"}'),n={name:"install/workspaces.md"},c=a(`<h1 id="workspaces" tabindex="-1">Workspaces <a class="header-anchor" href="#workspaces" aria-label="Permalink to &quot;Workspaces&quot;">​</a></h1><p>Bun 支持<code>package.json</code>中的<a href="https://docs.npmjs.com/cli/v9/using-npm/workspaces?v=true#description" target="_blank" rel="noreferrer"><code>workspaces</code></a>。工作区使得开发复杂软件变得容易，这些软件作为一个由多个独立包组成的<em>monorepo</em>。</p><p>要尝试它，请在<code>package.json</code>的<code>workspaces</code>字段中指定子包的列表；通常将这些子包放在名为<code>packages</code>的目录中。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;name&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;my-project&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;version&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;1.0.0&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;workspaces&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;packages/*&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;name&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;my-project&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;version&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;1.0.0&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;workspaces&quot;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;packages/*&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p><strong>Glob 支持</strong> — Bun 支持<code>&quot;workspaces&quot;</code>中的简单<code>&lt;directory&gt;/*</code>通配符。完整的通配符语法（例如<code>**</code>和<code>?</code>）尚未受支持。</p></blockquote><p>这有一些主要优点。</p><ul><li><strong>代码可以分成逻辑部分。</strong> 如果一个包依赖于另一个包，您可以简单地将其添加为<code>bun add</code>的依赖项。如果包<code>b</code>依赖于<code>a</code>，<code>bun install</code>会将您的本地<code>packages/a</code>目录符号链接到<code>b</code>的<code>node_modules</code>文件夹中，而不是尝试从 npm 注册表中下载它。</li><li><strong>依赖项可以被去重。</strong> 如果<code>a</code>和<code>b</code>共享一个公共依赖项，它将被<em>提升</em>到根<code>node_modules</code>目录。这减少了冗余的磁盘使用量，并减少了同时安装多个版本的包时出现的与&quot;依赖地狱&quot;相关的问题。</li></ul><blockquote><p>⚡️ <strong>速度</strong> — 安装速度快，即使是对于大型 monorepo 也是如此。Bun 在 Linux 上约在<code>500ms</code>内安装<a href="https://github.com/remix-run/remix" target="_blank" rel="noreferrer">Remix</a> monorepo。</p><ul><li>比<code>npm install</code>快 28 倍</li><li>比<code>yarn install</code>（v1）快 12 倍</li><li>比<code>pnpm install</code>快 8 倍</li></ul><p><img src="https://user-images.githubusercontent.com/709451/212829600-77df9544-7c9f-4d8d-a984-b2cd0fd2aa52.png" alt="img"></p></blockquote>`,8),p=[c];function l(t,r,d,i,u,E){return o(),e("div",null,p)}const k=s(n,[["render",l]]);export{m as __pageData,k as default};
