import{_ as a,o,c as s,Q as e}from"./chunks/framework.33544f09.js";const y=JSON.parse('{"title":"Auto-install","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"runtime/autoimport.md","filePath":"runtime/autoimport.md"}'),n={name:"runtime/autoimport.md"},l=e('<h1 id="auto-install" tabindex="-1">Auto-install <a class="header-anchor" href="#auto-install" aria-label="Permalink to &quot;Auto-install&quot;">​</a></h1><p>如果在工作目录或更高级目录中找不到<code>node_modules</code>目录，Bun 将放弃 Node.js 风格的模块解析，改用<strong>Bun 模块解析算法</strong>。</p><p>在 Bun 风格的模块解析下，所有导入的包都会在执行过程中自动安装到<a href="/install/cache.html">全局模块缓存</a>中（与<a href="/cli/install.html"><code>bun install</code></a>使用的相同缓存）。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { foo } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;foo&quot;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 安装`latest`版本</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { foo } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 安装`latest`版本</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">();</span></span></code></pre></div><p>第一次运行此脚本时，Bun 将自动安装<code>&quot;foo&quot;</code>并缓存它。下次运行脚本时，它将使用缓存的版本。</p><h2 id="版本解析" tabindex="-1">版本解析 <a class="header-anchor" href="#版本解析" aria-label="Permalink to &quot;版本解析&quot;">​</a></h2><p>为了确定要安装的版本，Bun 遵循以下算法：</p><ol><li>检查项目根目录中是否存在<code>bun.lockb</code>文件。如果存在，使用锁定文件中指定的版本。</li><li>否则，向上扫描树以查找将<code>&quot;foo&quot;</code>作为依赖项的<code>package.json</code>。如果找到，使用指定的语义版本版本或版本范围。</li><li>否则，使用<code>latest</code>。</li></ol><h2 id="缓存行为" tabindex="-1">缓存行为 <a class="header-anchor" href="#缓存行为" aria-label="Permalink to &quot;缓存行为&quot;">​</a></h2><p>一旦确定了版本或版本范围，Bun 将：</p><ol><li>检查模块缓存中是否存在兼容的版本。如果存在，使用它。</li><li>在解析<code>latest</code>时，Bun 将检查是否在过去的<em>24 小时</em>内下载并缓存了<code>package@latest</code>。如果是这样，使用它。</li><li>否则，从<code>npm</code>注册表中下载并安装适当的版本。</li></ol><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><p>包被安装并缓存在<code>&lt;cache&gt;/&lt;pkg&gt;@&lt;version&gt;</code>中，因此可以同时缓存同一包的多个版本。此外，在<code>&lt;cache&gt;/&lt;pkg&gt;/&lt;version&gt;</code>下创建了一个符号链接，以便更快地查找在缓存中存在的所有版本的包。</p><h2 id="版本规范" tabindex="-1">版本规范 <a class="header-anchor" href="#版本规范" aria-label="Permalink to &quot;版本规范&quot;">​</a></h2><p>可以通过在导入语句中直接指定版本或版本范围来简化整个解析算法。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { z } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;zod@3.0.0&quot;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 特定版本</span></span>\n<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { z } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;zod@next&quot;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// npm标签</span></span>\n<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { z } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;zod@^3.20.0&quot;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// semver范围</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { z } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;zod@3.0.0&quot;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 特定版本</span></span>\n<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { z } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;zod@next&quot;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// npm标签</span></span>\n<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { z } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;zod@^3.20.0&quot;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// semver范围</span></span></code></pre></div><h2 id="好处" tabindex="-1">好处 <a class="header-anchor" href="#好处" aria-label="Permalink to &quot;好处&quot;">​</a></h2><p>这种自动安装方法有一些好处：</p><ul><li><strong>空间效率</strong> — 每个依赖项的版本只存在于磁盘上的一个地方。与每个项目安装的重复依赖项相比，这节省了大量空间和时间。</li><li><strong>可移植性</strong> — 要共享简单的脚本和片段，您的源文件是<em>自包含的</em>。无需将包含您的代码和配置文件的目录一起压缩。使用<code>import</code>语句中的版本规范，甚至不需要<code>package.json</code>。</li><li><strong>方便</strong> — 运行文件或脚本之前无需运行<code>npm install</code>或<code>bun install</code>。只需运行<code>bun run</code>即可。</li><li><strong>向后兼容性</strong> — 由于 Bun 仍然尊重<code>package.json</code>中指定的版本，如果存在<code>package.json</code>，您可以使用单个命令切换到 Bun 风格的解析：<code>rm -rf node_modules</code>。</li></ul><h2 id="限制" tabindex="-1">限制 <a class="header-anchor" href="#限制" aria-label="Permalink to &quot;限制&quot;">​</a></h2><ul><li>没有智能提示。IDE 中的 TypeScript 自动完成依赖于<code>node_modules</code>中存在类型声明文件。我们正在研究各种解决方案。</li><li>不支持<a href="https://github.com/ds300/patch-package" target="_blank" rel="noreferrer">patch-package</a>。</li></ul><h2 id="常见问题" tabindex="-1">常见问题 <a class="header-anchor" href="#常见问题" aria-label="Permalink to &quot;常见问题&quot;">​</a></h2><details><summary>这与pnpm的工作原理有何不同?</summary><p>使用 pnpm 时，您必须运行<code>pnpm install</code>，它会创建一个包含符号链接的<code>node_modules</code>文件夹，以供运</p><p>行时解析。相比之下，Bun 会在运行文件时动态解析依赖项；无需提前运行任何<code>install</code>命令。Bun 也不会创建<code>node_modules</code>文件夹。</p></details><details><summary>这与Yarn Plug&#39;N&#39;Play有何不同?</summary> 使用 Yarn，您必须在运行脚本之前运行`yarn install`。相比之下，Bun 会在运行文件时动态解析依赖项；无需提前运行任何`install`命令。 <p>Yarn Plug&#39;N&#39;Play 还使用 zip 文件存储依赖项。这使得依赖项加载<a href="https://twitter.com/jarredsumner/status/1458207919636287490" target="_blank" rel="noreferrer">运行时较慢</a>，因为随机访问 zip 文件的读取速度往往比等效的磁盘查找慢。</p></details><details><summary>这与Deno的工作原理有何不同?</summary> Deno 要求在每个 npm`import`之前都要有`npm:`标识符，不支持通过`tsconfig.json`中的`compilerOptions.paths`进行导入映射，并且对`package.json`设置的支持不完整。与 Deno 不同，Bun 目前不支持 URL 导入。 </details>',25),t=[l];function p(r,c,i,d,u,m){return o(),s("div",null,t)}const E=a(n,[["render",p]]);export{y as __pageData,E as default};
