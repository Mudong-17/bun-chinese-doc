import{_ as s,o as a,c as n,Q as t}from"./chunks/framework.33544f09.js";const F=JSON.parse('{"title":"Writing tests","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"test/writing.md","filePath":"test/writing.md"}'),o={name:"test/writing.md"},e=t(`<h1 id="writing-tests" tabindex="-1">Writing tests <a class="header-anchor" href="#writing-tests" aria-label="Permalink to &quot;Writing tests&quot;">​</a></h1><p>您可以使用内置的<code>bun:test</code>模块导入与 Jest 类似的 API 来定义测试。长期来看，Bun 旨在实现完全的 Jest 兼容性；目前，支持的<code>expect</code>匹配器集合有限。以下是一些基本的用法示例：</p><p>要定义一个简单的测试：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">#math.test.ts</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { expect, test } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;bun:test&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;2 + 2&quot;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">toBe</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">#math.test.ts</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { expect, test } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;bun:test&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;2 + 2&quot;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">toBe</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>测试可以使用<code>describe</code>分组：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">#math.test.ts</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { expect, test, describe } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;bun:test&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">describe</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;arithmetic&quot;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;2 + 2&quot;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">toBe</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;2 * 2&quot;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">toBe</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">#math.test.ts</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { expect, test, describe } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;bun:test&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">describe</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;arithmetic&quot;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;2 + 2&quot;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">toBe</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;2 * 2&quot;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">toBe</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>测试可以是<code>async</code>的：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { expect, test } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;bun:test&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;2 * 2&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(result).</span><span style="color:#B392F0;">toEqual</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { expect, test } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;bun:test&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;2 * 2&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">result</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(result).</span><span style="color:#6F42C1;">toEqual</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>或者，使用<code>done</code>回调来表示完成。如果在测试定义中将<code>done</code>回调作为参数包含在内，那么您必须调用它，否则测试将挂起。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { expect, test } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;bun:test&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;2 * 2&quot;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">done</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">result</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(result).</span><span style="color:#B392F0;">toEqual</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">done</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { expect, test } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;bun:test&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;2 * 2&quot;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">done</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#E36209;">result</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(result).</span><span style="color:#6F42C1;">toEqual</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">done</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><h2 id="超时" tabindex="-1">超时 <a class="header-anchor" href="#超时" aria-label="Permalink to &quot;超时&quot;">​</a></h2><p>通过将数字作为<code>test</code>的第三个参数可选地指定以毫秒为单位的每个测试的超时时间。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { test } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;bun:test&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;wat&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">data</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">slowOperation</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(data).</span><span style="color:#B392F0;">toBe</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">42</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}, </span><span style="color:#79B8FF;">500</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 测试必须在&lt;500ms内运行</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { test } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;bun:test&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;wat&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">data</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">slowOperation</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(data).</span><span style="color:#6F42C1;">toBe</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">42</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}, </span><span style="color:#005CC5;">500</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 测试必须在&lt;500ms内运行</span></span></code></pre></div><h2 id="test-skip" tabindex="-1"><code>test.skip</code> <a class="header-anchor" href="#test-skip" aria-label="Permalink to &quot;\`test.skip\`&quot;">​</a></h2><p>使用<code>test.skip</code>跳过单个测试。这些测试将不会被运行。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { expect, test } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;bun:test&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">test.</span><span style="color:#B392F0;">skip</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;wat&quot;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// TODO: 修复这个</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0.1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.2</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">toEqual</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0.3</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { expect, test } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;bun:test&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">test.</span><span style="color:#6F42C1;">skip</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;wat&quot;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// TODO: 修复这个</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0.1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.2</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">toEqual</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0.3</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><h2 id="test-todo" tabindex="-1"><code>test.todo</code> <a class="header-anchor" href="#test-todo" aria-label="Permalink to &quot;\`test.todo\`&quot;">​</a></h2><p>使用<code>test.todo</code>标记测试为待办事项。这些测试将会运行，并且测试运行器将期望它们失败。如果它们通过了，您将被提示将其标记为常规测试。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { expect, test } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;bun:test&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">test.</span><span style="color:#B392F0;">todo</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;fix this&quot;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">myTestFunction</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { expect, test } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;bun:test&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">test.</span><span style="color:#6F42C1;">todo</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;fix this&quot;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">myTestFunction</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>要专门运行标记为待办事项的测试，请使用<code>bun test --todo</code>。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bun</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--todo</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bun</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--todo</span></span></code></pre></div><h2 id="test-only" tabindex="-1"><code>test.only</code> <a class="header-anchor" href="#test-only" aria-label="Permalink to &quot;\`test.only\`&quot;">​</a></h2><p>要运行特定的测试或测试套件，请使用<code>test.only()</code>或<code>describe.only()</code>。一旦声明，运行<code>bun test --only</code>将只执行标有<code>.only()</code>的测试/测试套件。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { test, describe } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;bun:test&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test #1&quot;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 不运行</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">test.</span><span style="color:#B392F0;">only</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test #2&quot;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 运行</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">describe.</span><span style="color:#B392F0;">only</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;only&quot;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test #3&quot;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 运行</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { test, describe } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;bun:test&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test #1&quot;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 不运行</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">test.</span><span style="color:#6F42C1;">only</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test #2&quot;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 运行</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">describe.</span><span style="color:#6F42C1;">only</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;only&quot;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test #3&quot;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 运行</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>以下命令将只执行测试#2 和#3。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bun</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--only</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bun</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--only</span></span></code></pre></div><h2 id="test-if" tabindex="-1"><code>test.if</code> <a class="header-anchor" href="#test-if" aria-label="Permalink to &quot;\`test.if\`&quot;">​</a></h2><p>要有条件地运行测试，请使用<code>test.if()</code>。如果条件为真，测试将会运行。这对于只应在特定架构或操作系统上运行的测试特别有用。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">test.</span><span style="color:#B392F0;">if</span><span style="color:#E1E4E8;">(Math.</span><span style="color:#B392F0;">random</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.5</span><span style="color:#E1E4E8;">)(</span><span style="color:#9ECBFF;">&quot;runs half the time&quot;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">test.</span><span style="color:#6F42C1;">if</span><span style="color:#24292E;">(Math.</span><span style="color:#6F42C1;">random</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;">)(</span><span style="color:#032F62;">&quot;runs half the time&quot;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">test.</span><span style="color:#B392F0;">if</span><span style="color:#E1E4E8;">(Math.</span><span style="color:#B392F0;">random</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.5</span><span style="color:#E1E4E8;">)(</span><span style="color:#9ECBFF;">&quot;runs half the time&quot;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">macOS</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> process.arch </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;darwin&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">test.</span><span style="color:#B392F0;">if</span><span style="color:#E1E4E8;">(macOS)(</span><span style="color:#9ECBFF;">&quot;runs on macOS&quot;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 在macOS上运行</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">test.</span><span style="color:#6F42C1;">if</span><span style="color:#24292E;">(Math.</span><span style="color:#6F42C1;">random</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;">)(</span><span style="color:#032F62;">&quot;runs half the time&quot;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">macOS</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> process.arch </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;darwin&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">test.</span><span style="color:#6F42C1;">if</span><span style="color:#24292E;">(macOS)(</span><span style="color:#032F62;">&quot;runs on macOS&quot;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 在macOS上运行</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>要根据某些条件跳过测试，可以使用<code>test.skipIf()</code>或<code>describe.skipIf()</code>。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">macOS</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> process.arch </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;darwin&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">test.</span><span style="color:#B392F0;">skipIf</span><span style="color:#E1E4E8;">(macOS)(</span><span style="color:#9ECBFF;">&quot;runs on non-macOS&quot;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果*不是*macOS，则运行</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">macOS</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> process.arch </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;darwin&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">test.</span><span style="color:#6F42C1;">skipIf</span><span style="color:#24292E;">(macOS)(</span><span style="color:#032F62;">&quot;runs on non-macOS&quot;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 如果*不是*macOS，则运行</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><h2 id="匹配器" tabindex="-1">匹配器 <a class="header-anchor" href="#匹配器" aria-label="Permalink to &quot;匹配器&quot;">​</a></h2><p>Bun 实现了以下匹配器。完全的 Jest 兼容性在路线图上；跟踪进度<a href="https://github.com/oven-sh/bun/issues/1825" target="_blank" rel="noreferrer">在这里</a>。</p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>🟢</td><td><a href="https://jestjs.io/docs/expect#not" target="_blank" rel="noreferrer"><code>.not</code></a></td><td></td></tr><tr><td>🟢</td><td><a href="https://jestjs.io/docs/expect#tobevalue" target="_blank" rel="noreferrer"><code>.toBe()</code></a></td><td></td></tr><tr><td>🟢</td><td><a href="https://jestjs.io/docs/expect#toequalvalue" target="_blank" rel="noreferrer"><code>.toEqual()</code></a></td><td></td></tr><tr><td>🟢</td><td><a href="https://jestjs.io/docs/expect#tobenull" target="_blank" rel="noreferrer"><code>.toBeNull()</code></a></td><td></td></tr><tr><td>🟢</td><td><a href="https://jestjs.io/docs/expect#tobeundefined" target="_blank" rel="noreferrer"><code>.toBeUndefined()</code></a></td><td></td></tr><tr><td>🟢</td><td><a href="https://jestjs.io/docs/expect#tobenan" target="_blank" rel="noreferrer"><code>.toBeNaN()</code></a></td><td></td></tr><tr><td>🟢</td><td><a href="https://jestjs.io/docs/expect#tobedefined" target="_blank" rel="noreferrer"><code>.toBeDefined()</code></a></td><td></td></tr><tr><td>🟢</td><td><a href="https://jestjs.io/docs/expect#tobefalsy" target="_blank" rel="noreferrer"><code>.toBeFalsy()</code></a></td><td></td></tr><tr><td>🟢</td><td><a href="https://jestjs.io/docs/expect#tobetruthy" target="_blank" rel="noreferrer"><code>.toBeTruthy()</code></a></td><td></td></tr><tr><td>🟢</td><td><a href="https://jestjs.io/docs/expect#tocontainitem" target="_blank" rel="noreferrer"><code>.toContain()</code></a></td><td></td></tr><tr><td>🟢</td><td><a href="https://jestjs.io/docs/expect#tostrictequalvalue" target="_blank" rel="noreferrer"><code>.toStrictEqual()</code></a></td><td></td></tr><tr><td>🟢</td><td><a href="https://jestjs.io/docs/expect#tothrowerror" target="_blank" rel="noreferrer"><code>.toThrow()</code></a></td><td></td></tr><tr><td>🟢</td><td><a href="https://jestjs.io/docs/expect#tohavelengthnumber" target="_blank" rel="noreferrer"><code>.toHaveLength()</code></a></td><td></td></tr><tr><td>🟢</td><td><a href="https://jestjs.io/docs/expect#tohavepropertykeypath-value" target="_blank" rel="noreferrer"><code>.toHaveProperty()</code></a></td><td></td></tr><tr><td>🔴</td><td><a href="https://jestjs.io/docs/expect#expectextendmatchers" target="_blank" rel="noreferrer"><code>.extend</code></a></td><td></td></tr><tr><td>🟢</td><td><a href="https://jestjs.io/docs/expect#expectanything" target="_blank" rel="noreferrer"><code>.anything()</code></a></td><td></td></tr><tr><td>🟢</td><td><a href="https://jestjs.io/docs/expect#expectanyconstructor" target="_blank" rel="noreferrer"><code>.any()</code></a></td><td></td></tr><tr><td>🔴</td><td><a href="https://jestjs.io/docs/expect#expectarraycontainingarray" target="_blank" rel="noreferrer"><code>.arrayContaining()</code></a></td><td></td></tr><tr><td>🔴</td><td><a href="https://jestjs.io/docs/expect#expectassertionsnumber" target="_blank" rel="noreferrer"><code>.assertions()</code></a></td><td></td></tr><tr><td>🔴</td><td><a href="https://jestjs.io/docs/expect#expectclosetonumber-numdigits" target="_blank" rel="noreferrer"><code>.closeTo()</code></a></td><td></td></tr><tr><td>🔴</td><td><a href="https://jestjs.io/docs/expect#expecthasassertions" target="_blank" rel="noreferrer"><code>.hasAssertions()</code></a></td><td></td></tr><tr><td>🔴</td><td><a href="https://jestjs.io/docs/expect#expectobjectcontainingobject" target="_blank" rel="noreferrer"><code>.objectContaining()</code></a></td><td></td></tr><tr><td>🟢</td><td><a href="https://jestjs.io/docs/expect#expectstringcontainingstring" target="_blank" rel="noreferrer"><code>.stringContaining()</code></a></td><td></td></tr><tr><td>🟢</td><td><a href="https://jestjs.io/docs/expect#expectstringmatchingstring--regexp" target="_blank" rel="noreferrer"><code>.stringMatching()</code></a></td><td></td></tr><tr><td>🔴</td><td><a href="https://jestjs.io/docs/expect#expectaddsnapshotserializerserializer" target="_blank" rel="noreferrer"><code>.addSnapshotSerializer()</code></a></td><td></td></tr><tr><td>🟢</td><td><a href="https://jestjs.io/docs/expect#resolves" target="_blank" rel="noreferrer"><code>.resolves()</code></a></td><td></td></tr><tr><td>🟢</td><td><a href="https://jestjs.io/docs/expect#rejects" target="_blank" rel="noreferrer"><code>.rejects()</code></a></td><td></td></tr><tr><td>🟢</td><td><a href="https://jestjs.io/docs/expect#tohavebeencalled" target="_blank" rel="noreferrer"><code>.toHaveBeenCalled()</code></a></td><td></td></tr><tr><td>🟢</td><td><a href="https://jestjs.io/docs/expect#tohavebeencalledtimesnumber" target="_blank" rel="noreferrer"><code>.toHaveBeenCalledTimes()</code></a></td><td></td></tr><tr><td>🔴</td><td><a href="https://jestjs.io/docs/expect#tohavebeencalledwitharg1-arg2-" target="_blank" rel="noreferrer"><code>.toHaveBeenCalledWith()</code></a></td><td></td></tr><tr><td>🔴</td><td><a href="https://jestjs.io/docs/expect#tohavebeenlastcalledwitharg1-arg2-" target="_blank" rel="noreferrer"><code>.toHaveBeenLastCalledWith()</code></a></td><td></td></tr><tr><td>🔴</td><td><a href="https://jestjs.io/docs/expect#tohavebeennthcalledwithnthcall-arg1-arg2-" target="_blank" rel="noreferrer"><code>.toHaveBeenNthCalledWith()</code></a></td><td></td></tr><tr><td>🔴</td><td><a href="https://jestjs.io/docs/expect#tohavereturned" target="_blank" rel="noreferrer"><code>.toHaveReturned()</code></a></td><td></td></tr><tr><td>🔴</td><td><a href="https://jestjs.io/docs/expect#tohavereturnedtimesnumber" target="_blank" rel="noreferrer"><code>.toHaveReturnedTimes()</code></a></td><td></td></tr><tr><td>🔴</td><td><a href="https://jestjs.io/docs/expect#tohavereturnedwithvalue" target="_blank" rel="noreferrer"><code>.toHaveReturnedWith()</code></a></td><td></td></tr><tr><td>🔴</td><td><a href="https://jestjs.io/docs/expect#tohavelastreturnedwithvalue" target="_blank" rel="noreferrer"><code>.toHaveLastReturnedWith()</code></a></td><td></td></tr><tr><td>🔴</td><td><a href="https://jestjs.io/docs/expect#tohaventhreturnedwithnthcall-value" target="_blank" rel="noreferrer"><code>.toHaveNthReturnedWith()</code></a></td><td></td></tr><tr><td>🟢</td><td><a href="https://jestjs.io/docs/expect#tobeclosetonumber-numdigits" target="_blank" rel="noreferrer"><code>.toBeCloseTo()</code></a></td><td></td></tr><tr><td>🟢</td><td><a href="https://jestjs.io/docs/expect#tobegreaterthannumber--bigint" target="_blank" rel="noreferrer"><code>.toBeGreaterThan()</code></a></td><td></td></tr><tr><td>🟢</td><td><a href="https://jestjs.io/docs/expect#tobegreaterthanorequalnumber--bigint" target="_blank" rel="noreferrer"><code>.toBeGreaterThanOrEqual()</code></a></td><td></td></tr><tr><td>🟢</td><td><a href="https://jestjs.io/docs/expect#tobelessthannumber--bigint" target="_blank" rel="noreferrer"><code>.toBeLessThan()</code></a></td><td></td></tr><tr><td>🟢</td><td><a href="https://jestjs.io/docs/expect#tobelessthanorequalnumber--bigint" target="_blank" rel="noreferrer"><code>.toBeLessThanOrEqual()</code></a></td><td></td></tr><tr><td>🟢</td><td><a href="https://jestjs.io/docs/expect#tobeinstanceofclass" target="_blank" rel="noreferrer"><code>.toBeInstanceOf()</code></a></td><td></td></tr><tr><td>🔴</td><td><a href="https://jestjs.io/docs/expect#tocontainequalitem" target="_blank" rel="noreferrer"><code>.toContainEqual()</code></a></td><td></td></tr><tr><td>🟢</td><td><a href="https://jestjs.io/docs/expect#tomatchregexp--string" target="_blank" rel="noreferrer"><code>.toMatch()</code></a></td><td></td></tr><tr><td>🟢</td><td><a href="https://jestjs.io/docs/expect#tomatchobjectobject" target="_blank" rel="noreferrer"><code>.toMatchObject()</code></a></td><td></td></tr><tr><td>🟢</td><td><a href="https://jestjs.io/docs/expect#tomatchsnapshotpropertymatchers-hint" target="_blank" rel="noreferrer"><code>.toMatchSnapshot()</code></a></td><td></td></tr><tr><td>🔴</td><td><a href="https://jestjs.io/docs/expect#tomatchinlinesnapshotpropertymatchers-inlinesnapshot" target="_blank" rel="noreferrer"><code>.toMatchInlineSnapshot()</code></a></td><td></td></tr><tr><td>🔴</td><td><a href="https://jestjs.io/docs/expect#tothrowerrormatchingsnapshothint" target="_blank" rel="noreferrer"><code>.toThrowErrorMatchingSnapshot()</code></a></td><td></td></tr><tr><td>🔴</td><td><a href="https://jestjs.io/docs/expect#tothrowerrormatchinginlinesnapshotinlinesnapshot" target="_blank" rel="noreferrer"><code>.toThrowErrorMatchingInlineSnapshot()</code></a></td><td></td></tr></tbody></table>`,35),p=[e];function l(r,c,E,y,d,i){return a(),n("div",null,p)}const u=s(o,[["render",l]]);export{F as __pageData,u as default};
