import{_ as s,o,c as a,Q as n}from"./chunks/framework.33544f09.js";const q=JSON.parse('{"title":"Module resolution","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"runtime/modules.md","filePath":"runtime/modules.md"}'),l={name:"runtime/modules.md"},p=n(`<h1 id="module-resolution" tabindex="-1">Module resolution <a class="header-anchor" href="#module-resolution" aria-label="Permalink to &quot;Module resolution&quot;">​</a></h1><p>JavaScript 中的模块解析是一个复杂的主题。</p><p>当前，生态系统正处于从 CommonJS 模块向本机 ES 模块的多年过渡期中。TypeScript 强制执行其自己的关于导入扩展的规则，这些规则与 ESM 不兼容。不同的构建工具通过不兼容的不同机制支持路径重映射。</p><p>Bun 旨在提供一个一致且可预测的模块解析系统，只需正常工作。不幸的是，它仍然相当复杂。</p><h2 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;语法&quot;">​</a></h2><p>考虑以下文件。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">#index.ts</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { hello } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./hello&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">hello</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">#index.ts</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { hello } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./hello&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">hello</span><span style="color:#24292E;">();</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">#hello.ts</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hello</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Hello world!&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">#hello.ts</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hello</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello world!&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>当我们运行<code>index.ts</code>时，它会打印&quot;Hello world&quot;。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bun</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">index.ts</span></span>
<span class="line"><span style="color:#B392F0;">Hello</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">world!</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bun</span><span style="color:#24292E;"> </span><span style="color:#032F62;">index.ts</span></span>
<span class="line"><span style="color:#6F42C1;">Hello</span><span style="color:#24292E;"> </span><span style="color:#032F62;">world!</span></span></code></pre></div><p>在这种情况下，我们从<code>./hello</code>导入，这是一个没有扩展名的相对路径。**扩展名导入是可选的但受支持的。**为了解决这个导入，Bun 将按照以下顺序检查以下文件：</p><ul><li><code>./hello.ts</code></li><li><code>./hello.tsx</code></li><li><code>./hello.js</code></li><li><code>./hello.mjs</code></li><li><code>./hello.cjs</code></li><li><code>./hello/index.ts</code></li><li><code>./hello/index.js</code></li><li><code>./hello/index.json</code></li><li><code>./hello/index.mjs</code></li></ul><p>导入路径不区分大小写，这意味着这些都是有效的导入：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">#index.ts</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { hello } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./hello&quot;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 这些都是有效的</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { hello } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./HELLO&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { hello } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./hElLo&quot;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">#index.ts</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { hello } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./hello&quot;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 这些都是有效的</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { hello } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./HELLO&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { hello } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./hElLo&quot;</span><span style="color:#24292E;">;</span></span></code></pre></div><p>导入路径还可以选择包含扩展名。如果指定了扩展名，Bun 将仅查找具有该确切扩展名的文件。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">#index.ts</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { hello } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./hello&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { hello } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./hello.ts&quot;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 这个也有效</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">#index.ts</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { hello } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./hello&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { hello } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./hello.ts&quot;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 这个也有效</span></span></code></pre></div><p>如果你从<code>&quot;*.js{x}&quot;</code>导入，Bun 还会额外检查是否存在匹配的<code>*.ts{x}</code>文件，以与 TypeScript 的<a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-7.html#new-file-extensions" target="_blank" rel="noreferrer">ES 模块支持</a>兼容。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">#index.ts</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { hello } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./hello&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { hello } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./hello.ts&quot;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 这个也有效</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { hello } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./hello.js&quot;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 这也有效</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">#index.ts</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { hello } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./hello&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { hello } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./hello.ts&quot;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 这个也有效</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { hello } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./hello.js&quot;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 这也有效</span></span></code></pre></div><p>Bun 支持 ES 模块（<code>import</code>/<code>export</code>语法）和 CommonJS 模块（<code>require()</code>/<code>module.exports</code>）两种模块系统。下面的 CommonJS 版本在 Bun 中也可以工作。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">#index.js</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">hello</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./hello&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">hello</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">#index.js</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">hello</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./hello&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">hello</span><span style="color:#24292E;">();</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">#hello.js</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hello</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Hello world!&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">.hello </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> hello;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">#hello.js</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hello</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello world!&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">exports</span><span style="color:#24292E;">.hello </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> hello;</span></span></code></pre></div><p>不过，对于新项目，不建议使用 CommonJS。</p><h2 id="模块系统" tabindex="-1">模块系统 <a class="header-anchor" href="#模块系统" aria-label="Permalink to &quot;模块系统&quot;">​</a></h2><p>Bun 原生支持 CommonJS 和 ES 模块。ES 模块是新项目的推荐模块格式，但 Node.js 生态系统中仍广泛使用 CommonJS 模块。</p><p>在 Bun 的 JavaScript 运行时中，<code>require</code>可以被 ES 模块和 CommonJS 模块同时使用。如果目标模块是 ES 模块，<code>require</code>会返回模块命名空间对象（相当于<code>import * as</code>）。如果目标模块是 CommonJS 模块，<code>require</code>会返回<code>module.exports</code>对象（与 Node.js 中的用法相同）。</p><table><thead><tr><th>模块类型</th><th><code>require()</code></th><th><code>import * as</code></th></tr></thead><tbody><tr><td>ES 模块</td><td>模块命名空间</td><td>模块命名空间</td></tr><tr><td>CommonJS</td><td>module.exports</td><td><code>default</code>是<code>module.exports</code>，<code>module.exports</code>的键是具名导出</td></tr></tbody></table><h3 id="使用require" tabindex="-1">使用<code>require()</code> <a class="header-anchor" href="#使用require" aria-label="Permalink to &quot;使用\`require()\`&quot;">​</a></h3><p>你可以<code>require()</code>任何文件或包，甚至是<code>.ts</code>或<code>.mjs</code>文件。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">foo</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./foo&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 扩展名是可选的</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">bar</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./bar.mjs&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">baz</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./baz.tsx&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">foo</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./foo&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 扩展名是可选的</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">bar</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./bar.mjs&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">baz</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./baz.tsx&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><details><summary>什么是CommonJS模块?</summary> 在 2016 年，ECMAScript 添加了对[ES 模块](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules)的支持。ES 模块是 JavaScript 模块的标准。然而，数百万的 npm 包仍然使用 CommonJS 模块。 <p>CommonJS 模块是使用<code>module.exports</code>导出值的模块。通常，使用<code>require</code>来导入 CommonJS 模块。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// my-commonjs.cjs</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">stuff</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./stuff&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { stuff };</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// my-commonjs.cjs</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">stuff</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./stuff&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { stuff };</span></span></code></pre></div><p>CommonJS 模块与 ES 模块的最大区别在于，CommonJS 模块是同步的，而 ES 模块是异步的。还有其他的区别。</p><ul><li>ES 模块支持顶级的<code>await</code>，而 CommonJS 模块不支持。</li><li>ES 模块始终处于<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode" target="_blank" rel="noreferrer">严格模式</a>，而 CommonJS 模块不是。</li><li>浏览器不原生支持 CommonJS 模块，但通过<code>&lt;script type=&quot;module&quot;&gt;</code>可以原生支持 ES 模块。</li><li>CommonJS 模块不是静态可分析的，而 ES 模块只允许静态导入和导出。</li></ul></details><h3 id="使用import" tabindex="-1">使用<code>import</code> <a class="header-anchor" href="#使用import" aria-label="Permalink to &quot;使用\`import\`&quot;">​</a></h3><p>你可以<code>import</code>任何文件或包，甚至是<code>.cjs</code>文件。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">foo</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./foo&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 扩展名是可选的</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">bar</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./bar.mjs&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">baz</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./my-typescript.tsx&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">foo</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./foo&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 扩展名是可选的</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">bar</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./bar.mjs&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">baz</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./my-typescript.tsx&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="同时使用import和require" tabindex="-1">同时使用<code>import</code>和<code>require()</code> <a class="header-anchor" href="#同时使用import和require" aria-label="Permalink to &quot;同时使用\`import\`和\`require()\`&quot;">​</a></h3><p>在 Bun 中，你可以在同一文件中同时使用<code>import</code>或<code>require</code>，它们都可以正常工作。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { stuff } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;.</span><span style="color:#FDAEB7;font-style:italic;">/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">my</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">commonjs.cjs</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#FDAEB7;font-style:italic;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Stuff </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./my-commonjs.cjs&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">myStuff</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./my-commonjs.cjs&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { stuff } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;.</span><span style="color:#B31D28;font-style:italic;">/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">my</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">commonjs.cjs</span><span style="color:#032F62;">&quot;</span><span style="color:#B31D28;font-style:italic;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Stuff </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./my-commonjs.cjs&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">myStuff</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./my-commonjs.cjs&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="顶级await" tabindex="-1">顶级<code>await</code> <a class="header-anchor" href="#顶级await" aria-label="Permalink to &quot;顶级\`await\`&quot;">​</a></h3><p>唯一的例外是顶级<code>await</code>。你不能<code>require()</code>一个使用顶级<code>await</code>的文件，因为<code>require()</code>函数是同步的。</p><p>幸运的是，很少有库使用顶级<code>await</code>，所以这很少是一个问题。但如果你的应用代码中使用了顶级<code>await</code>，请确保该文件不会从应用程序的其他地方<code>require()</code>。相反，你应该使用<code>import</code>或<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import" target="_blank" rel="noreferrer">dynamic <code>import()</code></a>。</p><h2 id="导入包" tabindex="-1">导入包 <a class="header-anchor" href="#导入包" aria-label="Permalink to &quot;导入包&quot;">​</a></h2><p>Bun 实现了 Node.js 模块解析算法，因此你可以使用裸标识符从<code>node_modules</code>导入包。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { stuff } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;foo&quot;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { stuff } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;">;</span></span></code></pre></div><p>完整的算法规范在<a href="https://nodejs.org/api/modules.html" target="_blank" rel="noreferrer">Node.js 文档</a>中有官方文档；我们不会在这里重复。简单来说：如果你从<code>&quot;foo&quot;</code>导入，Bun 会扫描文件系统以查找包含包<code>foo</code>的<code>node_modules</code>目录。</p><p>一旦找到<code>foo</code>包，Bun 会读取<code>package.json</code>以确定应该如何导入包。为了确定包的入口点，Bun 首先读取<code>exports</code>字段，并检查以下条件：</p><div class="language-jsonc vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsonc</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">#package.json</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;name&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;foo&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;exports&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;bun&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./index.js&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;worker&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./index.js&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;node&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./index.js&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;require&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./index.js&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 如果导入者是CommonJS</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;import&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./index.mjs&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 如果导入者是ES模块</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;default&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./index.js&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">#package.json</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;name&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;exports&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;bun&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./index.js&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;worker&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./index.js&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;node&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./index.js&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;require&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./index.js&quot;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 如果导入者是CommonJS</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;import&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./index.mjs&quot;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 如果导入者是ES模块</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;default&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./index.js&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在<code>package.json</code>中首先出现的这些条件中的任何一个都将用于确定包的入口点。</p><p>Bun 支持子路径<a href="https://nodejs.org/api/packages.html#subpath-exports" target="_blank" rel="noreferrer"><code>&quot;exports&quot;</code></a>和<a href="https://nodejs.org/api/packages.html#imports" target="_blank" rel="noreferrer"><code>&quot;imports&quot;</code></a>。在<code>&quot;exports&quot;</code>映射中指定任何子路径将阻止其他子路径被导入。</p><div class="language-jsonc vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsonc</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">#package.json</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;name&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;foo&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;exports&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;.&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./index.js&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;./package.json&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./package.json&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 子路径</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">#package.json</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;name&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;exports&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;.&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./index.js&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;./package.json&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./package.json&quot;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 子路径</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p><strong>发布 TypeScript</strong> — 请注意，Bun 支持特殊的<code>&quot;bun&quot;</code>导出条件。如果你的库是用 TypeScript 编写的，你可以直接将（未经转译的）TypeScript 文件发布到 npm。如果在<code>&quot;bun&quot;</code>条件中指定了你的包的<code>*.ts</code>入口点，Bun 将直接导入和执行你的 TypeScript 源文件。</p></blockquote><p>如果未定义<code>exports</code>，Bun 会回退到<code>&quot;module&quot;</code>（仅适用于 ESM 导入）然后是<a href="https://nodejs.org/api/packages.html#main" target="_blank" rel="noreferrer"><code>&quot;main&quot;</code></a>。</p><div class="language-json#package.json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json#package.json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">{</span></span>
<span class="line"><span style="color:#e1e4e8;">  &quot;name&quot;: &quot;foo&quot;,</span></span>
<span class="line"><span style="color:#e1e4e8;">  &quot;module&quot;: &quot;./index.js&quot;,</span></span>
<span class="line"><span style="color:#e1e4e8;">  &quot;main&quot;: &quot;./index.js&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">{</span></span>
<span class="line"><span style="color:#24292e;">  &quot;name&quot;: &quot;foo&quot;,</span></span>
<span class="line"><span style="color:#24292e;">  &quot;module&quot;: &quot;./index.js&quot;,</span></span>
<span class="line"><span style="color:#24292e;">  &quot;main&quot;: &quot;./index.js&quot;</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><h2 id="路径重映射" tabindex="-1">路径重映射 <a class="header-anchor" href="#路径重映射" aria-label="Permalink to &quot;路径重映射&quot;">​</a></h2><p>为了将 TypeScript 视为一流公民，Bun 运行时会根据<code>tsconfig.json</code>中的<a href="https://www.typescriptlang.org/tsconfig#paths" target="_blank" rel="noreferrer"><code>compilerOptions.paths</code></a>字段重新映射导入路径。这与 Node.js 不支持任何形式的导入路径重映射存在重大分歧。</p><div class="language-jsonc vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsonc</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">#tsconfig.json</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;compilerOptions&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;paths&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;config&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;./config.ts&quot;</span><span style="color:#E1E4E8;">],         </span><span style="color:#6A737D;">// 将标识符映射到文件</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;components/*&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;components/*&quot;</span><span style="color:#E1E4E8;">],  </span><span style="color:#6A737D;">// 通配符匹配</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">#tsconfig.json</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;paths&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;config&quot;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;./config.ts&quot;</span><span style="color:#24292E;">],         </span><span style="color:#6A737D;">// 将标识符映射到文件</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;components/*&quot;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;components/*&quot;</span><span style="color:#24292E;">],  </span><span style="color:#6A737D;">// 通配符匹配</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>如果你不是 TypeScript 用户，可以在项目根目录创建一个<a href="https://code.visualstudio.com/docs/languages/jsconfig" target="_blank" rel="noreferrer"><code>jsconfig.json</code></a>以实现相同的行为。</p><p>Bun 的 JavaScript 运行时原生支持 CommonJS。当 Bun 的 JavaScript 编译器检测到<code>module.exports</code>的使用时，它会将文件视为 CommonJS。然后，模块加载器会将已编译的模块包装在以下形式的函数中：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">exports</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">require</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 已编译的模块</span></span>
<span class="line"><span style="color:#E1E4E8;">})(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">, require);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">module</span><span style="color:#24292E;">, </span><span style="color:#E36209;">exports</span><span style="color:#24292E;">, </span><span style="color:#E36209;">require</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 已编译的模块</span></span>
<span class="line"><span style="color:#24292E;">})(</span><span style="color:#005CC5;">module</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">exports</span><span style="color:#24292E;">, require);</span></span></code></pre></div><p><code>module</code>、<code>exports</code>和<code>require</code>与 Node.js 中的<code>module</code>、<code>exports</code>和<code>require</code>非常相似。它们是通过 C++中的<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with" target="_blank" rel="noreferrer"><code>with scope</code></a>赋值的。内部的<code>Map</code>存储了<code>exports</code>对象，以处理模块在完全加载之前的循环<code>require</code>调用。</p><p>一旦成功评估了 CommonJS 模块，就会创建一个合成模块记录，其<code>default</code> ES 模块<a href="https://github.com/oven-sh/bun/blob/9b6913e1a674ceb7f670f917fc355bb8758c6c72/src/bun.js/bindings/CommonJSModuleRecord.cpp#L212-L213" target="_blank" rel="noreferrer">导出集设置为<code>module.exports</code></a>，<code>module.exports</code>对象的键会重新导出为具名导出（如果<code>module.exports</code>对象是对象）。</p><p>在使用 Bun 的捆绑器时，情况会有所不同。捆绑器将 CommonJS 模块包装在一个<code>require_\${moduleName}</code>函数中，该函数返回<code>module.exports</code>对象。</p>`,60),e=[p];function t(c,r,E,y,i,d){return o(),a("div",null,e)}const h=s(l,[["render",t]]);export{q as __pageData,h as default};
