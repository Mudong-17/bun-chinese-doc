import{_ as t}from"./chunks/bundler-speed.791c8ec5.js";import{_ as s,o as d,c as n,Q as a}from"./chunks/framework.33544f09.js";const m=JSON.parse('{"title":"vs esbuild","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"bundler/vs-esbuild.md","filePath":"bundler/vs-esbuild.md"}'),e={name:"bundler/vs-esbuild.md"},o=a('<h1 id="vs-esbuild" tabindex="-1">vs esbuild <a class="header-anchor" href="#vs-esbuild" aria-label="Permalink to &quot;vs esbuild&quot;">​</a></h1><p>Bun 的捆绑器 API 受<a href="https://esbuild.github.io/" target="_blank" rel="noreferrer">esbuild</a>的强烈启发。从 esbuild 迁移到 Bun 的捆绑器应该相对无痛。本指南将简要解释为什么您可能考虑迁移到 Bun 的捆绑器，并为那些已经熟悉 esbuild 的 API 的人提供了一个并列的 API 比较参考。</p><p>有一些需要注意的行为差异。</p><ul><li><strong>默认捆绑</strong>。与 esbuild 不同，Bun <em>始终默认捆绑</em>。这就是为什么在 Bun 示例中不需要<code>--bundle</code>标志的原因。要单独转译每个文件，请使用<a href="/api/transpiler.html"><code>Bun.Transpiler</code></a>。</li><li><strong>只是一个捆绑器</strong>。与 esbuild 不同，Bun 的捆绑器不包括内置的开发服务器或文件监视器。它只是一个捆绑器。捆绑器旨在与<code>Bun.serve</code>和其他运行时 API 一起使用，以实现相同的效果。因此，与 HTTP/文件监视相关的所有选项都不适用。</li></ul><h2 id="性能" tabindex="-1">性能 <a class="header-anchor" href="#性能" aria-label="Permalink to &quot;性能&quot;">​</a></h2><p>具有面向性能的 API，与经过广泛优化的基于 Zig 的 JS/TS 解析器相结合，Bun 的捆绑器比 esbuild 在 esbuild 的<a href="https://github.com/oven-sh/bun/tree/main/bench/bundle" target="_blank" rel="noreferrer">three.js 基准</a>上快 1.75 倍。</p><p><img src="'+t+`" alt="从头开始捆绑10份three.js副本，带有sourcemaps和缩小"></p><h2 id="cli-api" tabindex="-1">CLI API <a class="header-anchor" href="#cli-api" aria-label="Permalink to &quot;CLI API&quot;">​</a></h2><p>Bun 和 esbuild 都提供了命令行界面。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">esbuild</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">入口</span><span style="color:#E1E4E8;">点</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--outdir=out</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--bundle</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bun</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">build</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">入口</span><span style="color:#E1E4E8;">点</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--outdir=out</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">esbuild</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">入口</span><span style="color:#24292E;">点</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--outdir=out</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--bundle</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bun</span><span style="color:#24292E;"> </span><span style="color:#032F62;">build</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">入口</span><span style="color:#24292E;">点</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--outdir=out</span></span></code></pre></div><p>在 Bun 的 CLI 中，像<code>--minify</code>这样的简单布尔标志不接受参数。其他标志，如<code>--outdir &lt;路径&gt;</code>接受参数；这些标志可以写成<code>--outdir out</code>或<code>--outdir=out</code>。某些标志，如<code>--define</code>可以多次指定：<code>--define foo=bar --define bar=baz</code>。</p><table><thead><tr><th>esbuild</th><th>bun build</th><th></th></tr></thead><tbody><tr><td>--bundle</td><td>n/a</td><td>Bun 始终捆绑，使用--no-bundle 来禁用此行为。</td></tr><tr><td>--define:K=V</td><td>--define K=V</td><td>语法差异小，没有冒号。</td></tr><tr><td></td><td></td><td><code>bash $ esbuild --define:foo=bar $ bun build --define foo=bar</code></td></tr><tr><td><code>--external:&lt;pkg&gt; </code></td><td><code>--external &lt;pkg&gt;</code></td><td>语法差异小，没有冒号。</td></tr><tr><td></td><td></td><td><code>bash $ esbuild --external:react $ bun build --external react </code></td></tr><tr><td>--format</td><td>--format</td><td>Bun 目前仅支持&quot;esm&quot;，但计划支持其他模块格式。esbuild 默认为&quot;iife&quot;。</td></tr><tr><td>--loader:.ext=loader</td><td>--loader .ext:loader</td><td>Bun 支持一组不同的内置加载器，与 esbuild 不同；有关完整参考，请参阅 Bundler &gt; Loaders。尚未实现 esbuild 加载器 dataurl、binary、base64、copy 和 empty。 --loader 的语法略有不同。</td></tr><tr><td></td><td></td><td><code>bash $ esbuild app.ts --bundle --loader:.svg=text $ bun build app.ts --loader .svg:text </code></td></tr><tr><td>--minify</td><td>--minify</td><td>没有差异</td></tr><tr><td>--outdir</td><td>--outdir</td><td>没有差异</td></tr><tr><td>--outfile</td><td>--outfile</td><td>没有差异</td></tr><tr><td>--packages</td><td>n/a</td><td>不支持</td></tr><tr><td>--platform</td><td>--target</td><td>为了与 tsconfig 一致，更名为--target。不支持 neutral。</td></tr><tr><td>--serve</td><td>n/a</td><td>不适用</td></tr><tr><td>--sourcemap</td><td>--sourcemap</td><td>没有差异</td></tr><tr><td>--splitting</td><td>--splitting</td><td>没有差异</td></tr><tr><td>--target</td><td>n/a</td><td>不支持。Bun 的捆绑器目前不执行语法下级处理。</td></tr><tr><td>--watch</td><td>--watch</td><td>没有差异</td></tr><tr><td>--allow-overwrite</td><td>n/a</td><td>从不允许覆盖</td></tr><tr><td>--analyze</td><td>n/a</td><td>不支持</td></tr><tr><td>--asset-names</td><td>--asset-naming</td><td>为了与 JS API 中的 naming 一致，改名</td></tr><tr><td>--banner</td><td>n/a</td><td>不支持</td></tr><tr><td>--certfile</td><td>n/a</td><td>不适用</td></tr><tr><td>--charset=utf8</td><td>n/a</td><td>不支持</td></tr><tr><td>--chunk-names</td><td>--chunk-naming</td><td>为了与 JS API 中的 naming 一致，改名</td></tr><tr><td>--color</td><td>n/a</td><td>始终启用</td></tr><tr><td>--drop</td><td>n/a</td><td>不支持</td></tr><tr><td>--entry-names</td><td>--entry-naming</td><td>为了与 JS API 中的 naming 一致，改名</td></tr><tr><td>--footer</td><td>n/a</td><td>不支持</td></tr><tr><td>--global-name</td><td>n/a</td><td>不适用，Bun 目前不支持 iife 输出</td></tr><tr><td>--ignore-annotations</td><td>n/a</td><td>不支持</td></tr><tr><td>--inject</td><td>n/a</td><td>不支持</td></tr><tr><td>--jsx</td><td><code>--jsx-runtime &lt;runtime&gt;</code></td><td>支持&quot;automatic&quot;（使用 jsx 变换）和&quot;classic&quot;（使用 React.createElement）</td></tr><tr><td>--jsx-dev</td><td>n/a</td><td>Bun 从 tsconfig.json 中读取 compilerOptions.jsx，以确定默认值。如果 compilerOptions.jsx 为&quot;react-jsx&quot;，或者 NODE_ENV=production，Bun 将使用 jsx 变换。否则，它使用 jsxDEV。对于任何到 Bun 使用 jsxDEV。捆绑器不支持 preserve。</td></tr><tr><td>--jsx-factory</td><td>--jsx-factory</td><td></td></tr><tr><td>--jsx-fragment</td><td>--jsx-fragment</td><td></td></tr><tr><td>--jsx-import-source</td><td>--jsx-import-source</td><td></td></tr><tr><td>--jsx-side-effects</td><td>n/a</td><td>假定 JSX 始终是无副作用的</td></tr><tr><td>--keep-names</td><td>n/a</td><td>不支持</td></tr><tr><td>--keyfile</td><td>n/a</td><td>不适用</td></tr><tr><td>--legal-comments</td><td>n/a</td><td>不支持</td></tr><tr><td>--log-level</td><td>n/a</td><td>不支持。可以在 bunfig.toml 中设置为 logLevel。</td></tr><tr><td>--log-limit</td><td>n/a</td><td>不支持</td></tr><tr><td>--log-override:X=Y</td><td>n/a</td><td>不支持</td></tr><tr><td>--main-fields</td><td>n/a</td><td>不支持</td></tr><tr><td>--mangle-cache</td><td>n/a</td><td>不支持</td></tr><tr><td>--mangle-props</td><td>n/a</td><td>不支持</td></tr><tr><td>--mangle-quoted</td><td>n/a</td><td>不支持</td></tr><tr><td>--metafile</td><td>n/a</td><td>不支持</td></tr><tr><td>--minify-whitespace</td><td>--minify-whitespace</td><td></td></tr><tr><td>--minify-identifiers</td><td>--minify-identifiers</td><td></td></tr><tr><td>--minify-syntax</td><td>--minify-syntax</td><td></td></tr><tr><td>--out-extension</td><td>n/a</td><td>不支持</td></tr><tr><td>--outbase</td><td>--root</td><td></td></tr><tr><td>--preserve-symlinks</td><td>n/a</td><td>不支持</td></tr><tr><td>--public-path</td><td>--public-path</td><td></td></tr><tr><td>--pure</td><td>n/a</td><td>不支持</td></tr><tr><td>--reserve-props</td><td>n/a</td><td>不支持</td></tr><tr><td>--resolve-extensions</td><td>n/a</td><td>不支持</td></tr><tr><td>--servedir</td><td>n/a</td><td>不适用</td></tr><tr><td>--source-root</td><td>n/a</td><td>不支持</td></tr><tr><td>--sourcefile</td><td>n/a</td><td>不支持。Bun 目前不支持 stdin 输入。</td></tr><tr><td>--sourcemap</td><td>--sourcemap</td><td>没有差异</td></tr><tr><td>--sources-content</td><td>n/a</td><td>不支持</td></tr><tr><td>--supported</td><td>n/a</td><td>不支持</td></tr><tr><td>--tree-shaking</td><td>n/a</td><td>始终为 true</td></tr><tr><td>--tsconfig</td><td>--tsconfig-override</td><td></td></tr><tr><td>--version</td><td>n/a</td><td>运行 bun --version 以查看 Bun 的版本。</td></tr></tbody></table><h2 id="javascript-api" tabindex="-1">JavaScript API <a class="header-anchor" href="#javascript-api" aria-label="Permalink to &quot;JavaScript API&quot;">​</a></h2><table><thead><tr><th>esbuild.build()</th><th>Bun.build()</th><th></th></tr></thead><tbody><tr><td>absWorkingDir</td><td>n/a</td><td>始终设置为 process.cwd()</td></tr><tr><td>alias</td><td>n/a</td><td>不支持</td></tr><tr><td>allowOverwrite</td><td>n/a</td><td>始终为 false</td></tr><tr><td>assetNames</td><td>naming.asset</td><td>使用与 esbuild 相同的模板语法，但必须显式包含[ext]。</td></tr><tr><td>banner</td><td>n/a</td><td>不支持</td></tr><tr><td>bundle</td><td>n/a</td><td>始终为 true。要进行捆绑之外的转译，请使用 Bun.Transpiler。</td></tr><tr><td>charset</td><td>n/a</td><td>不支持</td></tr><tr><td>chunkNames</td><td>naming.chunk</td><td>使用与 esbuild 相同的模板语法，但必须显式包含[ext]。</td></tr><tr><td>color</td><td>n/a</td><td>Bun 将日志返回到构建结果的 logs 属性中。</td></tr><tr><td>conditions</td><td>n/a</td><td>不支持。导出条件优先级由 target 确定。</td></tr><tr><td>define</td><td>define</td><td></td></tr><tr><td>drop</td><td>n/a</td><td>不支持</td></tr><tr><td>entryNames</td><td>naming 或 naming.entry</td><td>Bun 支持一个 naming 键，可以是字符串或对象。使用与 esbuild 相同的模板语法，但必须显式包含[ext]。</td></tr><tr><td>entryPoints</td><td>entrypoints</td><td>大写差异</td></tr><tr><td>external</td><td>external</td><td>没有差异</td></tr><tr><td>footer</td><td>n/a</td><td>不支持</td></tr><tr><td>format</td><td>format</td><td>目前仅支持&quot;esm&quot;。计划支持&quot;cjs&quot;和&quot;iife&quot;。</td></tr><tr><td>globalName</td><td>n/a</td><td>不支持</td></tr><tr><td>ignoreAnnotations</td><td>n/a</td><td>不支持</td></tr><tr><td>inject</td><td>n/a</td><td>不支持</td></tr><tr><td>jsx</td><td>jsx</td><td>在 JS API 中不支持，在 tsconfig.json 中配置</td></tr><tr><td>jsxDev</td><td>jsxDev</td><td>在 JS API 中不支持，在 tsconfig.json 中配置</td></tr><tr><td>jsxFactory</td><td>jsxFactory</td><td>在 JS API 中不支持，在 tsconfig.json 中配置</td></tr><tr><td>jsxFragment</td><td>jsxFragment</td><td>在 JS API 中不支持，在 tsconfig.json 中配置</td></tr><tr><td>jsxImportSource</td><td>jsxImportSource</td><td>在 JS API 中不支持，在 tsconfig.json 中配置</td></tr><tr><td>jsxSideEffects</td><td>jsxSideEffects</td><td>在 JS API 中不支持，在 tsconfig.json 中配置</td></tr><tr><td>keepNames</td><td>n/a</td><td>不支持</td></tr><tr><td>legalComments</td><td>n/a</td><td>不支持</td></tr><tr><td>loader</td><td>loader</td><td>Bun 支持一组不同于 esbuild 的内置加载器；有关完整参考，请参阅 Bundler &gt; Loaders。尚未实现 esbuild 加载器 dataurl、binary、base64、copy 和 empty。</td></tr><tr><td>logLevel</td><td>n/a</td><td>不支持</td></tr><tr><td>logLimit</td><td>n/a</td><td>不支持</td></tr><tr><td>logOverride</td><td>n/a</td><td>不支持</td></tr><tr><td>mainFields</td><td>n/a</td><td>不支持</td></tr><tr><td>mangleCache</td><td>n/a</td><td>不支持</td></tr><tr><td>mangleProps</td><td>n/a</td><td>不支持</td></tr><tr><td>mangleQuoted</td><td>n/a</td><td>不支持</td></tr><tr><td>metafile</td><td>n/a</td><td>不支持</td></tr><tr><td>minify</td><td>minify</td><td>在 Bun 中，minify 可以是布尔值或对象。</td></tr><tr><td>minifyIdentifiers</td><td>minify.identifiers</td><td>请参见 minify</td></tr><tr><td>minifySyntax</td><td>minify.syntax</td><td>请参见 minify</td></tr><tr><td>minifyWhitespace</td><td>minify.whitespace</td><td>请参见 minify</td></tr><tr><td>nodePaths</td><td>n/a</td><td>不支持</td></tr><tr><td>outExtension</td><td>n/a</td><td>不支持</td></tr><tr><td>outbase</td><td>root</td><td>不同的名称</td></tr><tr><td>outdir</td><td>outdir</td><td>没有差异</td></tr><tr><td>outfile</td><td>outfile</td><td>没有差异</td></tr><tr><td>packages</td><td>n/a</td><td>不支持，使用 external</td></tr><tr><td>platform</td><td>target</td><td>支持&quot;bun&quot;、&quot;node&quot;和&quot;browser&quot;（默认）。不支持&quot;neutral&quot;。</td></tr><tr><td>plugins</td><td>plugins</td><td>Bun 的插件 API 是 esbuild 的子集。一些 esbuild 插件可以与 Bun 直接使用。</td></tr><tr><td>preserveSymlinks</td><td>n/a</td><td>不支持</td></tr><tr><td>publicPath</td><td>publicPath</td><td>没有差异</td></tr><tr><td>pure</td><td>n/a</td><td>不支持</td></tr><tr><td>reserveProps</td><td>n/a</td><td>不支持</td></tr><tr><td>resolveExtensions</td><td>n/a</td><td>不支持</td></tr><tr><td>sourceRoot</td><td>n/a</td><td>不支持</td></tr><tr><td>sourcemap</td><td>sourcemap</td><td>支持&quot;inline&quot;、&quot;external&quot;和&quot;none&quot;</td></tr><tr><td>sourcesContent</td><td>n/a</td><td>不支持</td></tr><tr><td>splitting</td><td>splitting</td><td>没有差异</td></tr><tr><td>stdin</td><td>n/a</td><td>不支持</td></tr><tr><td>supported</td><td>n/a</td><td>不支持</td></tr><tr><td>target</td><td>n/a</td><td>不支持语法降级</td></tr><tr><td>treeShaking</td><td>n/a</td><td>始终为 true</td></tr><tr><td>tsconfig</td><td>n/a</td><td>不支持</td></tr><tr><td>write</td><td>n/a</td><td>如果设置了 outdir/outfile，则为 true，否则为 false</td></tr></tbody></table><h2 id="插件-api" tabindex="-1">插件 API <a class="header-anchor" href="#插件-api" aria-label="Permalink to &quot;插件 API&quot;">​</a></h2><p>Bun 的插件 API 旨在与 esbuild 兼容。Bun 不支持 esbuild 的完整插件 API 表面，但已实现核心功能。许多第三方<code>esbuild</code>插件将与 Bun 一起即插即用。</p><blockquote><p>从长远来看，我们的目标是实现与 esbuild 的 API 功能相等，因此如果某些功能无法正常工作，请提交问题以帮助我们设置优先级。</p></blockquote><p>在 Bun 和 esbuild 中，插件是使用<code>builder</code>对象定义的。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> { BunPlugin } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;bun&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">myPlugin</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BunPlugin</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  name: </span><span style="color:#9ECBFF;">&quot;my-plugin&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">setup</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">builder</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 定义插件</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">type</span><span style="color:#24292E;"> { BunPlugin } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;bun&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">myPlugin</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BunPlugin</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&quot;my-plugin&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">setup</span><span style="color:#24292E;">(</span><span style="color:#E36209;">builder</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 定义插件</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p><code>builder</code>对象提供了一些方法，用于钩入捆绑过程的各个部分。Bun 实现了<code>onResolve</code>和<code>onLoad</code>；它尚未实现 esbuild 的<code>onStart</code>、<code>onEnd</code>、<code>onDispose</code>和<code>resolve</code>钩子，以及<code>initialOptions</code>部分实现，只读并且只有 esbuild 选项的子集；请改用<a href="/bundler/plugins.html"><code>config</code></a>（与 Bun 的<code>BuildConfig</code>格式相同）。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> { BunPlugin } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;bun&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">myPlugin</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BunPlugin</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  name: </span><span style="color:#9ECBFF;">&quot;my-plugin&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">setup</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">builder</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    builder.</span><span style="color:#B392F0;">onResolve</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">/* onResolve.options */</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">      (</span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">/* onResolve.results */</span></span>
<span class="line"><span style="color:#E1E4E8;">        };</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">    builder.</span><span style="color:#B392F0;">onLoad</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">/* onLoad.options */</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">      (</span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">/* onLoad.results */</span></span>
<span class="line"><span style="color:#E1E4E8;">        };</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">type</span><span style="color:#24292E;"> { BunPlugin } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;bun&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">myPlugin</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BunPlugin</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&quot;my-plugin&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">setup</span><span style="color:#24292E;">(</span><span style="color:#E36209;">builder</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    builder.</span><span style="color:#6F42C1;">onResolve</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">/* onResolve.options */</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">      (</span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">/* onResolve.results */</span></span>
<span class="line"><span style="color:#24292E;">        };</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#24292E;">    builder.</span><span style="color:#6F42C1;">onLoad</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">/* onLoad.options */</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">      (</span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">/* onLoad.results */</span></span>
<span class="line"><span style="color:#24292E;">        };</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><h3 id="onresolve" tabindex="-1"><code>onResolve</code> <a class="header-anchor" href="#onresolve" aria-label="Permalink to &quot;\`onResolve\`&quot;">​</a></h3><h4 id="options" tabindex="-1"><code>options</code> <a class="header-anchor" href="#options" aria-label="Permalink to &quot;\`options\`&quot;">​</a></h4><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>🟢</td><td>filter</td></tr><tr><td>🟢</td><td>namespace</td></tr></tbody></table><h4 id="arguments" tabindex="-1"><code>arguments</code> <a class="header-anchor" href="#arguments" aria-label="Permalink to &quot;\`arguments\`&quot;">​</a></h4><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>🟢</td><td>path</td></tr><tr><td>🟢</td><td>importer</td></tr><tr><td>🔴</td><td>namespace</td></tr><tr><td>🔴</td><td>resolveDir</td></tr><tr><td>🔴</td><td>kind</td></tr><tr><td>🔴</td><td>pluginData</td></tr></tbody></table><h4 id="results" tabindex="-1"><code>results</code> <a class="header-anchor" href="#results" aria-label="Permalink to &quot;\`results\`&quot;">​</a></h4><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>🟢</td><td>namespace</td></tr><tr><td>🟢</td><td>path</td></tr><tr><td>🔴</td><td>errors</td></tr><tr><td>🔴</td><td>external</td></tr><tr><td>🔴</td><td>pluginData</td></tr><tr><td>🔴</td><td>pluginName</td></tr><tr><td>🔴</td><td>sideEffects</td></tr><tr><td>🔴</td><td>suffix</td></tr><tr><td>🔴</td><td>warnings</td></tr><tr><td>🔴</td><td>watchDirs</td></tr><tr><td>🔴</td><td>watchFiles</td></tr></tbody></table><h3 id="onload" tabindex="-1"><code>onLoad</code> <a class="header-anchor" href="#onload" aria-label="Permalink to &quot;\`onLoad\`&quot;">​</a></h3><h4 id="options-1" tabindex="-1"><code>options</code> <a class="header-anchor" href="#options-1" aria-label="Permalink to &quot;\`options\`&quot;">​</a></h4><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>🟢</td><td><code>filter</code></td></tr><tr><td>🟢</td><td><code>namespace</code></td></tr></tbody></table><h4 id="arguments-1" tabindex="-1"><code>arguments</code> <a class="header-anchor" href="#arguments-1" aria-label="Permalink to &quot;\`arguments\`&quot;">​</a></h4><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>🟢</td><td><code>path</code></td></tr><tr><td>🔴</td><td><code>namespace</code></td></tr><tr><td>🔴</td><td><code>suffix</code></td></tr><tr><td>🔴</td><td><code>pluginData</code></td></tr></tbody></table><h4 id="results-1" tabindex="-1"><code>results</code> <a class="header-anchor" href="#results-1" aria-label="Permalink to &quot;\`results\`&quot;">​</a></h4><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>🟢</td><td><code>contents</code></td></tr><tr><td>🟢</td><td><code>loader</code></td></tr><tr><td>🔴</td><td><code>errors</code></td></tr><tr><td>🔴</td><td><code>pluginData</code></td></tr><tr><td>🔴</td><td><code>pluginName</code></td></tr><tr><td>🔴</td><td><code>resolveDir</code></td></tr><tr><td>🔴</td><td><code>warnings</code></td></tr><tr><td>🔴</td><td><code>watchDirs</code></td></tr><tr><td>🔴</td><td><code>watchFiles</code></td></tr></tbody></table>`,35),l=[o];function r(p,c,i,u,y,E){return d(),n("div",null,l)}const g=s(e,[["render",r]]);export{m as __pageData,g as default};
