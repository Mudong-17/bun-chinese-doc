import{_ as s,o as a,c as n,Q as o}from"./chunks/framework.33544f09.js";const h=JSON.parse('{"title":"Hashing","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"api/hashing.md","filePath":"api/hashing.md"}'),p={name:"api/hashing.md"},l=o(`<h1 id="hashing" tabindex="-1">Hashing <a class="header-anchor" href="#hashing" aria-label="Permalink to &quot;Hashing&quot;">​</a></h1><p>Bun 实现了<a href="https://nodejs.org/api/crypto.html" target="_blank" rel="noreferrer"><code>node:crypto</code></a>中的<code>createHash</code>和<code>createHmac</code>函数，除此之外，还提供了下面文档中介绍的 Bun 本地 API。</p><h2 id="bun-password" tabindex="-1"><code>Bun.password</code> <a class="header-anchor" href="#bun-password" aria-label="Permalink to &quot;\`Bun.password\`&quot;">​</a></h2><p><code>Bun.password</code>是一组用于使用各种密码学安全算法对密码进行哈希和验证的实用函数。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">password</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;super-secure-pa$$word&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">hash</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> Bun.password.</span><span style="color:#B392F0;">hash</span><span style="color:#E1E4E8;">(password);</span></span>
<span class="line"><span style="color:#6A737D;">// =&gt; $argon2id$v=19$m=65536,t=2,p=1$tFq+9AVr1bfPxQdh6E8DQRhEXg/M/SqYCNu6gVdRRNs$GzJ8PuBi+K+BVojzPfS5mjnC8OpLGtv8KJqF99eP6a4</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">isMatch</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> Bun.password.</span><span style="color:#B392F0;">verify</span><span style="color:#E1E4E8;">(password, hash);</span></span>
<span class="line"><span style="color:#6A737D;">// =&gt; true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">password</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;super-secure-pa$$word&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">hash</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> Bun.password.</span><span style="color:#6F42C1;">hash</span><span style="color:#24292E;">(password);</span></span>
<span class="line"><span style="color:#6A737D;">// =&gt; $argon2id$v=19$m=65536,t=2,p=1$tFq+9AVr1bfPxQdh6E8DQRhEXg/M/SqYCNu6gVdRRNs$GzJ8PuBi+K+BVojzPfS5mjnC8OpLGtv8KJqF99eP6a4</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">isMatch</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> Bun.password.</span><span style="color:#6F42C1;">verify</span><span style="color:#24292E;">(password, hash);</span></span>
<span class="line"><span style="color:#6A737D;">// =&gt; true</span></span></code></pre></div><p><code>Bun.password.hash</code>的第二个参数接受一个参数对象，允许您选择和配置哈希算法。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">password</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;super-secure-pa$$word&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用argon2（默认）</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">argonHash</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> Bun.password.</span><span style="color:#B392F0;">hash</span><span style="color:#E1E4E8;">(password, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  algorithm: </span><span style="color:#9ECBFF;">&quot;argon2id&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// &quot;argon2id&quot; | &quot;argon2i&quot; | &quot;argon2d&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  memoryCost: </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 使用的内存量（以kibibytes为单位）</span></span>
<span class="line"><span style="color:#E1E4E8;">  timeCost: </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 迭代次数</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用bcrypt</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">bcryptHash</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> Bun.password.</span><span style="color:#B392F0;">hash</span><span style="color:#E1E4E8;">(password, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  algorithm: </span><span style="color:#9ECBFF;">&quot;bcrypt&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  cost: </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 介于4和31之间的数字</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">password</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;super-secure-pa$$word&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用argon2（默认）</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">argonHash</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> Bun.password.</span><span style="color:#6F42C1;">hash</span><span style="color:#24292E;">(password, {</span></span>
<span class="line"><span style="color:#24292E;">  algorithm: </span><span style="color:#032F62;">&quot;argon2id&quot;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// &quot;argon2id&quot; | &quot;argon2i&quot; | &quot;argon2d&quot;</span></span>
<span class="line"><span style="color:#24292E;">  memoryCost: </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 使用的内存量（以kibibytes为单位）</span></span>
<span class="line"><span style="color:#24292E;">  timeCost: </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 迭代次数</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用bcrypt</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">bcryptHash</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> Bun.password.</span><span style="color:#6F42C1;">hash</span><span style="color:#24292E;">(password, {</span></span>
<span class="line"><span style="color:#24292E;">  algorithm: </span><span style="color:#032F62;">&quot;bcrypt&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  cost: </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 介于4和31之间的数字</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>生成的哈希中包含用于创建哈希的算法。使用<code>bcrypt</code>时，返回的哈希以<a href="https://passlib.readthedocs.io/en/stable/modular_crypt_format.html" target="_blank" rel="noreferrer">Modular Crypt Format</a>编码，以兼容大多数现有的<code>bcrypt</code>实现；使用<code>argon2</code>时，结果以较新的<a href="https://github.com/P-H-C/phc-string-format/blob/master/phc-sf-spec.md" target="_blank" rel="noreferrer">PHC 格式</a>编码。</p><p><code>verify</code>函数会根据输入哈希自动检测算法，并使用正确的验证方法。它可以正确地从 PHC 或 MCF 编码的哈希中推断算法。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">password</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;super-secure-pa$$word&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">hash</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> Bun.password.</span><span style="color:#B392F0;">hash</span><span style="color:#E1E4E8;">(password, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/* 配置 */</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">isMatch</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> Bun.password.</span><span style="color:#B392F0;">verify</span><span style="color:#E1E4E8;">(password, hash);</span></span>
<span class="line"><span style="color:#6A737D;">// =&gt; true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">password</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;super-secure-pa$$word&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">hash</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> Bun.password.</span><span style="color:#6F42C1;">hash</span><span style="color:#24292E;">(password, {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/* 配置 */</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">isMatch</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> Bun.password.</span><span style="color:#6F42C1;">verify</span><span style="color:#24292E;">(password, hash);</span></span>
<span class="line"><span style="color:#6A737D;">// =&gt; true</span></span></code></pre></div><p>所有函数还提供了同步版本。请记住，这些函数在计算上是昂贵的，因此使用阻塞 API 可能会降低应用程序性能。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">password</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;super-secure-pa$$word&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">hash</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Bun.password.</span><span style="color:#B392F0;">hashSync</span><span style="color:#E1E4E8;">(password, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/* 配置 */</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">isMatch</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Bun.password.</span><span style="color:#B392F0;">verifySync</span><span style="color:#E1E4E8;">(password, hash);</span></span>
<span class="line"><span style="color:#6A737D;">// =&gt; true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">password</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;super-secure-pa$$word&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">hash</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Bun.password.</span><span style="color:#6F42C1;">hashSync</span><span style="color:#24292E;">(password, {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/* 配置 */</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">isMatch</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Bun.password.</span><span style="color:#6F42C1;">verifySync</span><span style="color:#24292E;">(password, hash);</span></span>
<span class="line"><span style="color:#6A737D;">// =&gt; true</span></span></code></pre></div><h2 id="bun-hash" tabindex="-1"><code>Bun.hash</code> <a class="header-anchor" href="#bun-hash" aria-label="Permalink to &quot;\`Bun.hash\`&quot;">​</a></h2><p><code>Bun.hash</code>是用于非密码学哈希的实用程序集。非密码学哈希算法被优化以计算速度为主，而不是冲突抵抗或安全性。</p><p>标准的<code>Bun.hash</code>函数使用<a href="https://github.com/wangyi-fudan/wyhash" target="_blank" rel="noreferrer">Wyhash</a>从任意大小的输入生成 64 位哈希。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Bun.</span><span style="color:#B392F0;">hash</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;some data here&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 11562320457524636935n</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Bun.</span><span style="color:#6F42C1;">hash</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;some data here&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 11562320457524636935n</span></span></code></pre></div><p>输入可以是字符串、<code>TypedArray</code>、<code>DataView</code>、<code>ArrayBuffer</code>或<code>SharedArrayBuffer</code>。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">arr</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Uint8Array</span><span style="color:#E1E4E8;">([</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">Bun.</span><span style="color:#B392F0;">hash</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;some data here&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">Bun.</span><span style="color:#B392F0;">hash</span><span style="color:#E1E4E8;">(arr);</span></span>
<span class="line"><span style="color:#E1E4E8;">Bun.</span><span style="color:#B392F0;">hash</span><span style="color:#E1E4E8;">(arr.buffer);</span></span>
<span class="line"><span style="color:#E1E4E8;">Bun.</span><span style="color:#B392F0;">hash</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DataView</span><span style="color:#E1E4E8;">(arr.buffer));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">arr</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Uint8Array</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Bun.</span><span style="color:#6F42C1;">hash</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;some data here&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">Bun.</span><span style="color:#6F42C1;">hash</span><span style="color:#24292E;">(arr);</span></span>
<span class="line"><span style="color:#24292E;">Bun.</span><span style="color:#6F42C1;">hash</span><span style="color:#24292E;">(arr.buffer);</span></span>
<span class="line"><span style="color:#24292E;">Bun.</span><span style="color:#6F42C1;">hash</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DataView</span><span style="color:#24292E;">(arr.buffer));</span></span></code></pre></div><p>可选地，可以指定整数种子作为第二个参数。对于 64 位哈希，应该将种子指定为 BigInt，以避免精度损失。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Bun.</span><span style="color:#B392F0;">hash</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;some data here&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1234</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 15724820720172937558n</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Bun.</span><span style="color:#6F42C1;">hash</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;some data here&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1234</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 15724820720172937558n</span></span></code></pre></div><p><code>Bun.hash</code>属性提供了其他哈希算法，其 API 对每种算法都相同，只是返回类型从 32 位哈希的数字更改为 64 位哈希的 bigint。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Bun.hash.</span><span style="color:#B392F0;">wyhash</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;data&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1234</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 相当于Bun.hash()</span></span>
<span class="line"><span style="color:#E1E4E8;">Bun.hash.</span><span style="color:#B392F0;">crc32</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;data&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1234</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">Bun.hash.</span><span style="color:#B392F0;">adler32</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;data&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1234</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">Bun.hash.</span><span style="color:#B392F0;">cityHash32</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;data&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1234</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">Bun.hash.</span><span style="color:#B392F0;">cityHash64</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;data&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1234</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">Bun.hash.</span><span style="color:#B392F0;">murmur32v3</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;data&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1234</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">Bun.hash.</span><span style="color:#B392F0;">murmur32v2</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;data&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1234</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">Bun.hash.</span><span style="color:#B392F0;">murmur64v2</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;data&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1234</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Bun.hash.</span><span style="color:#6F42C1;">wyhash</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;data&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1234</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 相当于Bun.hash()</span></span>
<span class="line"><span style="color:#24292E;">Bun.hash.</span><span style="color:#6F42C1;">crc32</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;data&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1234</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">Bun.hash.</span><span style="color:#6F42C1;">adler32</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;data&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1234</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">Bun.hash.</span><span style="color:#6F42C1;">cityHash32</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;data&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1234</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">Bun.hash.</span><span style="color:#6F42C1;">cityHash64</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;data&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1234</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">Bun.hash.</span><span style="color:#6F42C1;">murmur32v3</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;data&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1234</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">Bun.hash.</span><span style="color:#6F42C1;">murmur32v2</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;data&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1234</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">Bun.hash.</span><span style="color:#6F42C1;">murmur64v2</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;data&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1234</span><span style="color:#24292E;">);</span></span></code></pre></div><h2 id="bun-cryptohasher" tabindex="-1"><code>Bun.CryptoHasher</code> <a class="header-anchor" href="#bun-cryptohasher" aria-label="Permalink to &quot;\`Bun.CryptoHasher\`&quot;">​</a></h2><p><code>Bun.CryptoHasher</code>是一个通用的实用程序类，允许您逐步计算字符串或二进制数据的哈希，使用一系列密码哈希算法。支持以下算法：</p><ul><li><code>&quot;blake2b256&quot;</code></li><li><code>&quot;md4&quot;</code></li><li><code>&quot;md5&quot;</code></li><li><code>&quot;ripemd160&quot;</code></li><li><code>&quot;sha1&quot;</code></li><li><code>&quot;sha224&quot;</code></li><li><code>&quot;sha256&quot;</code></li><li><code>&quot;sha384&quot;</code></li><li><code>&quot;sha512&quot;</code></li><li><code>&quot;sha512-256&quot;</code></li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">hasher</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Bun.</span><span style="color:#B392F0;">CryptoHasher</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;sha256&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">hasher.</span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello world&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">hasher.</span><span style="color:#B392F0;">digest</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// Uint8Array(32) [ &lt;byte&gt;, &lt;byte&gt;, ... ]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">hasher</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Bun.</span><span style="color:#6F42C1;">CryptoHasher</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;sha256&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">hasher.</span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello world&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">hasher.</span><span style="color:#6F42C1;">digest</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// Uint8Array(32) [ &lt;byte&gt;, &lt;byte&gt;, ... ]</span></span></code></pre></div><p>初始化后，可以使用<code>.update()</code>逐步将数据提供给哈希器。此方法接受<code>string</code>、<code>TypedArray</code>和<code>ArrayBuffer</code>。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">hasher</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Bun.</span><span style="color:#B392F0;">CryptoHasher</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;sha256&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">hasher.</span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello world&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">hasher.</span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Uint8Array</span><span style="color:#E1E4E8;">([</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">]));</span></span>
<span class="line"><span style="color:#E1E4E8;">hasher.</span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ArrayBuffer</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">hasher</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Bun.</span><span style="color:#6F42C1;">CryptoHasher</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;sha256&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">hasher.</span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello world&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">hasher.</span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Uint8Array</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]));</span></span>
<span class="line"><span style="color:#24292E;">hasher.</span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ArrayBuffer</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">));</span></span></code></pre></div><p>如果传递了一个<code>string</code>，则可以使用可选的第二个参数来指定编码（默认为&#39;utf-8&#39;）。支持以下编码：</p><table><thead><tr><th>类型</th><th>值</th></tr></thead><tbody><tr><td>二进制编码</td><td><code>&quot;base64&quot;</code> <code>&quot;base64url&quot;</code> <code>&quot;hex&quot;</code> <code>&quot;binary&quot;</code></td></tr><tr><td>字符编码</td><td><code>&quot;utf8&quot;</code> <code>&quot;utf-8&quot;</code> <code>&quot;utf16le&quot;</code> <code>&quot;latin1&quot;</code></td></tr><tr><td>旧版字符编码</td><td><code>&quot;ascii&quot;</code> <code>&quot;binary&quot;</code> <code>&quot;ucs2&quot;</code> <code>&quot;ucs-2&quot;</code></td></tr></tbody></table><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">hasher.</span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello world&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 默认为utf8</span></span>
<span class="line"><span style="color:#E1E4E8;">hasher.</span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello world&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;hex&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">hasher.</span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello world&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;base64&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">hasher.</span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello world&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;latin1&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">hasher.</span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello world&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 默认为utf8</span></span>
<span class="line"><span style="color:#24292E;">hasher.</span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello world&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;hex&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">hasher.</span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello world&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;base64&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">hasher.</span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello world&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;latin1&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>在数据提供给哈希器之后，可以使用<code>.digest()</code>方法计算最终哈希值。默认情况下，此方法返回包含哈希值的<code>Uint8Array</code>。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">hasher</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Bun.</span><span style="color:#B392F0;">CryptoHasher</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;sha256&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">hasher.</span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello world&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">hasher.</span><span style="color:#B392F0;">digest</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// =&gt; Uint8Array(32) [ 185, 77, 39, 185, 147, ... ]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">hasher</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Bun.</span><span style="color:#6F42C1;">CryptoHasher</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;sha256&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">hasher.</span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello world&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">hasher.</span><span style="color:#6F42C1;">digest</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// =&gt; Uint8Array(32) [ 185, 77, 39, 185, 147, ... ]</span></span></code></pre></div><p><code>.digest()</code>方法还可以选择将哈希值作为字符串返回。为此，请指定编码：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">hasher.</span><span style="color:#B392F0;">digest</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;base64&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// =&gt; &quot;uU0nuZNNPgilLlLX2n2r+sSE7+N6U4DukIj3rOLvzek=&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">hasher.</span><span style="color:#B392F0;">digest</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hex&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// =&gt; &quot;b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">hasher.</span><span style="color:#6F42C1;">digest</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;base64&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// =&gt; &quot;uU0nuZNNPgilLlLX2n2r+sSE7+N6U4DukIj3rOLvzek=&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">hasher.</span><span style="color:#6F42C1;">digest</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hex&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// =&gt; &quot;b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9&quot;</span></span></code></pre></div><p>另外，该方法还可以将哈希值写入现有的<code>TypedArray</code>实例中。在某些性能敏感的应用程序中，这可能是有用的。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">arr</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Uint8Array</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">32</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">hasher.</span><span style="color:#B392F0;">digest</span><span style="color:#E1E4E8;">(arr);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(arr);</span></span>
<span class="line"><span style="color:#6A737D;">// =&gt; Uint8Array(32) [ 185, 77, 39, 185, 147, ... ]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">arr</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Uint8Array</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">32</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">hasher.</span><span style="color:#6F42C1;">digest</span><span style="color:#24292E;">(arr);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(arr);</span></span>
<span class="line"><span style="color:#6A737D;">// =&gt; Uint8Array(32) [ 185, 77, 39, 185, 147, ... ]</span></span></code></pre></div>`,37),e=[l];function t(c,r,y,E,i,d){return a(),n("div",null,e)}const F=s(p,[["render",t]]);export{h as __pageData,F as default};
