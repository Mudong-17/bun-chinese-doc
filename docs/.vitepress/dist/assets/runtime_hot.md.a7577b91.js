import{_ as o,C as p,o as e,c as t,H as c,w as r,Q as n,k as s,a}from"./chunks/framework.33544f09.js";const T=JSON.parse('{"title":"Watch mode","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"runtime/hot.md","filePath":"runtime/hot.md"}'),E={name:"runtime/hot.md"},y=n('<h1 id="watch-mode" tabindex="-1">Watch mode <a class="header-anchor" href="#watch-mode" aria-label="Permalink to &quot;Watch mode&quot;">​</a></h1><p>Bun 支持两种通过 CLI 标志自动重新加载的方式：</p><ul><li><code>--watch</code> 模式，当导入的文件更改时，硬重启 Bun 的进程。</li><li><code>--hot</code> 模式，当导入的文件更改时，对代码进行软重载（不重新启动进程）。</li></ul><h2 id="watch-模式" tabindex="-1"><code>--watch</code> 模式 <a class="header-anchor" href="#watch-模式" aria-label="Permalink to &quot;`--watch` 模式&quot;">​</a></h2><p>可以在<code>bun test</code>或运行 TypeScript、JSX 和 JavaScript 文件时使用监视模式。</p><p>要在<code>--watch</code>模式下运行文件：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bun</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--watch</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">index.tsx</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bun</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--watch</span><span style="color:#24292E;"> </span><span style="color:#032F62;">index.tsx</span></span></code></pre></div><p>要在<code>--watch</code>模式下运行测试：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bun</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--watch</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bun</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--watch</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span></span></code></pre></div><p>在<code>--watch</code>模式下，Bun 会跟踪所有导入的文件并监视它们的更改。当检测到更改时，Bun 会重新启动进程，保留了初始运行中使用的相同一组 CLI 参数和环境变量。如果 Bun 崩溃，<code>--watch</code>将尝试自动重新启动进程。</p><blockquote><p><strong>⚡️ 重新加载很快。</strong> 您可能已经习惯了文件系统监视器，它们有几层库包装了本机 API，或者更糟糕的是依赖于轮询。</p><p>相比之下，Bun 使用操作系统本机文件系统监视器 API，如 kqueue 或 inotify 来检测文件的更改。Bun 还进行了一些优化，以使其适用于更大的项目（例如设置高文件描述符的 rlimit，静态分配文件路径缓冲区，尽可能复用文件描述符等）。</p></blockquote><p>以下示例显示了 Bun 在编辑文件时实时重新加载文件，VSCode 配置为在<a href="https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save" target="_blank" rel="noreferrer">每次按键</a>时保存文件。</p>',12),i=s("div",{class:"language-bash vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"bash"),s("pre",{class:"shiki github-dark vp-code-dark"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#B392F0"}},"$"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"bun"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"run"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#79B8FF"}},"--watch"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},"watchy.tsx")])])]),s("pre",{class:"shiki github-light vp-code-light"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#6F42C1"}},"$"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"bun"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"run"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#005CC5"}},"--watch"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},"watchy.tsx")])])])],-1),d=s("div",{class:"language-tsx vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"tsx"),s("pre",{class:"shiki github-dark vp-code-dark"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"#watchy.tsx")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F97583"}},"import"),s("span",{style:{color:"#E1E4E8"}}," { serve } "),s("span",{style:{color:"#F97583"}},"from"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#9ECBFF"}},'"bun"'),s("span",{style:{color:"#E1E4E8"}},";")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"console."),s("span",{style:{color:"#B392F0"}},"log"),s("span",{style:{color:"#E1E4E8"}},"("),s("span",{style:{color:"#9ECBFF"}},'"I restarted at:"'),s("span",{style:{color:"#E1E4E8"}},", Date."),s("span",{style:{color:"#B392F0"}},"now"),s("span",{style:{color:"#E1E4E8"}},"());")]),a(`
`),s("span",{class:"line"}),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#B392F0"}},"serve"),s("span",{style:{color:"#E1E4E8"}},"({")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  port: "),s("span",{style:{color:"#79B8FF"}},"4003"),s("span",{style:{color:"#E1E4E8"}},",")]),a(`
`),s("span",{class:"line"}),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  "),s("span",{style:{color:"#B392F0"}},"fetch"),s("span",{style:{color:"#E1E4E8"}},"("),s("span",{style:{color:"#FFAB70"}},"request"),s("span",{style:{color:"#E1E4E8"}},") {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"    "),s("span",{style:{color:"#F97583"}},"return"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#F97583"}},"new"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#B392F0"}},"Response"),s("span",{style:{color:"#E1E4E8"}},"("),s("span",{style:{color:"#9ECBFF"}},'"Sup"'),s("span",{style:{color:"#E1E4E8"}},");")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  },")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"});")])])]),s("pre",{class:"shiki github-light vp-code-light"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"#watchy.tsx")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D73A49"}},"import"),s("span",{style:{color:"#24292E"}}," { serve } "),s("span",{style:{color:"#D73A49"}},"from"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#032F62"}},'"bun"'),s("span",{style:{color:"#24292E"}},";")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"console."),s("span",{style:{color:"#6F42C1"}},"log"),s("span",{style:{color:"#24292E"}},"("),s("span",{style:{color:"#032F62"}},'"I restarted at:"'),s("span",{style:{color:"#24292E"}},", Date."),s("span",{style:{color:"#6F42C1"}},"now"),s("span",{style:{color:"#24292E"}},"());")]),a(`
`),s("span",{class:"line"}),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6F42C1"}},"serve"),s("span",{style:{color:"#24292E"}},"({")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  port: "),s("span",{style:{color:"#005CC5"}},"4003"),s("span",{style:{color:"#24292E"}},",")]),a(`
`),s("span",{class:"line"}),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  "),s("span",{style:{color:"#6F42C1"}},"fetch"),s("span",{style:{color:"#24292E"}},"("),s("span",{style:{color:"#E36209"}},"request"),s("span",{style:{color:"#24292E"}},") {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"    "),s("span",{style:{color:"#D73A49"}},"return"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#D73A49"}},"new"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#6F42C1"}},"Response"),s("span",{style:{color:"#24292E"}},"("),s("span",{style:{color:"#032F62"}},'"Sup"'),s("span",{style:{color:"#24292E"}},");")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  },")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"});")])])])],-1),h=n(`<p><img src="https://user-images.githubusercontent.com/709451/228439002-7b9fad11-0db2-4e48-b82d-2b88c8625625.gif" alt="bun watch gif"></p><p>在监视模式下运行<code>bun test</code>和启用<code>save-on-keypress</code>：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bun</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--watch</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bun</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--watch</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span></span></code></pre></div><p><img src="https://user-images.githubusercontent.com/709451/228396976-38a23864-4a1d-4c96-87cc-04e5181bf459.gif" alt="bun test gif"></p><h2 id="hot-模式" tabindex="-1"><code>--hot</code> 模式 <a class="header-anchor" href="#hot-模式" aria-label="Permalink to &quot;\`--hot\` 模式&quot;">​</a></h2><p>使用<code>bun --hot</code>来在 Bun 中执行代码时启用热重载。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bun</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--hot</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">server.ts</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bun</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--hot</span><span style="color:#24292E;"> </span><span style="color:#032F62;">server.ts</span></span></code></pre></div><p>从入口点开始（上面示例中的<code>server.ts</code>），Bun 构建了所有导入的源文件的注册表（不包括<code>node_modules</code>中的文件），并监视它们的更改。当检测到更改时，Bun 执行&quot;软重载&quot;。所有文件都会重新评估，但所有全局状态（特别是<code>globalThis</code>对象）都会保留。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">#server.ts</span></span>
<span class="line"><span style="color:#6A737D;">// 让TypeScript高兴</span></span>
<span class="line"><span style="color:#F97583;">declare</span><span style="color:#E1E4E8;"> global {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> count</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">globalThis.count </span><span style="color:#F97583;">??=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`Reloaded \${</span><span style="color:#E1E4E8;">globalThis</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">count</span><span style="color:#9ECBFF;">} times\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">globalThis.count</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 防止 \`bun run\` 退出</span></span>
<span class="line"><span style="color:#B392F0;">setInterval</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {}, </span><span style="color:#79B8FF;">1000000</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">#server.ts</span></span>
<span class="line"><span style="color:#6A737D;">// 让TypeScript高兴</span></span>
<span class="line"><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> global {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> count</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">globalThis.count </span><span style="color:#D73A49;">??=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`Reloaded \${</span><span style="color:#24292E;">globalThis</span><span style="color:#032F62;">.</span><span style="color:#24292E;">count</span><span style="color:#032F62;">} times\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">globalThis.count</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 防止 \`bun run\` 退出</span></span>
<span class="line"><span style="color:#6F42C1;">setInterval</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {}, </span><span style="color:#005CC5;">1000000</span><span style="color:#24292E;">);</span></span></code></pre></div><p>如果使用<code>bun --hot server.ts</code>运行此文件，您将看到每次保存文件时重新加载计数递增。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bun</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--hot</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">index.ts</span></span>
<span class="line"><span style="color:#B392F0;">Reloaded</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">times</span></span>
<span class="line"><span style="color:#B392F0;">Reloaded</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">times</span></span>
<span class="line"><span style="color:#B392F0;">Reloaded</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">times</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bun</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--hot</span><span style="color:#24292E;"> </span><span style="color:#032F62;">index.ts</span></span>
<span class="line"><span style="color:#6F42C1;">Reloaded</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">times</span></span>
<span class="line"><span style="color:#6F42C1;">Reloaded</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">times</span></span>
<span class="line"><span style="color:#6F42C1;">Reloaded</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#032F62;">times</span></span></code></pre></div><p>传统的文件监视器（如<code>nodemon</code>）会重新启动整个进程，因此 HTTP 服务器和其他有状态的对象会丢失。相比之下，<code>bun --hot</code>能够在不重新启动进程的情况下反映更新的代码。</p><h3 id="http-服务器" tabindex="-1">HTTP 服务器 <a class="header-anchor" href="#http-服务器" aria-label="Permalink to &quot;HTTP 服务器&quot;">​</a></h3><p>Bun 提供了以下简化的 API 来实现 HTTP 服务器。有关详细信息，请参阅<a href="/api/http.html">API &gt; HTTP</a>。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">#server.ts</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> {serve} </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;bun&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">globalThis.count </span><span style="color:#F97583;">??=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">globalThis.count</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">serve</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">fetch</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">req</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Request</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Response</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`Reloaded \${</span><span style="color:#E1E4E8;">globalThis</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">count</span><span style="color:#9ECBFF;">} times\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  port: </span><span style="color:#79B8FF;">3000</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">#server.ts</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> {serve} </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;bun&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">globalThis.count </span><span style="color:#D73A49;">??=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">globalThis.count</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">serve</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">fetch</span><span style="color:#24292E;">(</span><span style="color:#E36209;">req</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Request</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Response</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`Reloaded \${</span><span style="color:#24292E;">globalThis</span><span style="color:#032F62;">.</span><span style="color:#24292E;">count</span><span style="color:#032F62;">} times\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  port: </span><span style="color:#005CC5;">3000</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>上面的文件只是导出了一个带有定义的<code>fetch</code>处理程序的对象。当执行此文件时，Bun 将其解释为 HTTP 服务器，并将导出的对象传递给<code>Bun.serve</code>。</p><p>当您保存文件时，HTTP 服务器将以更新的代码重新加载，而不重新启动进程。这导致刷新速度非常快。</p>`,17),u=s("image",{src:"https://user-images.githubusercontent.com/709451/195477632-5fd8a73e-014d-4589-9ba2-e075ad9eb040.gif",alt:"Bun与Nodemon刷新速度比较",caption:"Bun在左边，Nodemon在右边。"},null,-1),F=n("<blockquote><p><strong>注意</strong> — 在 Bun 的未来版本中，计划支持 Vite 的<code>i<wbr>mport.meta.hot</code>，以实现更好的热重载的生命周期管理，并与生态系统对齐。</p></blockquote><details><summary>实现细节</summary><p>在热重载时，Bun：</p><ul><li>重置内部的<code>require</code>缓存和 ES 模块注册表（<code>Loader.registry</code>）</li><li>同步运行垃圾收集器（以最小化内存泄漏，以牺牲运行时性能为代价）</li><li>从头重新编译所有代码（包括 sourcemap）</li><li>使用 JavaScriptCore 重新评估代码</li></ul><p>这个实现并不特别优化。它会重新编译没有更改的文件。它不尝试增量编译。这只是一个起点。</p></details>",2);function b(C,g,B,v,m,_){const l=p("codetabs");return e(),t("div",null,[y,c(l,null,{default:r(()=>[i,d]),_:1}),h,u,F])}const f=o(E,[["render",b]]);export{T as __pageData,f as default};
