import{_ as p,C as o,o as e,c,H as t,w as r,Q as a,k as s,a as n}from"./chunks/framework.33544f09.js";const v=JSON.parse('{"title":"TCP sockets","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"api/tcp.md","filePath":"api/tcp.md"}'),E={name:"api/tcp.md"},y=a(`<h1 id="tcp-sockets" tabindex="-1">TCP sockets <a class="header-anchor" href="#tcp-sockets" aria-label="Permalink to &quot;TCP sockets&quot;">​</a></h1><p>Bun 提供了一种用于实现性能敏感系统的本机 TCP API，例如数据库客户端、游戏服务器或任何需要通过 TCP 进行通信而不是 HTTP 的应用。这是一个面向库作者和高级用例的低级 API。</p><h2 id="启动服务器-bun-listen" tabindex="-1">启动服务器 (<code>Bun.listen()</code>) <a class="header-anchor" href="#启动服务器-bun-listen" aria-label="Permalink to &quot;启动服务器 (\`Bun.listen()\`)&quot;">​</a></h2><p>要使用<code>Bun.listen</code>启动 TCP 服务器：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Bun.</span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  hostname: </span><span style="color:#9ECBFF;">&quot;localhost&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  port: </span><span style="color:#79B8FF;">8080</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  socket: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">data</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">socket</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) {}, </span><span style="color:#6A737D;">// 从客户端接收的消息</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">open</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">socket</span><span style="color:#E1E4E8;">) {}, </span><span style="color:#6A737D;">// 打开的套接字</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">socket</span><span style="color:#E1E4E8;">) {}, </span><span style="color:#6A737D;">// 关闭的套接字</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">drain</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">socket</span><span style="color:#E1E4E8;">) {}, </span><span style="color:#6A737D;">// 套接字已准备好接收更多数据</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">socket</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">error</span><span style="color:#E1E4E8;">) {}, </span><span style="color:#6A737D;">// 错误处理程序</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Bun.</span><span style="color:#6F42C1;">listen</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  hostname: </span><span style="color:#032F62;">&quot;localhost&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  port: </span><span style="color:#005CC5;">8080</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  socket: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">data</span><span style="color:#24292E;">(</span><span style="color:#E36209;">socket</span><span style="color:#24292E;">, </span><span style="color:#E36209;">data</span><span style="color:#24292E;">) {}, </span><span style="color:#6A737D;">// 从客户端接收的消息</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(</span><span style="color:#E36209;">socket</span><span style="color:#24292E;">) {}, </span><span style="color:#6A737D;">// 打开的套接字</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">(</span><span style="color:#E36209;">socket</span><span style="color:#24292E;">) {}, </span><span style="color:#6A737D;">// 关闭的套接字</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">drain</span><span style="color:#24292E;">(</span><span style="color:#E36209;">socket</span><span style="color:#24292E;">) {}, </span><span style="color:#6A737D;">// 套接字已准备好接收更多数据</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(</span><span style="color:#E36209;">socket</span><span style="color:#24292E;">, </span><span style="color:#E36209;">error</span><span style="color:#24292E;">) {}, </span><span style="color:#6A737D;">// 错误处理程序</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><details><summary>为速度而设计的API</summary><p>在 Bun 中，一组处理程序只需在每个服务器上声明一次，而不是像 Node.js 的<code>EventEmitters</code>或 Web 标准的<code>WebSocket</code> API 那样为每个套接字分配回调函数。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Bun.</span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  hostname: </span><span style="color:#9ECBFF;">&quot;localhost&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  port: </span><span style="color:#79B8FF;">8080</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  socket: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">open</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">socket</span><span style="color:#E1E4E8;">) {},</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">data</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">socket</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) {},</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">drain</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">socket</span><span style="color:#E1E4E8;">) {},</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">socket</span><span style="color:#E1E4E8;">) {},</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">socket</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">error</span><span style="color:#E1E4E8;">) {},</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Bun.</span><span style="color:#6F42C1;">listen</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  hostname: </span><span style="color:#032F62;">&quot;localhost&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  port: </span><span style="color:#005CC5;">8080</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  socket: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(</span><span style="color:#E36209;">socket</span><span style="color:#24292E;">) {},</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">data</span><span style="color:#24292E;">(</span><span style="color:#E36209;">socket</span><span style="color:#24292E;">, </span><span style="color:#E36209;">data</span><span style="color:#24292E;">) {},</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">drain</span><span style="color:#24292E;">(</span><span style="color:#E36209;">socket</span><span style="color:#24292E;">) {},</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">(</span><span style="color:#E36209;">socket</span><span style="color:#24292E;">) {},</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(</span><span style="color:#E36209;">socket</span><span style="color:#24292E;">, </span><span style="color:#E36209;">error</span><span style="color:#24292E;">) {},</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>对于性能敏感的服务器，为每个套接字分配监听器可能会导致显着的垃圾回收压力并增加内存使用量。相比之下，Bun 仅为每个事件分配一个处理函数，并在所有套接字之间共享它。这是一个小优化，但它会累积起来。</p></details><p>可以在<code>open</code>处理程序中附加套接字的上下文数据。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SocketData</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { </span><span style="color:#FFAB70;">sessionId</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">Bun.</span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">SocketData</span><span style="color:#E1E4E8;">&gt;({</span></span>
<span class="line"><span style="color:#E1E4E8;">  hostname: </span><span style="color:#9ECBFF;">&quot;localhost&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  port: </span><span style="color:#79B8FF;">8080</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  socket: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">data</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">socket</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      socket.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`\${</span><span style="color:#E1E4E8;">socket</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">data</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">sessionId</span><span style="color:#9ECBFF;">}: ack\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">open</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">socket</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      socket.data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { sessionId: </span><span style="color:#9ECBFF;">&quot;abcd&quot;</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SocketData</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { </span><span style="color:#E36209;">sessionId</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Bun.</span><span style="color:#6F42C1;">listen</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">SocketData</span><span style="color:#24292E;">&gt;({</span></span>
<span class="line"><span style="color:#24292E;">  hostname: </span><span style="color:#032F62;">&quot;localhost&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  port: </span><span style="color:#005CC5;">8080</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  socket: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">data</span><span style="color:#24292E;">(</span><span style="color:#E36209;">socket</span><span style="color:#24292E;">, </span><span style="color:#E36209;">data</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      socket.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`\${</span><span style="color:#24292E;">socket</span><span style="color:#032F62;">.</span><span style="color:#24292E;">data</span><span style="color:#032F62;">.</span><span style="color:#24292E;">sessionId</span><span style="color:#032F62;">}: ack\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(</span><span style="color:#E36209;">socket</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      socket.data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { sessionId: </span><span style="color:#032F62;">&quot;abcd&quot;</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>要启用 TLS，请传递包含<code>key</code>和<code>cert</code>字段的<code>tls</code>对象。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Bun.</span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  hostname: </span><span style="color:#9ECBFF;">&quot;localhost&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  port: </span><span style="color:#79B8FF;">8080</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  socket: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">data</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">socket</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) {},</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  tls: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 可以是字符串、BunFile、TypedArray、Buffer或其数组</span></span>
<span class="line"><span style="color:#E1E4E8;">    key: Bun.</span><span style="color:#B392F0;">file</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./key.pem&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    cert: Bun.</span><span style="color:#B392F0;">file</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./cert.pem&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Bun.</span><span style="color:#6F42C1;">listen</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  hostname: </span><span style="color:#032F62;">&quot;localhost&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  port: </span><span style="color:#005CC5;">8080</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  socket: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">data</span><span style="color:#24292E;">(</span><span style="color:#E36209;">socket</span><span style="color:#24292E;">, </span><span style="color:#E36209;">data</span><span style="color:#24292E;">) {},</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  tls: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 可以是字符串、BunFile、TypedArray、Buffer或其数组</span></span>
<span class="line"><span style="color:#24292E;">    key: Bun.</span><span style="color:#6F42C1;">file</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./key.pem&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    cert: Bun.</span><span style="color:#6F42C1;">file</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./cert.pem&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p><code>key</code>和<code>cert</code>字段期望是您 TLS 密钥和证书的内容。这可以是字符串、<code>BunFile</code>、<code>TypedArray</code>或<code>Buffer</code>。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Bun.</span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  tls: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// BunFile</span></span>
<span class="line"><span style="color:#E1E4E8;">    key: Bun.</span><span style="color:#B392F0;">file</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./key.pem&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Buffer</span></span>
<span class="line"><span style="color:#E1E4E8;">    key: fs.</span><span style="color:#B392F0;">readFileSync</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./key.pem&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 字符串</span></span>
<span class="line"><span style="color:#E1E4E8;">    key: fs.</span><span style="color:#B392F0;">readFileSync</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./key.pem&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;utf8&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 上述的数组</span></span>
<span class="line"><span style="color:#E1E4E8;">    key: [Bun.</span><span style="color:#B392F0;">file</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./key1.pem&quot;</span><span style="color:#E1E4E8;">), Bun.</span><span style="color:#B392F0;">file</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./key2.pem&quot;</span><span style="color:#E1E4E8;">)],</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Bun.</span><span style="color:#6F42C1;">listen</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  tls: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// BunFile</span></span>
<span class="line"><span style="color:#24292E;">    key: Bun.</span><span style="color:#6F42C1;">file</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./key.pem&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Buffer</span></span>
<span class="line"><span style="color:#24292E;">    key: fs.</span><span style="color:#6F42C1;">readFileSync</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./key.pem&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 字符串</span></span>
<span class="line"><span style="color:#24292E;">    key: fs.</span><span style="color:#6F42C1;">readFileSync</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./key.pem&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;utf8&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 上述的数组</span></span>
<span class="line"><span style="color:#24292E;">    key: [Bun.</span><span style="color:#6F42C1;">file</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./key1.pem&quot;</span><span style="color:#24292E;">), Bun.</span><span style="color:#6F42C1;">file</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./key2.pem&quot;</span><span style="color:#24292E;">)],</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p><code>Bun.listen</code>的结果是符合<code>TCPSocket</code>接口的服务器。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">server</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Bun.</span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/* 配置 */</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 停止监听</span></span>
<span class="line"><span style="color:#6A737D;">// 参数确定是否关闭活动连接</span></span>
<span class="line"><span style="color:#E1E4E8;">server.</span><span style="color:#B392F0;">stop</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 即使服务器仍在监听，也要允许Bun进程退出</span></span>
<span class="line"><span style="color:#E1E4E8;">server.</span><span style="color:#B392F0;">unref</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">server</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Bun.</span><span style="color:#6F42C1;">listen</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/* 配置 */</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 停止监听</span></span>
<span class="line"><span style="color:#6A737D;">// 参数确定是否关闭活动连接</span></span>
<span class="line"><span style="color:#24292E;">server.</span><span style="color:#6F42C1;">stop</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 即使服务器仍在监听，也要允许Bun进程退出</span></span>
<span class="line"><span style="color:#24292E;">server.</span><span style="color:#6F42C1;">unref</span><span style="color:#24292E;">();</span></span></code></pre></div><h2 id="创建连接-bun-connect" tabindex="-1">创建连接 (<code>Bun.connect()</code>) <a class="header-anchor" href="#创建连接-bun-connect" aria-label="Permalink to &quot;创建连接 (\`Bun.connect()\`)&quot;">​</a></h2><p>使用<code>Bun.connect</code>连接到 TCP 服务器。使用<code>hostname</code>和<code>port</code>指定要连接的服务器。TCP 客户端可以定义与<code>Bun.listen</code>相同的一组处理程序，以及一些特定于客户端的处理程序。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 客户端</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">socket</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Bun.</span><span style="color:#B392F0;">connect</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  hostname: </span><span style="color:#9ECBFF;">&quot;localhost&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  port: </span><span style="color:#79B8FF;">8080</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  socket: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">data</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">socket</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) {},</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">open</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">socket</span><span style="color:#E1E4E8;">) {},</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">socket</span><span style="color:#E1E4E8;">) {},</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">drain</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">socket</span><span style="color:#E1E4E8;">) {},</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">socket</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">error</span><span style="color:#E1E4E8;">) {},</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 特定于客户端的处理程序</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">connectError</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">socket</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">error</span><span style="color:#E1E4E8;">) {}, </span><span style="color:#6A737D;">// 连接失败</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">end</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">socket</span><span style="color:#E1E4E8;">) {}, </span><span style="color:#6A737D;">// 由服务器关闭的连接</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">timeout</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">socket</span><span style="color:#E1E4E8;">) {}, </span><span style="color:#6A737D;">// 连接超时</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 客户端</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">socket</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Bun.</span><span style="color:#6F42C1;">connect</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  hostname: </span><span style="color:#032F62;">&quot;localhost&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  port: </span><span style="color:#005CC5;">8080</span><span style="color:#24292E;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  socket: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">data</span><span style="color:#24292E;">(</span><span style="color:#E36209;">socket</span><span style="color:#24292E;">, </span><span style="color:#E36209;">data</span><span style="color:#24292E;">) {},</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(</span><span style="color:#E36209;">socket</span><span style="color:#24292E;">) {},</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">(</span><span style="color:#E36209;">socket</span><span style="color:#24292E;">) {},</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">drain</span><span style="color:#24292E;">(</span><span style="color:#E36209;">socket</span><span style="color:#24292E;">) {},</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(</span><span style="color:#E36209;">socket</span><span style="color:#24292E;">, </span><span style="color:#E36209;">error</span><span style="color:#24292E;">) {},</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 特定于客户端的处理程序</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">connectError</span><span style="color:#24292E;">(</span><span style="color:#E36209;">socket</span><span style="color:#24292E;">, </span><span style="color:#E36209;">error</span><span style="color:#24292E;">) {}, </span><span style="color:#6A737D;">// 连接失败</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">(</span><span style="color:#E36209;">socket</span><span style="color:#24292E;">) {}, </span><span style="color:#6A737D;">// 由服务器关闭的连接</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">timeout</span><span style="color:#24292E;">(</span><span style="color:#E36209;">socket</span><span style="color:#24292E;">) {}, </span><span style="color:#6A737D;">// 连接超时</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>要求 TLS，请指定<code>tls: true</code>。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 客户端</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">socket</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Bun.</span><span style="color:#B392F0;">connect</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ... 配置</span></span>
<span class="line"><span style="color:#E1E4E8;">  tls: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 客户端</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">socket</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Bun.</span><span style="color:#6F42C1;">connect</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ... 配置</span></span>
<span class="line"><span style="color:#24292E;">  tls: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><h2 id="热重载" tabindex="-1">热重载 <a class="header-anchor" href="#热重载" aria-label="Permalink to &quot;热重载&quot;">​</a></h2><p>TCP 服务器和套接字都可以使用新处理程序进行热重载。</p>`,21),i=s("div",{class:"language-ts vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"ts"),s("pre",{class:"shiki github-dark vp-code-dark"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#F97583"}},"const"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#79B8FF"}},"server"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#F97583"}},"="),s("span",{style:{color:"#E1E4E8"}}," Bun."),s("span",{style:{color:"#B392F0"}},"listen"),s("span",{style:{color:"#E1E4E8"}},"({ "),s("span",{style:{color:"#6A737D"}},"/* 配置 */"),s("span",{style:{color:"#E1E4E8"}}," })")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6A737D"}},"// 重新加载所有活动服务器端套接字的处理程序")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"server."),s("span",{style:{color:"#B392F0"}},"reload"),s("span",{style:{color:"#E1E4E8"}},"({")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  socket: {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"    "),s("span",{style:{color:"#B392F0"}},"data"),s("span",{style:{color:"#E1E4E8"}},"(){")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"      "),s("span",{style:{color:"#6A737D"}},"// 新的'data'处理程序")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"    }")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  }")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"})")])])]),s("pre",{class:"shiki github-light vp-code-light"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#D73A49"}},"const"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#005CC5"}},"server"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#D73A49"}},"="),s("span",{style:{color:"#24292E"}}," Bun."),s("span",{style:{color:"#6F42C1"}},"listen"),s("span",{style:{color:"#24292E"}},"({ "),s("span",{style:{color:"#6A737D"}},"/* 配置 */"),s("span",{style:{color:"#24292E"}}," })")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6A737D"}},"// 重新加载所有活动服务器端套接字的处理程序")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"server."),s("span",{style:{color:"#6F42C1"}},"reload"),s("span",{style:{color:"#24292E"}},"({")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  socket: {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"    "),s("span",{style:{color:"#6F42C1"}},"data"),s("span",{style:{color:"#24292E"}},"(){")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"      "),s("span",{style:{color:"#6A737D"}},"// 新的'data'处理程序")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"    }")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  }")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"})")])])])],-1),F=s("div",{class:"language-ts vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"ts"),s("pre",{class:"shiki github-dark vp-code-dark"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#F97583"}},"const"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#79B8FF"}},"socket"),s("span",{style:{color:"#E1E4E8"}}," "),s("span",{style:{color:"#F97583"}},"="),s("span",{style:{color:"#E1E4E8"}}," Bun."),s("span",{style:{color:"#B392F0"}},"connect"),s("span",{style:{color:"#E1E4E8"}},"({ "),s("span",{style:{color:"#6A737D"}},"/* 配置 */"),s("span",{style:{color:"#E1E4E8"}}," })")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"socket."),s("span",{style:{color:"#B392F0"}},"reload"),s("span",{style:{color:"#E1E4E8"}},"({")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  "),s("span",{style:{color:"#B392F0"}},"data"),s("span",{style:{color:"#E1E4E8"}},"(){")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"    "),s("span",{style:{color:"#6A737D"}},"// 新的'data'处理程序")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  }")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"})")])])]),s("pre",{class:"shiki github-light vp-code-light"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#D73A49"}},"const"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#005CC5"}},"socket"),s("span",{style:{color:"#24292E"}}," "),s("span",{style:{color:"#D73A49"}},"="),s("span",{style:{color:"#24292E"}}," Bun."),s("span",{style:{color:"#6F42C1"}},"connect"),s("span",{style:{color:"#24292E"}},"({ "),s("span",{style:{color:"#6A737D"}},"/* 配置 */"),s("span",{style:{color:"#24292E"}}," })")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"socket."),s("span",{style:{color:"#6F42C1"}},"reload"),s("span",{style:{color:"#24292E"}},"({")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  "),s("span",{style:{color:"#6F42C1"}},"data"),s("span",{style:{color:"#24292E"}},"(){")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"    "),s("span",{style:{color:"#6A737D"}},"// 新的'data'处理程序")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"  }")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#24292E"}},"})")])])])],-1),d=a(`<h2 id="缓冲" tabindex="-1">缓冲 <a class="header-anchor" href="#缓冲" aria-label="Permalink to &quot;缓冲&quot;">​</a></h2><p>目前，Bun 中的 TCP 套接字不会缓冲数据。对于性能敏感的代码，需要仔细考虑缓冲。例如，这个：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">socket.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;h&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">socket.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;e&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">socket.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;l&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">socket.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;l&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">socket.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;o&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">socket.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;h&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">socket.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;e&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">socket.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;l&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">socket.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;l&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">socket.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;o&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>...性能明显不如这个：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">socket.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">socket.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>为了简化这个问题，暂时考虑使用 Bun 的<code>ArrayBufferSink</code>，并使用<code>{stream: true}</code>选项：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sink</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ArrayBufferSink</span><span style="color:#E1E4E8;">({ stream: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, highWaterMark: </span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">sink.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;h&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">sink.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;e&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">sink.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;l&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">sink.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;l&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">sink.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;o&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">queueMicrotask</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sink.</span><span style="color:#B392F0;">flush</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">socket.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(data)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果套接字已满，请将数据放回到sink中</span></span>
<span class="line"><span style="color:#E1E4E8;">    sink.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(data);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sink</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ArrayBufferSink</span><span style="color:#24292E;">({ stream: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, highWaterMark: </span><span style="color:#005CC5;">1024</span><span style="color:#24292E;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">sink.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;h&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">sink.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;e&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">sink.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;l&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">sink.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;l&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">sink.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;o&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">queueMicrotask</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sink.</span><span style="color:#6F42C1;">flush</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">socket.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(data)) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 如果套接字已满，请将数据放回到sink中</span></span>
<span class="line"><span style="color:#24292E;">    sink.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(data);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><blockquote><p><strong>Corking</strong> — 支持塞子（corking）是计划中的，但在此期间，必须使用<code>drain</code>处理程序手动管理背压。</p></blockquote>`,8);function u(k,B,C,h,A,q){const l=o("codetabs");return e(),c("div",null,[y,t(l,null,{default:r(()=>[i,F]),_:1}),d])}const D=p(E,[["render",u]]);export{v as __pageData,D as default};
