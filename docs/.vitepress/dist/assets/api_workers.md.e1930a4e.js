import{_ as s,o as a,c as n,Q as o}from"./chunks/framework.33544f09.js";const k=JSON.parse('{"title":"Workers","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"api/workers.md","filePath":"api/workers.md"}'),l={name:"api/workers.md"},e=o(`<h1 id="workers" tabindex="-1">Workers <a class="header-anchor" href="#workers" aria-label="Permalink to &quot;Workers&quot;">​</a></h1><blockquote><p><strong>🚧</strong> — <code>Worker</code> API 仍处于实验阶段，不应视为生产就绪。</p></blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Worker" target="_blank" rel="noreferrer"><code>Worker</code></a> 允许您在单独的线程上启动并与新的 JavaScript 实例进行通信，同时与主线程共享 I/O 资源。</p><p>Bun 实现了<a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API" target="_blank" rel="noreferrer">Web Workers API</a>的最小版本，并具有使其在服务器端用例中更好地工作的扩展功能。与 Bun 的其他部分一样，Bun 中的<code>Worker</code>支持 CommonJS、ES 模块、TypeScript、JSX、TSX 等，无需额外的构建步骤。</p><h2 id="创建一个worker" tabindex="-1">创建一个<code>Worker</code> <a class="header-anchor" href="#创建一个worker" aria-label="Permalink to &quot;创建一个\`Worker\`&quot;">​</a></h2><p>与浏览器中一样，<a href="https://developer.mozilla.org/en-US/docs/Web/API/Worker" target="_blank" rel="noreferrer"><code>Worker</code></a> 是全局的。可以使用它创建一个新的工作线程。</p><h3 id="从主线程" tabindex="-1">从主线程 <a class="header-anchor" href="#从主线程" aria-label="Permalink to &quot;从主线程&quot;">​</a></h3><div class="language-js#Main_thread vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js#Main_thread</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">const workerURL = new URL(&quot;worker.ts&quot;, i<wbr>mport.meta.url).href;</span></span>
<span class="line"><span style="color:#e1e4e8;">const worker = new Worker(workerURL);</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">worker.postMessage(&quot;hello&quot;);</span></span>
<span class="line"><span style="color:#e1e4e8;">worker.onmessage = event =&gt; {</span></span>
<span class="line"><span style="color:#e1e4e8;">  console.log(event.data);</span></span>
<span class="line"><span style="color:#e1e4e8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">const workerURL = new URL(&quot;worker.ts&quot;, i<wbr>mport.meta.url).href;</span></span>
<span class="line"><span style="color:#24292e;">const worker = new Worker(workerURL);</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">worker.postMessage(&quot;hello&quot;);</span></span>
<span class="line"><span style="color:#24292e;">worker.onmessage = event =&gt; {</span></span>
<span class="line"><span style="color:#24292e;">  console.log(event.data);</span></span>
<span class="line"><span style="color:#24292e;">};</span></span></code></pre></div><h3 id="工作线程" tabindex="-1">工作线程 <a class="header-anchor" href="#工作线程" aria-label="Permalink to &quot;工作线程&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 防止TS错误</span></span>
<span class="line"><span style="color:#F97583;">declare</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> self</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Worker</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">self.</span><span style="color:#B392F0;">onmessage</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">event</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MessageEvent</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(event.data);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">postMessage</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;world&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 防止TS错误</span></span>
<span class="line"><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> self</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Worker</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">self.</span><span style="color:#6F42C1;">onmessage</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">event</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MessageEvent</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(event.data);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">postMessage</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;world&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>为了在使用<code>self</code>时防止 TypeScript 错误，请在工作文件的顶部添加这一行。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">declare</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> self</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Worker</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> self</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Worker</span><span style="color:#24292E;">;</span></span></code></pre></div><p>您可以在工作代码中使用<code>import</code>和<code>export</code>语法。与浏览器不同，无需指定<code>{type: &quot;module&quot;}</code>以使用 ES 模块。</p><p>为了简化错误处理，在调用<code>new Worker(url)</code>时，初始脚本将在解析时加载。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">worker</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Worker</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/not-found.js&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 立即引发错误</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">worker</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Worker</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/not-found.js&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 立即引发错误</span></span></code></pre></div><p>传递给<code>Worker</code>的 specifier 是相对于项目根目录解析的（就像输入<code>bun ./path/to/file.js</code>一样）。</p><h3 id="open" tabindex="-1"><code>&quot;open&quot;</code> <a class="header-anchor" href="#open" aria-label="Permalink to &quot;\`&quot;open&quot;\`&quot;">​</a></h3><p>在创建工作线程并准备接收消息时，会触发<code>&quot;open&quot;</code>事件。可以在工作线程准备就绪后发送初始消息。 （在浏览器中不存在此事件。）</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">worker</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Worker</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URL</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;worker.ts&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">meta</span><span style="color:#E1E4E8;">.url).href);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">worker.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;open&quot;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;worker is ready&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">worker</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Worker</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URL</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;worker.ts&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">import</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">meta</span><span style="color:#24292E;">.url).href);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">worker.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;open&quot;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;worker is ready&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>消息会自动排队，直到工作线程准备就绪，因此无需等待<code>&quot;open&quot;</code>事件来发送消息。</p><h2 id="使用postmessage发送消息" tabindex="-1">使用<code>postMessage</code>发送消息 <a class="header-anchor" href="#使用postmessage发送消息" aria-label="Permalink to &quot;使用\`postMessage\`发送消息&quot;">​</a></h2><p>要发送消息，使用<a href="https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage" target="_blank" rel="noreferrer"><code>worker.postMessage</code></a> 和 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage" target="_blank" rel="noreferrer"><code>self.postMessage</code></a>。这利用了<a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm" target="_blank" rel="noreferrer">HTML 结构化克隆算法</a>。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 在工作线程上，\`postMessage\`会自动“路由”到父线程。</span></span>
<span class="line"><span style="color:#B392F0;">postMessage</span><span style="color:#E1E4E8;">({ hello: </span><span style="color:#9ECBFF;">&quot;world&quot;</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 在主线程上</span></span>
<span class="line"><span style="color:#E1E4E8;">worker.</span><span style="color:#B392F0;">postMessage</span><span style="color:#E1E4E8;">({ hello: </span><span style="color:#9ECBFF;">&quot;world&quot;</span><span style="color:#E1E4E8;"> });</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 在工作线程上，\`postMessage\`会自动“路由”到父线程。</span></span>
<span class="line"><span style="color:#6F42C1;">postMessage</span><span style="color:#24292E;">({ hello: </span><span style="color:#032F62;">&quot;world&quot;</span><span style="color:#24292E;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 在主线程上</span></span>
<span class="line"><span style="color:#24292E;">worker.</span><span style="color:#6F42C1;">postMessage</span><span style="color:#24292E;">({ hello: </span><span style="color:#032F62;">&quot;world&quot;</span><span style="color:#24292E;"> });</span></span></code></pre></div><p>要接收消息，使用工作线程和主线程上的<a href="https://developer.mozilla.org/en-US/docs/Web/API/Worker/message_event" target="_blank" rel="noreferrer"><code>message</code>事件处理程序</a>。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 工作线程：</span></span>
<span class="line"><span style="color:#E1E4E8;">self.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;message&quot;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(event.data);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#6A737D;">// 或使用setter：</span></span>
<span class="line"><span style="color:#6A737D;">// self.onmessage = fn</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 如果在主线程上</span></span>
<span class="line"><span style="color:#E1E4E8;">worker.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;message&quot;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(event.data);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#6A737D;">// 或使用setter：</span></span>
<span class="line"><span style="color:#6A737D;">// worker.onmessage = fn</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 工作线程：</span></span>
<span class="line"><span style="color:#24292E;">self.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;message&quot;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">event</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(event.data);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#6A737D;">// 或使用setter：</span></span>
<span class="line"><span style="color:#6A737D;">// self.onmessage = fn</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 如果在主线程上</span></span>
<span class="line"><span style="color:#24292E;">worker.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;message&quot;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">event</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(event.data);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#6A737D;">// 或使用setter：</span></span>
<span class="line"><span style="color:#6A737D;">// worker.onmessage = fn</span></span></code></pre></div><h2 id="终止工作线程" tabindex="-1">终止工作线程 <a class="header-anchor" href="#终止工作线程" aria-label="Permalink to &quot;终止工作线程&quot;">​</a></h2><p><code>Worker</code>实例在其事件循环没有剩余工作时会自动终止。将全局或任何<code>MessagePort</code>上附加<code>&quot;message&quot;</code>监听器将使事件循环保持活动状态。要强制终止<code>Worker</code>，请调用<code>worker.terminate()</code>。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">worker</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Worker</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URL</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;worker.ts&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">meta</span><span style="color:#E1E4E8;">.url).href);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// ...稍后</span></span>
<span class="line"><span style="color:#E1E4E8;">worker.</span><span style="color:#B392F0;">terminate</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">worker</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Worker</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URL</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;worker.ts&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">import</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">meta</span><span style="color:#24292E;">.url).href);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// ...稍后</span></span>
<span class="line"><span style="color:#24292E;">worker.</span><span style="color:#6F42C1;">terminate</span><span style="color:#24292E;">();</span></span></code></pre></div><p>这将导致工作线程尽快退出。</p><h3 id="process-exit" tabindex="-1"><code>process.exit()</code> <a class="header-anchor" href="#process-exit" aria-label="Permalink to &quot;\`process.exit()\`&quot;">​</a></h3><p>工作线程可以使用<code>process.exit()</code>自行终止。这不会终止主进程。与 Node.js 一样，在工作线程上发出<code>process.on(&#39;beforeExit&#39;, callback)</code>和<code>process.on(&#39;exit&#39;, callback)</code>事件（而不是在主线程上），并将退出代码传递给<code>&quot;close&quot;</code>事件。</p><h3 id="close" tabindex="-1"><code>&quot;close&quot;</code> <a class="header-anchor" href="#close" aria-label="Permalink to &quot;\`&quot;close&quot;\`&quot;">​</a></h3><p>在工作线程已被终止时，会触发<code>&quot;close&quot;</code>事件。工作线程实际终止可能需要一些时间，因此当工作线程被标记为已终止时会触发此事件。<code>CloseEvent</code>将包含传递给<code>process.exit()</code>的退出代码，或者如果由于其他原因而关闭，则为 0。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">worker</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Worker</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URL</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;worker.ts&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">meta</span><span style="color:#E1E4E8;">.url).href);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">worker.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;close&quot;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;worker is being closed&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">worker</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Worker</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URL</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;worker.ts&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">import</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">meta</span><span style="color:#24292E;">.url).href);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">worker.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;close&quot;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">event</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;worker is being closed&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>在浏览器中不存在此事件。</p><h2 id="生命周期管理" tabindex="-1">生命周期管理 <a class="header-anchor" href="#生命周期管理" aria-label="Permalink to &quot;生命周期管理&quot;">​</a></h2><p>默认情况下，活动的<code>Worker</code>会使主（生成）进程保持活动状态，因此异步任务（如<code>setTimeout</code>和 promises）将使进程保持活动状态。附加<code>message</code>监听器也会使<code>Worker</code>保持活动状态。</p><h3 id="worker-unref" tabindex="-1"><code>worker.unref()</code> <a class="header-anchor" href="#worker-unref" aria-label="Permalink to &quot;\`worker.unref()\`&quot;">​</a></h3><p>要阻止运行中的工作线程使进程保持活动状态，请调用<code>worker.unref()</code>。这会将工作线程的生命周期与主进程的生命周期分离，并与 Node.js 的<code>worker_threads</code>所做的相同。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">worker</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Worker</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URL</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;worker.ts&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">meta</span><span style="color:#E1E4E8;">.url).href);</span></span>
<span class="line"><span style="color:#E1E4E8;">worker.</span><span style="color:#B392F0;">unref</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">worker</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Worker</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URL</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;worker.ts&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">import</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">meta</span><span style="color:#24292E;">.url).href);</span></span>
<span class="line"><span style="color:#24292E;">worker.</span><span style="color:#6F42C1;">unref</span><span style="color:#24292E;">();</span></span></code></pre></div><p>注意：<code>worker.unref()</code>在浏览器中不可用。</p><h3 id="worker-ref" tabindex="-1"><code>worker.ref()</code> <a class="header-anchor" href="#worker-ref" aria-label="Permalink to &quot;\`worker.ref()\`&quot;">​</a></h3><p>要使进程保持活动状态，直到<code>Worker</code>终止，请调用<code>worker.ref()</code>。引用的工作线程是默认行为，仍然需要事件</p><p>循环中发生的某些事情（例如<code>&quot;message&quot;</code>监听器）以使工作线程继续运行。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">worker</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Worker</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URL</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;worker.ts&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">meta</span><span style="color:#E1E4E8;">.url).href);</span></span>
<span class="line"><span style="color:#E1E4E8;">worker.</span><span style="color:#B392F0;">unref</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 稍后...</span></span>
<span class="line"><span style="color:#E1E4E8;">worker.</span><span style="color:#B392F0;">ref</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">worker</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Worker</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URL</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;worker.ts&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">import</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">meta</span><span style="color:#24292E;">.url).href);</span></span>
<span class="line"><span style="color:#24292E;">worker.</span><span style="color:#6F42C1;">unref</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 稍后...</span></span>
<span class="line"><span style="color:#24292E;">worker.</span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">();</span></span></code></pre></div><p>或者，您还可以向<code>Worker</code>传递一个<code>options</code>对象：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">worker</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Worker</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URL</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;worker.ts&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">meta</span><span style="color:#E1E4E8;">.url).href, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  ref: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">worker</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Worker</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URL</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;worker.ts&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">import</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">meta</span><span style="color:#24292E;">.url).href, {</span></span>
<span class="line"><span style="color:#24292E;">  ref: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>注意：<code>worker.ref()</code>在浏览器中不可用。</p><h2 id="使用smol节省内存" tabindex="-1">使用<code>smol</code>节省内存 <a class="header-anchor" href="#使用smol节省内存" aria-label="Permalink to &quot;使用\`smol\`节省内存&quot;">​</a></h2><p>JavaScript 实例可能会占用大量内存。Bun 的<code>Worker</code>支持<code>smol</code>模式，可以减少内存使用，但会降低性能。要启用<code>smol</code>模式，请在<code>Worker</code>构造函数的<code>options</code>对象中传递<code>smol: true</code>。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">worker</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Worker</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./i-am-smol.ts&quot;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  smol: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">worker</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Worker</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./i-am-smol.ts&quot;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">  smol: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><details><summary>\`smol\`模式实际上是什么？?</summary> 设置\`smol: true\`会将\`JSC::HeapSize\`设置为\`Small\`，而不是默认的\`Large\`。 </details>`,52),p=[e];function r(t,c,E,y,i,d){return a(),n("div",null,p)}const F=s(l,[["render",r]]);export{k as __pageData,F as default};
