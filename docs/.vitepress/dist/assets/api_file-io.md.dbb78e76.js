import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.33544f09.js";const p="/cat.jpg",B=JSON.parse('{"title":"File I/O","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"api/file-io.md","filePath":"api/file-io.md"}'),o={name:"api/file-io.md"},e=l(`<h1 id="file-i-o" tabindex="-1">File I/O <a class="header-anchor" href="#file-i-o" aria-label="Permalink to &quot;File I/O&quot;">​</a></h1><blockquote><p><strong>注意</strong> — 此页面记录的<code>Bun.file</code>和<code>Bun.write</code> API 经过了大量优化，代表了使用 Bun 执行文件系统任务的推荐方式。对于尚不可用于<code>Bun.file</code>的操作，例如<code>mkdir</code>或<code>readdir</code>，您可以使用 Bun 的<a href="/runtime/nodejs-api.html#node:fs">几乎完整的</a> <a href="https://nodejs.org/api/fs.html" target="_blank" rel="noreferrer"><code>node:fs</code></a> 模块实现。</p></blockquote><p>Bun 提供了一组优化的 API，用于读取和写入文件。</p><h2 id="读取文件-bun-file" tabindex="-1">读取文件（<code>Bun.file()</code>） <a class="header-anchor" href="#读取文件-bun-file" aria-label="Permalink to &quot;读取文件（\`Bun.file()\`）&quot;">​</a></h2><p><code>Bun.file(path): BunFile</code></p><p>使用<code>Bun.file(path)</code>函数创建一个<code>BunFile</code>实例。<code>BunFile</code>表示一种懒加载的文件；初始化它实际上不会从磁盘读取文件。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">foo</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Bun.</span><span style="color:#B392F0;">file</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;foo.txt&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 相对于cwd</span></span>
<span class="line"><span style="color:#E1E4E8;">foo.size; </span><span style="color:#6A737D;">// 字节数</span></span>
<span class="line"><span style="color:#E1E4E8;">foo.type; </span><span style="color:#6A737D;">// MIME类型</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">foo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Bun.</span><span style="color:#6F42C1;">file</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;foo.txt&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 相对于cwd</span></span>
<span class="line"><span style="color:#24292E;">foo.size; </span><span style="color:#6A737D;">// 字节数</span></span>
<span class="line"><span style="color:#24292E;">foo.type; </span><span style="color:#6A737D;">// MIME类型</span></span></code></pre></div><p>该引用符合<a href="https://developer.mozilla.org/en-US/docs/Web/API/Blob" target="_blank" rel="noreferrer"><code>Blob</code></a>接口，因此可以以不同的格式读取内容。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">foo</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Bun.</span><span style="color:#B392F0;">file</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;foo.txt&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> foo.</span><span style="color:#B392F0;">text</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 作为字符串的内容</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> foo.</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 作为ReadableStream的内容</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> foo.</span><span style="color:#B392F0;">arrayBuffer</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 作为ArrayBuffer的内容</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">foo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Bun.</span><span style="color:#6F42C1;">file</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;foo.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> foo.</span><span style="color:#6F42C1;">text</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 作为字符串的内容</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> foo.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 作为ReadableStream的内容</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> foo.</span><span style="color:#6F42C1;">arrayBuffer</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 作为ArrayBuffer的内容</span></span></code></pre></div><p>文件引用还可以使用数字<a href="https://en.wikipedia.org/wiki/File_descriptor" target="_blank" rel="noreferrer">file descriptors</a>或<code>file://</code> URL 创建。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Bun.</span><span style="color:#B392F0;">file</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1234</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">Bun.</span><span style="color:#B392F0;">file</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URL</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">meta</span><span style="color:#E1E4E8;">.url)); </span><span style="color:#6A737D;">// 对当前文件的引用</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Bun.</span><span style="color:#6F42C1;">file</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1234</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">Bun.</span><span style="color:#6F42C1;">file</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URL</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">import</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">meta</span><span style="color:#24292E;">.url)); </span><span style="color:#6A737D;">// 对当前文件的引用</span></span></code></pre></div><p><code>BunFile</code>可以指向磁盘上不存在文件的位置。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">notreal</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Bun.</span><span style="color:#B392F0;">file</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;notreal.txt&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">notreal.size; </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#E1E4E8;">notreal.type; </span><span style="color:#6A737D;">// &quot;text/plain;charset=utf-8&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">notreal</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Bun.</span><span style="color:#6F42C1;">file</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;notreal.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">notreal.size; </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#24292E;">notreal.type; </span><span style="color:#6A737D;">// &quot;text/plain;charset=utf-8&quot;</span></span></code></pre></div><p>默认的 MIME 类型是<code>text/plain;charset=utf-8</code>，但可以通过向<code>Bun.file</code>传递第二个参数来覆盖它。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">notreal</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Bun.</span><span style="color:#B392F0;">file</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;notreal.json&quot;</span><span style="color:#E1E4E8;">, { type: </span><span style="color:#9ECBFF;">&quot;application/json&quot;</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"><span style="color:#E1E4E8;">notreal.type; </span><span style="color:#6A737D;">// =&gt; &quot;application/json;charset=utf-8&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">notreal</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Bun.</span><span style="color:#6F42C1;">file</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;notreal.json&quot;</span><span style="color:#24292E;">, { type: </span><span style="color:#032F62;">&quot;application/json&quot;</span><span style="color:#24292E;"> });</span></span>
<span class="line"><span style="color:#24292E;">notreal.type; </span><span style="color:#6A737D;">// =&gt; &quot;application/json;charset=utf-8&quot;</span></span></code></pre></div><p>为方便起见，Bun 将<code>stdin</code>、<code>stdout</code>和<code>stderr</code>公开为<code>BunFile</code>的实例。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Bun.stdin; </span><span style="color:#6A737D;">// 只读</span></span>
<span class="line"><span style="color:#E1E4E8;">Bun.stdout;</span></span>
<span class="line"><span style="color:#E1E4E8;">Bun.stderr;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Bun.stdin; </span><span style="color:#6A737D;">// 只读</span></span>
<span class="line"><span style="color:#24292E;">Bun.stdout;</span></span>
<span class="line"><span style="color:#24292E;">Bun.stderr;</span></span></code></pre></div><h2 id="写入文件-bun-write" tabindex="-1">写入文件（<code>Bun.write()</code>） <a class="header-anchor" href="#写入文件-bun-write" aria-label="Permalink to &quot;写入文件（\`Bun.write()\`）&quot;">​</a></h2><p><code>Bun.write(destination, data): Promise&lt;number&gt;</code></p><p><code>Bun.write</code>函数是一个多用途工具，用于将各种类型的数据写入磁盘。</p><p>第一个参数是<code>destination</code>，可以是以下任何类型：</p><ul><li><code>string</code>：文件系统上的位置路径。使用<code>&quot;path&quot;</code>模块来操作路径。</li><li><code>URL</code>：一个<code>file://</code>描述符。</li><li><code>BunFile</code>：文件引用。</li></ul><p>第二个参数是要写入的数据，可以是以下任何类型：</p><ul><li><code>string</code></li><li><code>Blob</code>（包括<code>BunFile</code>）</li><li><code>ArrayBuffer</code>或<code>SharedArrayBuffer</code></li><li><code>TypedArray</code>（例如<code>Uint8Array</code>等）</li><li><code>Response</code></li></ul><p>所有可能的排列组合都使用当前平台上最快速的可用系统调用来处理。</p><details><summary>查看系统调用</summary><table><thead><tr><th>输出</th><th>输入</th><th>系统调用</th><th>平台</th></tr></thead><tbody><tr><td>文件</td><td>文件</td><td>copy_file_range</td><td>Linux</td></tr><tr><td>文件</td><td>管道</td><td>sendfile</td><td>Linux</td></tr><tr><td>管道</td><td>管道</td><td>splice</td><td>Linux</td></tr><tr><td>终端</td><td>文件</td><td>sendfile</td><td>Linux</td></tr><tr><td>终端</td><td>终端</td><td>sendfile</td><td>Linux</td></tr><tr><td>套接字</td><td>文件或管道</td><td>sendfile（如果是 http 而不是 https）</td><td>Linux</td></tr><tr><td>文件（不存在）</td><td>文件（路径）</td><td>clonefile</td><td>macOS</td></tr><tr><td>文件（存在）</td><td>文件</td><td>fcopyfile</td><td>macOS</td></tr><tr><td>文件</td><td>Blob 或字符串</td><td>write</td><td>macOS</td></tr><tr><td>文件</td><td>Blob 或字符串</td><td>write</td><td>Linux</td></tr></tbody></table></details><p>要将字符串写入磁盘：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">data</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`这是最好的时光，也是最坏的时光。\`</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> Bun.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;output.txt&quot;</span><span style="color:#E1E4E8;">, data);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">data</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`这是最好的时光，也是最坏的时光。\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> Bun.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;output.txt&quot;</span><span style="color:#24292E;">, data);</span></span></code></pre></div><p>要将文件复制到磁盘上的另一个位置：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">input</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Bun.</span><span style="color:#B392F0;">file</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;input.txt&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">output</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Bun.</span><span style="color:#B392F0;">file</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;output.txt&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 尚不存在！</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> Bun.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(output, input);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">input</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Bun.</span><span style="color:#6F42C1;">file</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;input.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">output</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Bun.</span><span style="color:#6F42C1;">file</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;output.txt&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 尚不存在！</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> Bun.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(output, input);</span></span></code></pre></div><p>要将字节数组写入磁盘：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">encoder</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TextEncoder</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">data</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> encoder.</span><span style="color:#B392F0;">encode</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;datadatadata&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// Uint8Array</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> Bun.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;output.txt&quot;</span><span style="color:#E1E4E8;">, data);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">encoder</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TextEncoder</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">data</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> encoder.</span><span style="color:#6F42C1;">encode</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;datadatadata&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// Uint8Array</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> Bun.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;output.txt&quot;</span><span style="color:#24292E;">, data);</span></span></code></pre></div><p>要将文件写入<code>stdout</code>：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">input</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Bun.</span><span style="color:#B392F0;">file</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;input.txt&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> Bun.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(Bun.stdout, input);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">input</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Bun.</span><span style="color:#6F42C1;">file</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;input.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> Bun.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(Bun.stdout, input);</span></span></code></pre></div><p>要将 HTTP 响应的主体写入磁盘：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">response</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fetch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;https://bun.sh&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> Bun.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;index.html&quot;</span><span style="color:#E1E4E8;">, response);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">response</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fetch</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;https://bun.sh&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> Bun.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;index.html&quot;</span><span style="color:#24292E;">, response);</span></span></code></pre></div><h2 id="使用filesink进行增量写入" tabindex="-1">使用<code>FileSink</code>进行增量写入 <a class="header-anchor" href="#使用filesink进行增量写入" aria-label="Permalink to &quot;使用\`FileSink\`进行增量写入&quot;">​</a></h2><p>Bun 提供了一个本地的增量文件写入 API，称为<code>FileSink</code>。要从<code>BunFile</code>检索<code>FileSink</code>实例：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">file</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Bun.</span><span style="color:#B392F0;">file</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;output.txt&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">writer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> file.</span><span style="color:#B392F0;">writer</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">file</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Bun.</span><span style="color:#6F42C1;">file</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;output.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">writer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> file.</span><span style="color:#6F42C1;">writer</span><span style="color:#24292E;">();</span></span></code></pre></div><p>要逐步写入文件，请调用<code>.write()</code>。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">file</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Bun.</span><span style="color:#B392F0;">file</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;output.txt&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">writer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> file.</span><span style="color:#B392F0;">writer</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">writer.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;这是最好的时光</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">writer.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;这是最坏的时光</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">file</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Bun.</span><span style="color:#6F42C1;">file</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;output.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">writer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> file.</span><span style="color:#6F42C1;">writer</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">writer.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;这是最好的时光</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">writer.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;这是最坏的时光</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>这些块将在内部进行缓冲。要将缓冲区刷新到磁盘上，请使用<code>.flush()</code>。这将返回已刷新的字节数。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">writer.</span><span style="color:#B392F0;">flush</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 将缓冲区写入磁盘</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">writer.</span><span style="color:#6F42C1;">flush</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 将缓冲区写入磁盘</span></span></code></pre></div><p>当<code>FileSink</code>的<em>高水位标记</em>达到时，即其内部缓冲区已满时，缓冲区也会自动刷新。这个值可以配置。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">file</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Bun.</span><span style="color:#B392F0;">file</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;output.txt&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">writer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> file.</span><span style="color:#B392F0;">writer</span><span style="color:#E1E4E8;">({ highWaterMark: </span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;"> }); </span><span style="color:#6A737D;">// 1MB</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">file</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Bun.</span><span style="color:#6F42C1;">file</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;output.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">writer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> file.</span><span style="color:#6F42C1;">writer</span><span style="color:#24292E;">({ highWaterMark: </span><span style="color:#005CC5;">1024</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1024</span><span style="color:#24292E;"> }); </span><span style="color:#6A737D;">// 1MB</span></span></code></pre></div><p>要刷新缓冲区并关闭文件：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">writer.</span><span style="color:#B392F0;">end</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">writer.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">();</span></span></code></pre></div><p>请注意，默认情况下，<code>bun</code>进程将保持活动状态，直到使用<code>.end()</code>显式关闭此<code>FileSink</code>。要退出此行为，您可以对实例进行&quot;unref&quot;操作。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">writer.</span><span style="color:#B392F0;">unref</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 以后要重新引用它</span></span>
<span class="line"><span style="color:#E1E4E8;">writer.</span><span style="color:#B392F0;">ref</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">writer.</span><span style="color:#6F42C1;">unref</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 以后要重新引用它</span></span>
<span class="line"><span style="color:#24292E;">writer.</span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">();</span></span></code></pre></div><h2 id="基准测试" tabindex="-1">基准测试 <a class="header-anchor" href="#基准测试" aria-label="Permalink to &quot;基准测试&quot;">​</a></h2><p>以下是 Linux <code>cat</code>命令的 3 行实现。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 用法</span></span>
<span class="line"><span style="color:#6A737D;">// $ bun ./cat.ts ./path-to-file</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { resolve } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;path&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(process.argv.</span><span style="color:#B392F0;">at</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> Bun.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(Bun.stdout, Bun.</span><span style="color:#B392F0;">file</span><span style="color:#E1E4E8;">(path));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 用法</span></span>
<span class="line"><span style="color:#6A737D;">// $ bun ./cat.ts ./path-to-file</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { resolve } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;path&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">path</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(process.argv.</span><span style="color:#6F42C1;">at</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> Bun.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(Bun.stdout, Bun.</span><span style="color:#6F42C1;">file</span><span style="color:#24292E;">(path));</span></span></code></pre></div><p>要运行文件：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bun</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./cat.ts</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./path-to-file</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bun</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./cat.ts</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./path-to-file</span></span></code></pre></div><p>对于 Linux 上的大文件，它比 GNU <code>cat</code>运行快 2 倍。</p><p><img src="`+p+`" alt="image"></p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Bun</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">stdin</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BunFile</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">stdout</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BunFile</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">stderr</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BunFile</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">file</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">path</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URL</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">options</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> { </span><span style="color:#FFAB70;">type</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;"> })</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BunFile</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">destination</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BunFile</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URL</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">input</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Blob</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ArrayBuffer</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SharedArrayBuffer</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TypedArray</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Response</span></span>
<span class="line"><span style="color:#E1E4E8;">  )</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Promise</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BunFile</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">readonly</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">size</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">readonly</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">type</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">text</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Promise</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Promise</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">ReadableStream</span><span style="color:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">arrayBuffer</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Promise</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">ArrayBuffer</span><span style="color:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">json</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Promise</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">writer</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">params</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> { </span><span style="color:#FFAB70;">highWaterMark</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;"> })</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileSink</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileSink</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">chunk</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ArrayBufferView</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ArrayBuffer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SharedArrayBuffer</span></span>
<span class="line"><span style="color:#E1E4E8;">  )</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">flush</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Promise</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">end</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">error</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Promise</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">options</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> { </span><span style="color:#FFAB70;">highWaterMark</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;"> })</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">void</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">ref</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">void</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">unref</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">void</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Bun</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">stdin</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BunFile</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">stdout</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BunFile</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">stderr</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BunFile</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">file</span><span style="color:#24292E;">(</span><span style="color:#E36209;">path</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URL</span><span style="color:#24292E;">, </span><span style="color:#E36209;">options</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> { </span><span style="color:#E36209;">type</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> })</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BunFile</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">destination</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BunFile</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URL</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">input</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Blob</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ArrayBuffer</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SharedArrayBuffer</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TypedArray</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Response</span></span>
<span class="line"><span style="color:#24292E;">  )</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Promise</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">number</span><span style="color:#24292E;">&gt;;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BunFile</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">readonly</span><span style="color:#24292E;"> </span><span style="color:#E36209;">size</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">readonly</span><span style="color:#24292E;"> </span><span style="color:#E36209;">type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">text</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Promise</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">&gt;;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Promise</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">ReadableStream</span><span style="color:#24292E;">&gt;;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">arrayBuffer</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Promise</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">ArrayBuffer</span><span style="color:#24292E;">&gt;;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">json</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Promise</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">any</span><span style="color:#24292E;">&gt;;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">writer</span><span style="color:#24292E;">(</span><span style="color:#E36209;">params</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> { </span><span style="color:#E36209;">highWaterMark</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;"> })</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileSink</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileSink</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">chunk</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ArrayBufferView</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ArrayBuffer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SharedArrayBuffer</span></span>
<span class="line"><span style="color:#24292E;">  )</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">flush</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Promise</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">number</span><span style="color:#24292E;">&gt;;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">(</span><span style="color:#E36209;">error</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Promise</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">number</span><span style="color:#24292E;">&gt;;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">(</span><span style="color:#E36209;">options</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> { </span><span style="color:#E36209;">highWaterMark</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;"> })</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">void</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">void</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">unref</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">void</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,58),t=[e];function c(r,y,E,i,d,F){return n(),a("div",null,t)}const h=s(o,[["render",c]]);export{B as __pageData,h as default};
