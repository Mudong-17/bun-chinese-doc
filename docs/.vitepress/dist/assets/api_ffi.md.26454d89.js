import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.33544f09.js";const l="/ffi.png",C=JSON.parse('{"title":"FFI","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"api/ffi.md","filePath":"api/ffi.md"}'),o={name:"api/ffi.md"},e=p(`<h1 id="ffi" tabindex="-1">FFI <a class="header-anchor" href="#ffi" aria-label="Permalink to &quot;FFI&quot;">​</a></h1><p>使用内置的<code>bun:ffi</code>模块以高效地从 JavaScript 调用本地库。它与支持 C ABI 的语言一起工作（如 Zig、Rust、C/C++、C#、Nim、Kotlin 等）。</p><h2 id="使用-bun-ffi" tabindex="-1">使用（<code>bun:ffi</code>） <a class="header-anchor" href="#使用-bun-ffi" aria-label="Permalink to &quot;使用（\`bun:ffi\`）&quot;">​</a></h2><p>要打印<code>sqlite3</code>的版本号：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { dlopen, FFIType, suffix } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;bun:ffi&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// \`suffix\` 可以是 &quot;dylib&quot;、&quot;so&quot; 或 &quot;dll&quot;，取决于平台</span></span>
<span class="line"><span style="color:#6A737D;">// 没有必要使用 &quot;suffix&quot;，它只是为了方便而存在</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`libsqlite3.\${</span><span style="color:#E1E4E8;">suffix</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">symbols</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">sqlite3_libversion</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 要调用的函数</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dlopen</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  path, </span><span style="color:#6A737D;">// 库名称或文件路径</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    sqlite3_libversion: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 无参数，返回一个字符串</span></span>
<span class="line"><span style="color:#E1E4E8;">      args: [],</span></span>
<span class="line"><span style="color:#E1E4E8;">      returns: FFIType.cstring,</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`SQLite 3 版本：\${</span><span style="color:#B392F0;">sqlite3_libversion</span><span style="color:#9ECBFF;">()</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { dlopen, FFIType, suffix } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;bun:ffi&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// \`suffix\` 可以是 &quot;dylib&quot;、&quot;so&quot; 或 &quot;dll&quot;，取决于平台</span></span>
<span class="line"><span style="color:#6A737D;">// 没有必要使用 &quot;suffix&quot;，它只是为了方便而存在</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">path</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`libsqlite3.\${</span><span style="color:#24292E;">suffix</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">symbols</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">sqlite3_libversion</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 要调用的函数</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dlopen</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  path, </span><span style="color:#6A737D;">// 库名称或文件路径</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    sqlite3_libversion: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 无参数，返回一个字符串</span></span>
<span class="line"><span style="color:#24292E;">      args: [],</span></span>
<span class="line"><span style="color:#24292E;">      returns: FFIType.cstring,</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`SQLite 3 版本：\${</span><span style="color:#6F42C1;">sqlite3_libversion</span><span style="color:#032F62;">()</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">);</span></span></code></pre></div><h2 id="性能" tabindex="-1">性能 <a class="header-anchor" href="#性能" aria-label="Permalink to &quot;性能&quot;">​</a></h2><p>根据<a href="https://github.com/oven-sh/bun/tree/main/bench/ffi" target="_blank" rel="noreferrer">我们的基准测试</a>，<code>bun:ffi</code>大约比通过<code>Node-API</code>的 Node.js FFI 快 2-6 倍。</p><p><img src="`+l+`" alt="image"></p><p>Bun 生成并即时编译 C 绑定，以有效地在 JavaScript 类型和本机类型之间转换值。为了编译 C 代码，Bun 嵌入了<a href="https://github.com/TinyCC/tinycc" target="_blank" rel="noreferrer">小型且快速的 C 编译器 TinyCC</a>。</p><h2 id="用法" tabindex="-1">用法 <a class="header-anchor" href="#用法" aria-label="Permalink to &quot;用法&quot;">​</a></h2><h3 id="zig" tabindex="-1">Zig <a class="header-anchor" href="#zig" aria-label="Permalink to &quot;Zig&quot;">​</a></h3><div class="language-zig vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">zig</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// add.zig</span></span>
<span class="line"><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">i32</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">i32</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">i32</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// add.zig</span></span>
<span class="line"><span style="color:#D73A49;">pub</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#E36209;">a</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">i32</span><span style="color:#24292E;">, </span><span style="color:#E36209;">b</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">i32</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">i32</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>要编译：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">zig</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">build-lib</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add.zig</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-dynamic</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-OReleaseFast</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">zig</span><span style="color:#24292E;"> </span><span style="color:#032F62;">build-lib</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add.zig</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-dynamic</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-OReleaseFast</span></span></code></pre></div><p>将共享库的路径和要导入到<code>dlopen</code>中的符号映射传递给：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { dlopen, FFIType, suffix } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;bun:ffi&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`libadd.\${</span><span style="color:#E1E4E8;">suffix</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">lib</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dlopen</span><span style="color:#E1E4E8;">(path, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  add: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    args: [FFIType.i32, FFIType.i32],</span></span>
<span class="line"><span style="color:#E1E4E8;">    returns: FFIType.i32,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">lib.symbols.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { dlopen, FFIType, suffix } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;bun:ffi&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">path</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`libadd.\${</span><span style="color:#24292E;">suffix</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">lib</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dlopen</span><span style="color:#24292E;">(path, {</span></span>
<span class="line"><span style="color:#24292E;">  add: {</span></span>
<span class="line"><span style="color:#24292E;">    args: [FFIType.i32, FFIType.i32],</span></span>
<span class="line"><span style="color:#24292E;">    returns: FFIType.i32,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">lib.symbols.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="rust" tabindex="-1">Rust <a class="header-anchor" href="#rust" aria-label="Permalink to &quot;Rust&quot;">​</a></h3><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// add.rs</span></span>
<span class="line"><span style="color:#E1E4E8;">#[no_mangle]</span></span>
<span class="line"><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extern</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;C&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(a</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isize</span><span style="color:#E1E4E8;">, b</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isize</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isize</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    a </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> b</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// add.rs</span></span>
<span class="line"><span style="color:#24292E;">#[no_mangle]</span></span>
<span class="line"><span style="color:#D73A49;">pub</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extern</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;C&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(a</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isize</span><span style="color:#24292E;">, b</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isize</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isize</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    a </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> b</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>要编译：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rustc</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--crate-type</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cdylib</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add.rs</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rustc</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--crate-type</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cdylib</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add.rs</span></span></code></pre></div><h2 id="ffi-类型" tabindex="-1">FFI 类型 <a class="header-anchor" href="#ffi-类型" aria-label="Permalink to &quot;FFI 类型&quot;">​</a></h2><p>支持以下<code>FFIType</code>值。</p><table><thead><tr><th><code>FFIType</code></th><th>C 类型</th><th>别名</th></tr></thead><tbody><tr><td>cstring</td><td><code>char*</code></td><td></td></tr><tr><td>function</td><td><code>(void*)(*)()</code></td><td><code>fn</code>、<code>callback</code></td></tr><tr><td>ptr</td><td><code>void*</code></td><td><code>pointer</code>、<code>void*</code>、<code>char*</code></td></tr><tr><td>i8</td><td><code>int8_t</code></td><td><code>int8_t</code></td></tr><tr><td>i16</td><td><code>int16_t</code></td><td><code>int16_t</code></td></tr><tr><td>i32</td><td><code>int32_t</code></td><td><code>int32_t</code>、<code>int</code></td></tr><tr><td>i64</td><td><code>int64_t</code></td><td><code>int64_t</code></td></tr><tr><td>i64_fast</td><td><code>int64_t</code></td><td></td></tr><tr><td>u8</td><td><code>uint8_t</code></td><td><code>uint8_t</code></td></tr><tr><td>u16</td><td><code>uint16_t</code></td><td><code>uint16_t</code></td></tr><tr><td>u32</td><td><code>uint32_t</code></td><td><code>uint32_t</code></td></tr><tr><td>u64</td><td><code>uint64_t</code></td><td><code>uint64_t</code></td></tr><tr><td>u64_fast</td><td><code>uint64_t</code></td><td></td></tr><tr><td>f32</td><td><code>float</code></td><td><code>float</code></td></tr><tr><td>f64</td><td><code>double</code></td><td><code>double</code></td></tr><tr><td>bool</td><td><code>bool</code></td><td></td></tr><tr><td>char</td><td><code>char</code></td><td></td></tr></tbody></table><h2 id="字符串" tabindex="-1">字符串 <a class="header-anchor" href="#字符串" aria-label="Permalink to &quot;字符串&quot;">​</a></h2><p>JavaScript 字符串和 C 样式字符串不同，这使得在本机库中使用字符串变得复杂。</p><details><summary>JavaScript字符串和C字符串有何不同？</summary> JavaScript 字符串： <ul><li>UTF16 编码（每个字母 2 个字节），或者根据 JavaScript 引擎和使用的字符而有可能是 latin1 编码</li><li><code>length</code>单独存储</li><li>不可变</li></ul><p>C 字符串：</p><ul><li>UTF8 编码（每个字母 1 个字节），通常是如此</li><li>不存储长度。相反，字符串以空字符结尾，这意味着长度是找到的第一个<code>\\0</code>的索引</li><li>可变</li></ul></details><p>为了解决这个问题，<code>bun:ffi</code>导出了<code>CString</code>，它扩展了 JavaScript 内置的<code>String</code>，以支持以空字符结尾的字符串，并添加了一些附加功能：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CString</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">   * 给定一个 \`ptr\`，这将自动搜索封闭的 \`\\0\` 字符并在必要时从UTF-8转码为UTF-16。</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">constructor</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">ptr</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">byteOffset</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">byteLength</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">   * C字符串的ptr</span></span>
<span class="line"><span style="color:#6A737D;">   *</span></span>
<span class="line"><span style="color:#6A737D;">   * 此\`CString\`实例是字符串的克隆，因此在释放\`ptr\`后继续使用此实例是安全的。</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">ptr</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">byteOffset</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">byteLength</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CString</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">   * 给定一个 \`ptr\`，这将自动搜索封闭的 \`\\0\` 字符并在必要时从UTF-8转码为UTF-16。</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;">(</span><span style="color:#E36209;">ptr</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">, </span><span style="color:#E36209;">byteOffset</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">, </span><span style="color:#E36209;">byteLength</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">   * C字符串的ptr</span></span>
<span class="line"><span style="color:#6A737D;">   *</span></span>
<span class="line"><span style="color:#6A737D;">   * 此\`CString\`实例是字符串的克隆，因此在释放\`ptr\`后继续使用此实例是安全的。</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">ptr</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">byteOffset</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">byteLength</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>要从以空字符结尾的字符串指针转换为 JavaScript 字符串：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">myString</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CString</span><span style="color:#E1E4E8;">(ptr);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">myString</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CString</span><span style="color:#24292E;">(ptr);</span></span></code></pre></div><p>要从具有已知长度的指针转换为 JavaScript 字符串：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">myString</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CString</span><span style="color:#E1E4E8;">(ptr, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, byteLength);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">myString</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CString</span><span style="color:#24292E;">(ptr, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, byteLength);</span></span></code></pre></div><p><code>new CString()</code>构造函数克隆了 C 字符串，因此在释放<code>ptr</code>后继续使用<code>myString</code>是安全的。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">my_library_free</span><span style="color:#E1E4E8;">(myString.ptr);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 这是安全的，因为myString是一个克隆</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(myString);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">my_library_free</span><span style="color:#24292E;">(myString.ptr);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 这是安全的，因为myString是一个克隆</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(myString);</span></span></code></pre></div><p>在<code>returns</code>中使用时，<code>FFIType.cstring</code>将指针强制转换为 JavaScript <code>string</code>。在\`args</p><p><code>中使用时，</code>FFIType.cstring<code>与</code>ptr\`相同。</p><h2 id="函数指针" tabindex="-1">函数指针 <a class="header-anchor" href="#函数指针" aria-label="Permalink to &quot;函数指针&quot;">​</a></h2><blockquote><p><strong>注意</strong> — 尚不支持异步函数。</p></blockquote><p>要从 JavaScript 中调用函数指针，使用<code>CFunction</code>。这在使用 Bun 的 Node-API（napi）并且已加载了某些符号时非常有用。C/FFI 函数可以调用 JavaScript/TypeScript 代码。这在处理异步代码或每当需要从 C 中调用 JavaScript 代码时非常有用。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { CFunction } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;bun:ffi&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> myNativeLibraryGetVersion </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* 以某种方式获得此指针 */</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">getVersion</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CFunction</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  returns: </span><span style="color:#9ECBFF;">&quot;cstring&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  args: [],</span></span>
<span class="line"><span style="color:#E1E4E8;">  ptr: myNativeLibraryGetVersion,</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#B392F0;">getVersion</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { CFunction } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;bun:ffi&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> myNativeLibraryGetVersion </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* 以某种方式获得此指针 */</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">getVersion</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CFunction</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  returns: </span><span style="color:#032F62;">&quot;cstring&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  args: [],</span></span>
<span class="line"><span style="color:#24292E;">  ptr: myNativeLibraryGetVersion,</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#6F42C1;">getVersion</span><span style="color:#24292E;">();</span></span></code></pre></div><p>如果有多个函数指针，可以使用<code>linkSymbols</code>一次定义它们所有：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { linkSymbols } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;bun:ffi&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 在其他地方定义getVersionPtrs</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">majorPtr</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">minorPtr</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">patchPtr</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getVersionPtrs</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">lib</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">linkSymbols</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 与dlopen()不同，这里的名称可以是任何你想要的</span></span>
<span class="line"><span style="color:#E1E4E8;">  getMajor: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    returns: </span><span style="color:#9ECBFF;">&quot;cstring&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    args: [],</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 由于这不使用dlsym()，您必须提供有效的ptr</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 该ptr可以是数字或bigint</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 无效的指针将使您的程序崩溃。</span></span>
<span class="line"><span style="color:#E1E4E8;">    ptr: majorPtr,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  getMinor: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    returns: </span><span style="color:#9ECBFF;">&quot;cstring&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    args: [],</span></span>
<span class="line"><span style="color:#E1E4E8;">    ptr: minorPtr,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  getPatch: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    returns: </span><span style="color:#9ECBFF;">&quot;cstring&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    args: [],</span></span>
<span class="line"><span style="color:#E1E4E8;">    ptr: patchPtr,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">major</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">minor</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">patch</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">  lib.symbols.</span><span style="color:#B392F0;">getMajor</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">  lib.symbols.</span><span style="color:#B392F0;">getMinor</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">  lib.symbols.</span><span style="color:#B392F0;">getPatch</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">];</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { linkSymbols } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;bun:ffi&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 在其他地方定义getVersionPtrs</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">majorPtr</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">minorPtr</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">patchPtr</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getVersionPtrs</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">lib</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">linkSymbols</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 与dlopen()不同，这里的名称可以是任何你想要的</span></span>
<span class="line"><span style="color:#24292E;">  getMajor: {</span></span>
<span class="line"><span style="color:#24292E;">    returns: </span><span style="color:#032F62;">&quot;cstring&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    args: [],</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 由于这不使用dlsym()，您必须提供有效的ptr</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 该ptr可以是数字或bigint</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 无效的指针将使您的程序崩溃。</span></span>
<span class="line"><span style="color:#24292E;">    ptr: majorPtr,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  getMinor: {</span></span>
<span class="line"><span style="color:#24292E;">    returns: </span><span style="color:#032F62;">&quot;cstring&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    args: [],</span></span>
<span class="line"><span style="color:#24292E;">    ptr: minorPtr,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  getPatch: {</span></span>
<span class="line"><span style="color:#24292E;">    returns: </span><span style="color:#032F62;">&quot;cstring&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    args: [],</span></span>
<span class="line"><span style="color:#24292E;">    ptr: patchPtr,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">major</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">minor</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">patch</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">  lib.symbols.</span><span style="color:#6F42C1;">getMajor</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">  lib.symbols.</span><span style="color:#6F42C1;">getMinor</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">  lib.symbols.</span><span style="color:#6F42C1;">getPatch</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">];</span></span></code></pre></div><h2 id="回调" tabindex="-1">回调 <a class="header-anchor" href="#回调" aria-label="Permalink to &quot;回调&quot;">​</a></h2><p>使用<code>JSCallback</code>创建 JavaScript 回调函数，可以传递给 C/FFI 函数。C/FFI 函数可以调用 JavaScript 代码。这对于异步代码或每当需要从 C 代码中调用 JavaScript 代码时非常有用。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { dlopen, JSCallback, ptr, CString } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;bun:ffi&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">symbols</span><span style="color:#E1E4E8;">: { </span><span style="color:#79B8FF;">search</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">close</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dlopen</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;libmylib&quot;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  search: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    returns: </span><span style="color:#9ECBFF;">&quot;usize&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    args: [</span><span style="color:#9ECBFF;">&quot;cstring&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;callback&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">searchIterator</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JSCallback</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  (</span><span style="color:#FFAB70;">ptr</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">length</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">hello</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CString</span><span style="color:#E1E4E8;">(ptr, length)),</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    returns: </span><span style="color:#9ECBFF;">&quot;bool&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    args: [</span><span style="color:#9ECBFF;">&quot;ptr&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;usize&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Buffer.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;wwutwutwutwutwutwutwutwutwutwutut</span><span style="color:#79B8FF;">\\0</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;utf8&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">search</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">ptr</span><span style="color:#E1E4E8;">(str), searchIterator)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 找到匹配！</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 以后一些时候：</span></span>
<span class="line"><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  searchIterator.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}, </span><span style="color:#79B8FF;">5000</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { dlopen, JSCallback, ptr, CString } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;bun:ffi&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">symbols</span><span style="color:#24292E;">: { </span><span style="color:#005CC5;">search</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">close</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dlopen</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;libmylib&quot;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">  search: {</span></span>
<span class="line"><span style="color:#24292E;">    returns: </span><span style="color:#032F62;">&quot;usize&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    args: [</span><span style="color:#032F62;">&quot;cstring&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;callback&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">searchIterator</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JSCallback</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  (</span><span style="color:#E36209;">ptr</span><span style="color:#24292E;">, </span><span style="color:#E36209;">length</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#032F62;"> /hello/</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CString</span><span style="color:#24292E;">(ptr, length)),</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    returns: </span><span style="color:#032F62;">&quot;bool&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    args: [</span><span style="color:#032F62;">&quot;ptr&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;usize&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Buffer.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;wwutwutwutwutwutwutwutwutwutwutut</span><span style="color:#005CC5;">\\0</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;utf8&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">search</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">ptr</span><span style="color:#24292E;">(str), searchIterator)) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 找到匹配！</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 以后一些时候：</span></span>
<span class="line"><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  searchIterator.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}, </span><span style="color:#005CC5;">5000</span><span style="color:#24292E;">);</span></span></code></pre></div><p>在完成 JSCallback 后，应调用<code>close()</code>来释放内存。</p><blockquote><p><strong>⚡️ 性能提示</strong> — 为了稍微提高性能，请直接传递<code>JSCallback.prototype.ptr</code>，而不是<code>JSCallback</code>对象：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">onResolve</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JSCallback</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">arg</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> arg </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">42</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  returns: </span><span style="color:#9ECBFF;">&quot;bool&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  args: [</span><span style="color:#9ECBFF;">&quot;i32&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">setOnResolve</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CFunction</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  returns: </span><span style="color:#9ECBFF;">&quot;bool&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  args: [</span><span style="color:#9ECBFF;">&quot;function&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">  ptr: myNativeLibrarySetOnResolve,</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 这段代码运行稍微快一些：</span></span>
<span class="line"><span style="color:#B392F0;">setOnResolve</span><span style="color:#E1E4E8;">(onResolve.ptr);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 而不是这样：</span></span>
<span class="line"><span style="color:#B392F0;">setOnResolve</span><span style="color:#E1E4E8;">(onResolve);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">onResolve</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JSCallback</span><span style="color:#24292E;">((</span><span style="color:#E36209;">arg</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> arg </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">42</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">  returns: </span><span style="color:#032F62;">&quot;bool&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  args: [</span><span style="color:#032F62;">&quot;i32&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">setOnResolve</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CFunction</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  returns: </span><span style="color:#032F62;">&quot;bool&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  args: [</span><span style="color:#032F62;">&quot;function&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">  ptr: myNativeLibrarySetOnResolve,</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 这段代码运行稍微快一些：</span></span>
<span class="line"><span style="color:#6F42C1;">setOnResolve</span><span style="color:#24292E;">(onResolve.ptr);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 而不是这样：</span></span>
<span class="line"><span style="color:#6F42C1;">setOnResolve</span><span style="color:#24292E;">(onResolve);</span></span></code></pre></div></blockquote><h2 id="指针" tabindex="-1">指针 <a class="header-anchor" href="#指针" aria-label="Permalink to &quot;指针&quot;">​</a></h2><p>Bun 将指针表示为 JavaScript 中的<code>number</code>。</p><details><summary>64位指针如何适应JavaScript数字？</summary> 64位处理器支持多达[52位的可寻址空间](https://en.wikipedia.org/wiki/64-bit_computing#Limits_of_processors)。[JavaScript数字](https://en.wikipedia.org/wiki/Double-precision_floating-point_format#IEEE_754_double-precision_binary_floating-point_format:_binary64)支持53位可用空间，因此我们有大约11位额外的空间。 <p><strong>为什么不使用<code>BigInt</code>？</strong> <code>BigInt</code>速度较慢。JavaScript 引擎分配一个单独的<code>BigInt</code>，这意味着它们无法适应常规的 JavaScript 值。如果将<code>BigInt</code>传递给函数，它将转换为<code>number</code>。</p></details><p>要将<code>TypedArray</code>转换为指针：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ptr } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;bun:ffi&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> myTypedArray </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Uint8Array</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">32</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">myPtr</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ptr</span><span style="color:#E1E4E8;">(myTypedArray);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { ptr } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;bun:ffi&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> myTypedArray </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Uint8Array</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">32</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">myPtr</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ptr</span><span style="color:#24292E;">(myTypedArray);</span></span></code></pre></div><p>要将指针转换为<code>ArrayBuffer</code>：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ptr, toArrayBuffer } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;bun:ffi&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> myTypedArray </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Uint8Array</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">32</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">myPtr</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ptr</span><span style="color:#E1E4E8;">(myTypedArray);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// toArrayBuffer接受一个\`byteOffset\`和\`byteLength\`</span></span>
<span class="line"><span style="color:#6A737D;">// 如果未提供\`byteLength\`，则假定它是以空字符结尾的指针</span></span>
<span class="line"><span style="color:#E1E4E8;">myTypedArray </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Uint8Array</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">toArrayBuffer</span><span style="color:#E1E4E8;">(myPtr, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">32</span><span style="color:#E1E4E8;">), </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">32</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { ptr, toArrayBuffer } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;bun:ffi&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> myTypedArray </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Uint8Array</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">32</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">myPtr</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ptr</span><span style="color:#24292E;">(myTypedArray);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// toArrayBuffer接受一个\`byteOffset\`和\`byteLength\`</span></span>
<span class="line"><span style="color:#6A737D;">// 如果未提供\`byteLength\`，则假定它是以空字符结尾的指针</span></span>
<span class="line"><span style="color:#24292E;">myTypedArray </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Uint8Array</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">toArrayBuffer</span><span style="color:#24292E;">(myPtr, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">32</span><span style="color:#24292E;">), </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">32</span><span style="color:#24292E;">);</span></span></code></pre></div><p>要从指针读取数据，有两种选项。对于长期存在的指针，使用<code>DataView</code>：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { toArrayBuffer } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;bun:ffi&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> myDataView </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DataView</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">toArrayBuffer</span><span style="color:#E1E4E8;">(myPtr, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">32</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  myDataView.</span><span style="color:#B392F0;">getUint8</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">  myDataView.</span><span style="color:#B392F0;">getUint8</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">  myDataView.</span><span style="color:#B392F0;">getUint8</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">  myDataView.</span><span style="color:#B392F0;">getUint8</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { toArrayBuffer } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;bun:ffi&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> myDataView </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DataView</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">toArrayBuffer</span><span style="color:#24292E;">(myPtr, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">32</span><span style="color:#24292E;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  myDataView.</span><span style="color:#6F42C1;">getUint8</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">  myDataView.</span><span style="color:#6F42C1;">getUint8</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">  myDataView.</span><span style="color:#6F42C1;">getUint8</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">  myDataView.</span><span style="color:#6F42C1;">getUint8</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><p>对于短暂存在的指针，使用<code>read</code>：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { read } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;bun:ffi&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ptr, byteOffset</span></span>
<span class="line"><span style="color:#E1E4E8;">  read.</span><span style="color:#B392F0;">u8</span><span style="color:#E1E4E8;">(myPtr, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">  read.</span><span style="color:#B392F0;">u8</span><span style="color:#E1E4E8;">(myPtr, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">  read.</span><span style="color:#B392F0;">u8</span><span style="color:#E1E4E8;">(myPtr, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">  read.</span><span style="color:#B392F0;">u8</span><span style="color:#E1E4E8;">(myPtr, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { read } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;bun:ffi&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ptr, byteOffset</span></span>
<span class="line"><span style="color:#24292E;">  read.</span><span style="color:#6F42C1;">u8</span><span style="color:#24292E;">(myPtr, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">  read.</span><span style="color:#6F42C1;">u8</span><span style="color:#24292E;">(myPtr, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">  read.</span><span style="color:#6F42C1;">u8</span><span style="color:#24292E;">(myPtr, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">  read.</span><span style="color:#6F42C1;">u8</span><span style="color:#24292E;">(myPtr, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><p><code>read</code>函数的行为与<code>DataView</code>类似，但通常更快，因为它不需要创建<code>DataView</code>或<code>ArrayBuffer</code>。</p><p>| <code>FFIType</code> |</p><p>| <code>read</code>函数 | | ---------- | ---------- | | ptr | <code>read.ptr</code> | | i8 | <code>read.i8</code> | | i16 | <code>read.i16</code> | | i32 | <code>read.i32</code> | | i64 | <code>read.i64</code> | | u8 | <code>read.u8</code> | | u16 | <code>read.u16</code> | | u32 | <code>read.u32</code> | | u64 | <code>read.u64</code> | | f32 | <code>read.f32</code> | | f64 | <code>read.f64</code> |</p><h3 id="内存管理" tabindex="-1">内存管理 <a class="header-anchor" href="#内存管理" aria-label="Permalink to &quot;内存管理&quot;">​</a></h3><p><code>bun:ffi</code>不会为您管理内存。您必须在使用完后释放内存。</p><h4 id="从-javascript-中" tabindex="-1">从 JavaScript 中 <a class="header-anchor" href="#从-javascript-中" aria-label="Permalink to &quot;从 JavaScript 中&quot;">​</a></h4><p>如果您希望跟踪<code>TypedArray</code>何时不再从 JavaScript 中使用，可以使用<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry" target="_blank" rel="noreferrer">FinalizationRegistry</a>。</p><h4 id="从-c、rust、zig-等中" tabindex="-1">从 C、Rust、Zig 等中 <a class="header-anchor" href="#从-c、rust、zig-等中" aria-label="Permalink to &quot;从 C、Rust、Zig 等中&quot;">​</a></h4><p>如果您希望跟踪<code>TypedArray</code>何时不再从 C 或 FFI 中使用，可以向<code>toArrayBuffer</code>或<code>toBuffer</code>传递回调和可选的上下文指针。在某个以后的时间点，一旦垃圾回收器释放了底层的<code>ArrayBuffer</code> JavaScript 对象，此函数将被调用。</p><p>预期的签名与<a href="https://developer.apple.com/documentation/javascriptcore/jstypedarraybytesdeallocator?language=objc" target="_blank" rel="noreferrer">JavaScriptCore 的 C API</a>中的签名相同：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">typedef</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">JSTypedArrayBytesDeallocator)(</span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">bytes, </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">deallocatorContext);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">typedef</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">JSTypedArrayBytesDeallocator)(</span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">bytes, </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">deallocatorContext);</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { toArrayBuffer } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;bun:ffi&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用deallocatorContext：</span></span>
<span class="line"><span style="color:#B392F0;">toArrayBuffer</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  bytes,</span></span>
<span class="line"><span style="color:#E1E4E8;">  byteOffset,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  byteLength,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 这是一个可选的指向回调的指针</span></span>
<span class="line"><span style="color:#E1E4E8;">  deallocatorContext,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 这是指向函数的指针</span></span>
<span class="line"><span style="color:#E1E4E8;">  jsTypedArrayBytesDeallocator</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 没有deallocatorContext：</span></span>
<span class="line"><span style="color:#B392F0;">toArrayBuffer</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  bytes,</span></span>
<span class="line"><span style="color:#E1E4E8;">  byteOffset,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  byteLength,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 这是指向函数的指针</span></span>
<span class="line"><span style="color:#E1E4E8;">  jsTypedArrayBytesDeallocator</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { toArrayBuffer } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;bun:ffi&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用deallocatorContext：</span></span>
<span class="line"><span style="color:#6F42C1;">toArrayBuffer</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  bytes,</span></span>
<span class="line"><span style="color:#24292E;">  byteOffset,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  byteLength,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 这是一个可选的指向回调的指针</span></span>
<span class="line"><span style="color:#24292E;">  deallocatorContext,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 这是指向函数的指针</span></span>
<span class="line"><span style="color:#24292E;">  jsTypedArrayBytesDeallocator</span></span>
<span class="line"><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 没有deallocatorContext：</span></span>
<span class="line"><span style="color:#6F42C1;">toArrayBuffer</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  bytes,</span></span>
<span class="line"><span style="color:#24292E;">  byteOffset,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  byteLength,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 这是指向函数的指针</span></span>
<span class="line"><span style="color:#24292E;">  jsTypedArrayBytesDeallocator</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="内存安全" tabindex="-1">内存安全 <a class="header-anchor" href="#内存安全" aria-label="Permalink to &quot;内存安全&quot;">​</a></h3><p>极不建议在 FFI 之外使用原始指针。Bun 的将来版本可能会添加一个禁用<code>bun:ffi</code>的 CLI 标志。</p><h3 id="指针对齐" tabindex="-1">指针对齐 <a class="header-anchor" href="#指针对齐" aria-label="Permalink to &quot;指针对齐&quot;">​</a></h3><p>如果 API 期望指针大小与<code>char</code>或<code>u8</code>之类的其他内容不同，请确保<code>TypedArray</code>也具有相同的大小。<code>u64*</code>与<code>[8]u8*</code>不完全相同，因为存在对齐问题。</p><h3 id="传递指针" tabindex="-1">传递指针 <a class="header-anchor" href="#传递指针" aria-label="Permalink to &quot;传递指针&quot;">​</a></h3><p>当 FFI 函数期望指针时，传递等效大小的<code>TypedArray</code>：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { dlopen, FFIType } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;bun:ffi&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">symbols</span><span style="color:#E1E4E8;">: { </span><span style="color:#79B8FF;">encode_png</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dlopen</span><span style="color:#E1E4E8;">(myLibraryPath, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  encode_png: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// FFIType也可以作为字符串指定</span></span>
<span class="line"><span style="color:#E1E4E8;">    args: [</span><span style="color:#9ECBFF;">&quot;ptr&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;u32&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;u32&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">    returns: FFIType.ptr,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">pixels</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Uint8ClampedArray</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">128</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">128</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">pixels.</span><span style="color:#B392F0;">fill</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">254</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">pixels.</span><span style="color:#B392F0;">subarray</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">32</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">32</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">fill</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">out</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">encode_png</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// pixels将作为指针传递</span></span>
<span class="line"><span style="color:#E1E4E8;">  pixels,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">128</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">128</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { dlopen, FFIType } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;bun:ffi&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">symbols</span><span style="color:#24292E;">: { </span><span style="color:#005CC5;">encode_png</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dlopen</span><span style="color:#24292E;">(myLibraryPath, {</span></span>
<span class="line"><span style="color:#24292E;">  encode_png: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// FFIType也可以作为字符串指定</span></span>
<span class="line"><span style="color:#24292E;">    args: [</span><span style="color:#032F62;">&quot;ptr&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;u32&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;u32&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">    returns: FFIType.ptr,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">pixels</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Uint8ClampedArray</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">128</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">128</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">pixels.</span><span style="color:#6F42C1;">fill</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">254</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">pixels.</span><span style="color:#6F42C1;">subarray</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">32</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">32</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">fill</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">out</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">encode_png</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// pixels将作为指针传递</span></span>
<span class="line"><span style="color:#24292E;">  pixels,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">128</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">128</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><p><a href="https://github.com/oven-sh/bun/blob/6a65631cbdcae75bfa1e64323a6ad613a922cd1a/src/bun.js/ffi.exports.js#L180-L182" target="_blank" rel="noreferrer">自动生成的包装器</a>将指针转换为<code>TypedArray</code>。</p><details><summary>硬模式</summary><p>如果您不希望自动转换或者希望将指针指向<code>TypedArray</code>内的特定字节偏移量，您也可以直接获取指向<code>TypedArray</code>的指针：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { dlopen, FFIType, ptr } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;bun:ffi&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">symbols</span><span style="color:#E1E4E8;">: { </span><span style="color:#79B8FF;">encode_png</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dlopen</span><span style="color:#E1E4E8;">(myLibraryPath, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  encode_png: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// FFIType也可以作为字符串指定</span></span>
<span class="line"><span style="color:#E1E4E8;">    args: [</span><span style="color:#9ECBFF;">&quot;ptr&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;u32&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;u32&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">    returns: FFIType.ptr,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">pixels</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Uint8ClampedArray</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">128</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">128</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">pixels.</span><span style="color:#B392F0;">fill</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">254</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 这返回一个数字！而不是一个BigInt！</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">myPtr</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ptr</span><span style="color:#E1E4E8;">(pixels);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">out</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">encode_png</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  myPtr,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 维度：</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">128</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">128</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { dlopen, FFIType, ptr } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;bun:ffi&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">symbols</span><span style="color:#24292E;">: { </span><span style="color:#005CC5;">encode_png</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dlopen</span><span style="color:#24292E;">(myLibraryPath, {</span></span>
<span class="line"><span style="color:#24292E;">  encode_png: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// FFIType也可以作为字符串指定</span></span>
<span class="line"><span style="color:#24292E;">    args: [</span><span style="color:#032F62;">&quot;ptr&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;u32&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;u32&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">    returns: FFIType.ptr,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">pixels</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Uint8ClampedArray</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">128</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">128</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">pixels.</span><span style="color:#6F42C1;">fill</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">254</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 这返回一个数字！而不是一个BigInt！</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">myPtr</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ptr</span><span style="color:#24292E;">(pixels);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">out</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">encode_png</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  myPtr,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 维度：</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">128</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">128</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div></details><h3 id="读取指针" tabindex="-1">读取指针 <a class="header-anchor" href="#读取指针" aria-label="Permalink to &quot;读取指针&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">out</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">encode_png</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// pixels将作为指针传递</span></span>
<span class="line"><span style="color:#E1E4E8;">  pixels,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 维度：</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">128</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">128</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 假设它是以空字符结尾的，可以这样读取：</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> png </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Uint8Array</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">toArrayBuffer</span><span style="color:#E1E4E8;">(out));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 保存到磁盘：</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> Bun.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;out.png&quot;</span><span style="color:#E1E4E8;">, png);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">out</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">encode_png</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// pixels将作为指针传递</span></span>
<span class="line"><span style="color:#24292E;">  pixels,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 维度：</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">128</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">128</span></span>
<span class="line"><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 假设它是以空字符结尾的，可以这样读取：</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> png </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Uint8Array</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">toArrayBuffer</span><span style="color:#24292E;">(out));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 保存到磁盘：</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> Bun.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;out.png&quot;</span><span style="color:#24292E;">, png);</span></span></code></pre></div>`,81),t=[e];function c(r,y,E,i,d,F){return n(),a("div",null,t)}const g=s(o,[["render",c]]);export{C as __pageData,g as default};
