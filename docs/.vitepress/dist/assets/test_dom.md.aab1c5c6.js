import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.33544f09.js";const F=JSON.parse('{"title":"DOM testing","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"test/dom.md","filePath":"test/dom.md"}'),o={name:"test/dom.md"},l=p(`<h1 id="dom-testing" tabindex="-1">DOM testing <a class="header-anchor" href="#dom-testing" aria-label="Permalink to &quot;DOM testing&quot;">​</a></h1><p>Bun 的测试运行器与现有的组件和 DOM 测试库（包括 React Testing Library 和<a href="https://github.com/capricorn86/happy-dom" target="_blank" rel="noreferrer">Happy DOM</a>）很好地协作。</p><h2 id="happy-dom" tabindex="-1">Happy DOM <a class="header-anchor" href="#happy-dom" aria-label="Permalink to &quot;Happy DOM&quot;">​</a></h2><p>如果要为前端代码和组件编写无头测试，我们建议使用<a href="https://github.com/capricorn86/happy-dom" target="_blank" rel="noreferrer">Happy DOM</a>。Happy DOM 在纯 JavaScript 中实现了一套完整的 HTML 和 DOM API，使得可以以高度逼真的方式模拟浏览器环境。</p><p>要开始使用 Happy DOM，请将<code>@happy-dom/global-registrator</code>包安装为开发依赖项。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bun</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-d</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">@happy-dom/global-registrator</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bun</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-d</span><span style="color:#24292E;"> </span><span style="color:#032F62;">@happy-dom/global-registrator</span></span></code></pre></div><p>我们将使用 Bun 的预加载功能来在运行测试之前注册<code>happy-dom</code>全局。这一步将使浏览器 API（如<code>document</code>）在全局范围内可用。在项目的根目录中创建一个名为<code>happydom.ts</code>的文件，并添加以下代码：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { GlobalRegistrator } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;@happy-dom/global-registrator&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">GlobalRegistrator.</span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { GlobalRegistrator } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;@happy-dom/global-registrator&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">GlobalRegistrator.</span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">();</span></span></code></pre></div><p>要在运行<code>bun test</code>之前预加载此文件，请打开或创建一个<code>bunfig.toml</code>文件，并添加以下行。</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">preload = </span><span style="color:#9ECBFF;">&quot;./happydom.ts&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">preload = </span><span style="color:#032F62;">&quot;./happydom.ts&quot;</span></span></code></pre></div><p>这将在运行<code>bun test</code>时执行<code>happydom.ts</code>。现在，您可以编写使用浏览器 API（如<code>document</code>和<code>window</code>）的测试。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">#dom.test.ts</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> {test, expect} </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;bun:test&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;dom test&#39;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  document.body.innerHTML </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`&lt;button&gt;My button&lt;/button&gt;\`</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">querySelector</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;button&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(button?.innerText).</span><span style="color:#B392F0;">toEqual</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;My button&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">#dom.test.ts</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> {test, expect} </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;bun:test&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;dom test&#39;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  document.body.innerHTML </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`&lt;button&gt;My button&lt;/button&gt;\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">button</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">querySelector</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;button&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(button?.innerText).</span><span style="color:#6F42C1;">toEqual</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;My button&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>根据您的<code>tsconfig.json</code>设置，您可能会在上面的代码中看到一个<code>&quot;Cannot find name &#39;document&#39;&quot;</code>类型错误。为了为<code>document</code>和其他浏览器 API“注入”类型，向任何测试文件的顶部添加以下<a href="https://www.typescriptlang.org/docs/handbook/triple-slash-directives.html" target="_blank" rel="noreferrer">三斜线指令</a>。</p><div class="language-ts-diff vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts-diff</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">#dom.test.ts</span></span>
<span class="line"><span style="color:#e1e4e8;">+ /// &lt;reference lib=&quot;dom&quot; /&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">  import {test, expect} from &#39;bun:test&#39;;</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">  test(&#39;dom test&#39;, () =&gt; {</span></span>
<span class="line"><span style="color:#e1e4e8;">    document.body.innerHTML = \`&lt;button&gt;My button&lt;/button&gt;\`;</span></span>
<span class="line"><span style="color:#e1e4e8;">    const button = document.querySelector(&#39;button&#39;);</span></span>
<span class="line"><span style="color:#e1e4e8;">    expect(button?.innerText).toEqual(&#39;My button&#39;);</span></span>
<span class="line"><span style="color:#e1e4e8;">  });</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">#dom.test.ts</span></span>
<span class="line"><span style="color:#24292e;">+ /// &lt;reference lib=&quot;dom&quot; /&gt;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">  import {test, expect} from &#39;bun:test&#39;;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">  test(&#39;dom test&#39;, () =&gt; {</span></span>
<span class="line"><span style="color:#24292e;">    document.body.innerHTML = \`&lt;button&gt;My button&lt;/button&gt;\`;</span></span>
<span class="line"><span style="color:#24292e;">    const button = document.querySelector(&#39;button&#39;);</span></span>
<span class="line"><span style="color:#24292e;">    expect(button?.innerText).toEqual(&#39;My button&#39;);</span></span>
<span class="line"><span style="color:#24292e;">  });</span></span></code></pre></div><p>让我们使用<code>bun test</code>运行这个测试：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bun</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span></span>
<span class="line"><span style="color:#B392F0;">bun</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">v1.x</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">dom.test.ts:</span></span>
<span class="line"><span style="color:#B392F0;">✓</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">dom</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> [0.82ms]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pass</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">fail</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">expect</span><span style="color:#E1E4E8;">() </span><span style="color:#9ECBFF;">calls</span></span>
<span class="line"><span style="color:#B392F0;">Ran</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">tests</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">across</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">files.</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">total</span><span style="color:#E1E4E8;"> [125.00ms]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bun</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span></span>
<span class="line"><span style="color:#6F42C1;">bun</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">v1.x</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">dom.test.ts:</span></span>
<span class="line"><span style="color:#6F42C1;">✓</span><span style="color:#24292E;"> </span><span style="color:#032F62;">dom</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> [0.82ms]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pass</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">0</span><span style="color:#24292E;"> </span><span style="color:#032F62;">fail</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">expect</span><span style="color:#24292E;">() </span><span style="color:#032F62;">calls</span></span>
<span class="line"><span style="color:#6F42C1;">Ran</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tests</span><span style="color:#24292E;"> </span><span style="color:#032F62;">across</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">files.</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">total</span><span style="color:#24292E;"> [125.00ms]</span></span></code></pre></div>`,16),e=[l];function t(c,r,y,E,i,d){return n(),a("div",null,e)}const b=s(o,[["render",t]]);export{F as __pageData,b as default};
