import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.33544f09.js";const F=JSON.parse('{"title":"Utils","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"api/utils.md","filePath":"api/utils.md"}'),p={name:"api/utils.md"},o=l(`<h1 id="utils" tabindex="-1">Utils <a class="header-anchor" href="#utils" aria-label="Permalink to &quot;Utils&quot;">​</a></h1><h2 id="bun-version" tabindex="-1"><code>Bun.version</code> <a class="header-anchor" href="#bun-version" aria-label="Permalink to &quot;\`Bun.version\`&quot;">​</a></h2><p>一个包含当前运行的 <code>bun</code> CLI 版本的字符串。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Bun.version;</span></span>
<span class="line"><span style="color:#6A737D;">// =&gt; &quot;0.6.4&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Bun.version;</span></span>
<span class="line"><span style="color:#6A737D;">// =&gt; &quot;0.6.4&quot;</span></span></code></pre></div><h2 id="bun-revision" tabindex="-1"><code>Bun.revision</code> <a class="header-anchor" href="#bun-revision" aria-label="Permalink to &quot;\`Bun.revision\`&quot;">​</a></h2><p><a href="https://github.com/oven-sh/bun" target="_blank" rel="noreferrer">Bun</a> 的 git 提交版本，用于创建当前的 <code>bun</code> CLI。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Bun.revision;</span></span>
<span class="line"><span style="color:#6A737D;">// =&gt; &quot;f02561530fda1ee9396f51c8bc99b38716e38296&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Bun.revision;</span></span>
<span class="line"><span style="color:#6A737D;">// =&gt; &quot;f02561530fda1ee9396f51c8bc99b38716e38296&quot;</span></span></code></pre></div><h2 id="bun-env" tabindex="-1"><code>Bun.env</code> <a class="header-anchor" href="#bun-env" aria-label="Permalink to &quot;\`Bun.env\`&quot;">​</a></h2><p><code>p<wbr>rocess.env</code> 的别名。</p><h2 id="bun-main" tabindex="-1"><code>Bun.main</code> <a class="header-anchor" href="#bun-main" aria-label="Permalink to &quot;\`Bun.main\`&quot;">​</a></h2><p>当前程序入口的绝对路径（使用 <code>bun run</code> 执行的文件）。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Bun.main;</span></span>
<span class="line"><span style="color:#6A737D;">// /path/to/script.ts</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Bun.main;</span></span>
<span class="line"><span style="color:#6A737D;">// /path/to/script.ts</span></span></code></pre></div><p>这对于确定脚本是直接执行还是被另一个脚本导入很有用。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">meta</span><span style="color:#E1E4E8;">.path </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> Bun.main) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 这个脚本是直接执行的</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 这个文件被另一个脚本导入</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">import</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">meta</span><span style="color:#24292E;">.path </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> Bun.main) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 这个脚本是直接执行的</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 这个文件被另一个脚本导入</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这类似于 Node.js 中的 <a href="https://stackoverflow.com/questions/6398196/detect-if-called-through-require-or-directly-by-command-line" target="_blank" rel="noreferrer"><code>require.main = module</code> 技巧</a>。</p><h2 id="bun-sleep" tabindex="-1"><code>Bun.sleep()</code> <a class="header-anchor" href="#bun-sleep" aria-label="Permalink to &quot;\`Bun.sleep()\`&quot;">​</a></h2><p><code>Bun.sleep(ms: number)</code></p><p>返回一个在指定毫秒数后解析的 <code>Promise</code>。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;你好&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> Bun.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;一秒后你好！&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;你好&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> Bun.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;一秒后你好！&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>或者，传递一个 <code>Date</code> 对象以接收在那个时间点解析的 <code>Promise</code>。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">未来的一秒</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Date</span><span style="color:#E1E4E8;">(Date.</span><span style="color:#B392F0;">now</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;你好&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> Bun.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(未来的一秒);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;一秒后你好！&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">未来的一秒</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">(Date.</span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;你好&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> Bun.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(未来的一秒);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;一秒后你好！&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><h2 id="bun-sleepsync" tabindex="-1"><code>Bun.sleepSync()</code> <a class="header-anchor" href="#bun-sleepsync" aria-label="Permalink to &quot;\`Bun.sleepSync()\`&quot;">​</a></h2><p><code>Bun.sleepSync(ms: number)</code></p><p><code>Bun.sleep</code> 的阻塞同步版本。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;你好&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">Bun.</span><span style="color:#B392F0;">sleepSync</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 阻塞线程一秒钟</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;一秒后你好！&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;你好&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">Bun.</span><span style="color:#6F42C1;">sleepSync</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 阻塞线程一秒钟</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;一秒后你好！&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><h2 id="bun-which" tabindex="-1"><code>Bun.which()</code> <a class="header-anchor" href="#bun-which" aria-label="Permalink to &quot;\`Bun.which()\`&quot;">​</a></h2><p><code>Bun.which(bin: string)</code></p><p>返回可执行文件的路径，类似于在终端中输入 <code>which</code>。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ls</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Bun.</span><span style="color:#B392F0;">which</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ls&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(ls); </span><span style="color:#6A737D;">// &quot;/usr/bin/ls&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ls</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Bun.</span><span style="color:#6F42C1;">which</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ls&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(ls); </span><span style="color:#6A737D;">// &quot;/usr/bin/ls&quot;</span></span></code></pre></div><p>默认情况下，Bun 查看当前的 <code>PATH</code> 环境变量来确定路径。要配置 <code>PATH</code>：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ls</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Bun.</span><span style="color:#B392F0;">which</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ls&quot;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  PATH: </span><span style="color:#9ECBFF;">&quot;/usr/local/bin:/usr/bin:/bin&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(ls); </span><span style="color:#6A737D;">// &quot;/usr/bin/ls&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ls</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Bun.</span><span style="color:#6F42C1;">which</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ls&quot;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">  PATH: </span><span style="color:#032F62;">&quot;/usr/local/bin:/usr/bin:/bin&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(ls); </span><span style="color:#6A737D;">// &quot;/usr/bin/ls&quot;</span></span></code></pre></div><p>通过传递一个 <code>cwd</code> 选项来从特定目录解析可执行文件。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ls</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Bun.</span><span style="color:#B392F0;">which</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ls&quot;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  cwd: </span><span style="color:#9ECBFF;">&quot;/tmp&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  PATH: </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(ls); </span><span style="color:#6A737D;">// null</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ls</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Bun.</span><span style="color:#6F42C1;">which</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ls&quot;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">  cwd: </span><span style="color:#032F62;">&quot;/tmp&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  PATH: </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(ls); </span><span style="color:#6A737D;">// null</span></span></code></pre></div><h2 id="bun-peek" tabindex="-1"><code>Bun.peek()</code> <a class="header-anchor" href="#bun-peek" aria-label="Permalink to &quot;\`Bun.peek()\`&quot;">​</a></h2><p><code>Bun.peek(prom: Promise)</code></p><p>在 <code>await</code> 或 <code>.then</code> 之前读取 Promise 的结果，但仅当 Promise 已经完成或拒绝时。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { peek } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;bun&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">promise</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;你好&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 无需 await！</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">peek</span><span style="color:#E1E4E8;">(promise);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(result); </span><span style="color:#6A737D;">// &quot;你好&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { peek } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;bun&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">promise</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;你好&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 无需 await！</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">result</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">peek</span><span style="color:#24292E;">(promise);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(result); </span><span style="color:#6A737D;">// &quot;你好&quot;</span></span></code></pre></div><p>这在尝试减少性能敏感代码中不必要的微任务数时很重要。这是一个高级 API，除非你知道自己在做什么，否则最好不要使用它。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { peek } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;bun&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { expect, test } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;bun:test&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;peek&quot;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">promise</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 不需要 await！</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">peek</span><span style="color:#E1E4E8;">(promise)).</span><span style="color:#B392F0;">toBe</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果我们再次 peek，它将返回相同的值</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">again</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">peek</span><span style="color:#E1E4E8;">(promise);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(again).</span><span style="color:#B392F0;">toBe</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果我们 peek 一个非 Promise，它将返回该值</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">peek</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">42</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(value).</span><span style="color:#B392F0;">toBe</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">42</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果我们 peek 一个挂起的 Promise，它将再次返回 Promise</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">pending</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {});</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">peek</span><span style="color:#E1E4E8;">(pending)).</span><span style="color:#B392F0;">toBe</span><span style="color:#E1E4E8;">(pending);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果我们 peek 一个拒绝的 Promise，它将：</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// - 返回错误</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// - 不标记 Promise 为已处理</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">rejected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">reject</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;成功测试 Promise 拒绝&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">peek</span><span style="color:#E1E4E8;">(rejected).message).</span><span style="color:#B392F0;">toBe</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;成功测试 Promise 拒绝&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { peek } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;bun&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { expect, test } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;bun:test&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;peek&quot;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">promise</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 不需要 await！</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">peek</span><span style="color:#24292E;">(promise)).</span><span style="color:#6F42C1;">toBe</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 如果我们再次 peek，它将返回相同的值</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">again</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">peek</span><span style="color:#24292E;">(promise);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(again).</span><span style="color:#6F42C1;">toBe</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 如果我们 peek 一个非 Promise，它将返回该值</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">peek</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">42</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(value).</span><span style="color:#6F42C1;">toBe</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">42</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 如果我们 peek 一个挂起的 Promise，它将再次返回 Promise</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">pending</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {});</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">peek</span><span style="color:#24292E;">(pending)).</span><span style="color:#6F42C1;">toBe</span><span style="color:#24292E;">(pending);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 如果我们 peek 一个拒绝的 Promise，它将：</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// - 返回错误</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// - 不标记 Promise 为已处理</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">rejected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">reject</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;成功测试 Promise 拒绝&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">peek</span><span style="color:#24292E;">(rejected).message).</span><span style="color:#6F42C1;">toBe</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;成功测试 Promise 拒绝&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p><code>peek.status</code> 函数允许你读取 Promise 的状态而不解析它。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { peek } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;bun&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { expect, test } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;bun:test&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;peek.status&quot;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">promise</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(peek.</span><span style="color:#B392F0;">status</span><span style="color:#E1E4E8;">(promise)).</span><span style="color:#B392F0;">toBe</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;fulfilled&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">pending</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {});</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(peek.</span><span style="color:#B392F0;">status</span><span style="color:#E1E4E8;">(pending)).</span><span style="color:#B392F0;">toBe</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;pending&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">rejected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">reject</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;哦不&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(peek.</span><span style="color:#B392F0;">status</span><span style="color:#E1E4E8;">(rejected)).</span><span style="color:#B392F0;">toBe</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;rejected&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { peek } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;bun&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { expect, test } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;bun:test&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;peek.status&quot;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">promise</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(peek.</span><span style="color:#6F42C1;">status</span><span style="color:#24292E;">(promise)).</span><span style="color:#6F42C1;">toBe</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;fulfilled&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">pending</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {});</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(peek.</span><span style="color:#6F42C1;">status</span><span style="color:#24292E;">(pending)).</span><span style="color:#6F42C1;">toBe</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;pending&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">rejected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">reject</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;哦不&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(peek.</span><span style="color:#6F42C1;">status</span><span style="color:#24292E;">(rejected)).</span><span style="color:#6F42C1;">toBe</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;rejected&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><h2 id="bun-openineditor" tabindex="-1"><code>Bun.openInEditor()</code> <a class="header-anchor" href="#bun-openineditor" aria-label="Permalink to &quot;\`Bun.openInEditor()\`&quot;">​</a></h2><p>在默认编辑器中打开文件。Bun 通过 <code>$VISUAL</code> 或 <code>$EDITOR</code> 环境变量自动检测你的编辑器。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">当前文件</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">meta</span><span style="color:#E1E4E8;">.url;</span></span>
<span class="line"><span style="color:#E1E4E8;">Bun.</span><span style="color:#B392F0;">openInEditor</span><span style="color:#E1E4E8;">(当前文件);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">当前文件</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">import</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">meta</span><span style="color:#24292E;">.url;</span></span>
<span class="line"><span style="color:#24292E;">Bun.</span><span style="color:#6F42C1;">openInEditor</span><span style="color:#24292E;">(当前文件);</span></span></code></pre></div><p>你可以通过 <code>bunfig.toml</code> 中的 <code>debug.editor</code> 设置来覆盖这一点。</p><div class="language-toml-diff#bunfig.toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml-diff#bunfig.toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">+ [debug]</span></span>
<span class="line"><span style="color:#e1e4e8;">+ editor = &quot;code&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">+ [debug]</span></span>
<span class="line"><span style="color:#24292e;">+ editor = &quot;code&quot;</span></span></code></pre></div><p>或者使用 <code>editor</code> 参数指定一个编辑器。你还可以指定行号和列号。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Bun.</span><span style="color:#B392F0;">openInEditor</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">meta</span><span style="color:#E1E4E8;">.url, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  editor: </span><span style="color:#9ECBFF;">&quot;vscode&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 或 &quot;subl&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  line: </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  column: </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Bun.</span><span style="color:#6F42C1;">openInEditor</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">import</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">meta</span><span style="color:#24292E;">.url, {</span></span>
<span class="line"><span style="color:#24292E;">  editor: </span><span style="color:#032F62;">&quot;vscode&quot;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 或 &quot;subl&quot;</span></span>
<span class="line"><span style="color:#24292E;">  line: </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  column: </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><h2 id="bun-arraybuffersink" tabindex="-1"><code>Bun.ArrayBufferSink</code> <a class="header-anchor" href="#bun-arraybuffersink" aria-label="Permalink to &quot;\`Bun.ArrayBufferSink\`&quot;">​</a></h2><h2 id="bun-deepequals" tabindex="-1"><code>Bun.deepEquals()</code> <a class="header-anchor" href="#bun-deepequals" aria-label="Permalink to &quot;\`Bun.deepEquals()\`&quot;">​</a></h2><p>递归检查两个对象是否等价。这在 <code>bun:test</code> 中的 <code>expect().toEqual()</code> 内部使用。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">foo</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { a: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, b: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, c: { d: </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> } };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">Bun.</span><span style="color:#B392F0;">deepEquals</span><span style="color:#E1E4E8;">(foo, { a: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, b: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, c: { d: </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> } });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">Bun.</span><span style="color:#B392F0;">deepEquals</span><span style="color:#E1E4E8;">(foo, { a: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, b: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, c: { d: </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> } });</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">foo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { a: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, b: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, c: { d: </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> } };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">Bun.</span><span style="color:#6F42C1;">deepEquals</span><span style="color:#24292E;">(foo, { a: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, b: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, c: { d: </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> } });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">Bun.</span><span style="color:#6F42C1;">deepEquals</span><span style="color:#24292E;">(foo, { a: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, b: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, c: { d: </span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> } });</span></span></code></pre></div><p>可以使用第三个布尔参数启用 &quot;strict&quot; 模式。这由测试运行器中的 <code>expect().toStrictEqual()</code> 使用。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { entries: [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">] };</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">b</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { entries: [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">], extra: </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">Bun.</span><span style="color:#B392F0;">deepEquals</span><span style="color:#E1E4E8;">(a, b); </span><span style="color:#6A737D;">// =&gt; true</span></span>
<span class="line"><span style="color:#E1E4E8;">Bun.</span><span style="color:#B392F0;">deepEquals</span><span style="color:#E1E4E8;">(a, b, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// =&gt; false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">a</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { entries: [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">] };</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">b</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { entries: [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">], extra: </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Bun.</span><span style="color:#6F42C1;">deepEquals</span><span style="color:#24292E;">(a, b); </span><span style="color:#6A737D;">// =&gt; true</span></span>
<span class="line"><span style="color:#24292E;">Bun.</span><span style="color:#6F42C1;">deepEquals</span><span style="color:#24292E;">(a, b, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// =&gt; false</span></span></code></pre></div><p>在严格模式下，以下内容被视为不等：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 未定义的值</span></span>
<span class="line"><span style="color:#E1E4E8;">Bun.</span><span style="color:#B392F0;">deepEquals</span><span style="color:#E1E4E8;">({}, { a: </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;"> }, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 数组中的 undefined</span></span>
<span class="line"><span style="color:#E1E4E8;">Bun.</span><span style="color:#B392F0;">deepEquals</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;asdf&quot;</span><span style="color:#E1E4E8;">], [</span><span style="color:#9ECBFF;">&quot;asdf&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">], </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 稀疏数组</span></span>
<span class="line"><span style="color:#E1E4E8;">Bun.</span><span style="color:#B392F0;">deepEquals</span><span style="color:#E1E4E8;">([, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">], [</span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">], </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 对象字面量与具有相同属性的实例</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Foo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">Bun.</span><span style="color:#B392F0;">deepEquals</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Foo</span><span style="color:#E1E4E8;">(), { a: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> }, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 未定义的值</span></span>
<span class="line"><span style="color:#24292E;">Bun.</span><span style="color:#6F42C1;">deepEquals</span><span style="color:#24292E;">({}, { a: </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;"> }, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 数组中的 undefined</span></span>
<span class="line"><span style="color:#24292E;">Bun.</span><span style="color:#6F42C1;">deepEquals</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&quot;asdf&quot;</span><span style="color:#24292E;">], [</span><span style="color:#032F62;">&quot;asdf&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">], </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 稀疏数组</span></span>
<span class="line"><span style="color:#24292E;">Bun.</span><span style="color:#6F42C1;">deepEquals</span><span style="color:#24292E;">([, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">], [</span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">], </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 对象字面量与具有相同属性的实例</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Foo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">a</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">Bun.</span><span style="color:#6F42C1;">deepEquals</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Foo</span><span style="color:#24292E;">(), { a: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> }, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// false</span></span></code></pre></div><h2 id="bun-escapehtml" tabindex="-1"><code>Bun.escapeHTML()</code> <a class="header-anchor" href="#bun-escapehtml" aria-label="Permalink to &quot;\`Bun.escapeHTML()\`&quot;">​</a></h2><p><code>Bun.escapeHTML(value: string | object | number | boolean): string</code></p><p>从输入字符串中转义以下字符：</p><ul><li><code>&quot;</code> 变成 <code>&quot;&amp;quot;&quot;</code></li><li><code>&amp;</code> 变成 <code>&quot;&amp;amp;&quot;</code></li><li><code>&#39;</code> 变成 <code>&quot;&amp;#x27;&quot;</code></li><li><code>&lt;</code> 变成 <code>&quot;&amp;lt;&quot;</code></li><li><code>&gt;</code> 变成 <code>&quot;&amp;gt;&quot;</code></li></ul><p>这个函数针对大量输入进行了优化。在 M1X 上，它的处理速度为每秒 480 MB 到 20 GB，取决于正在转义多少数据以及是否有非 ASCII 文本。非字符串类型将在转义之前转换为字符串。</p><h2 id="bun-fileurltopath" tabindex="-1"><code>Bun.fileURLToPath()</code> <a class="header-anchor" href="#bun-fileurltopath" aria-label="Permalink to &quot;\`Bun.fileURLToPath()\`&quot;">​</a></h2><p>将 <code>file://</code> URL 转换为绝对路径。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Bun.</span><span style="color:#B392F0;">fileURLToPath</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URL</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;file:///foo/bar.txt&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(path); </span><span style="color:#6A737D;">// &quot;/foo/bar.txt&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">path</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Bun.</span><span style="color:#6F42C1;">fileURLToPath</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URL</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;file:///foo/bar.txt&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(path); </span><span style="color:#6A737D;">// &quot;/foo/bar.txt&quot;</span></span></code></pre></div><h2 id="bun-pathtofileurl" tabindex="-1"><code>Bun.pathToFileURL()</code> <a class="header-anchor" href="#bun-pathtofileurl" aria-label="Permalink to &quot;\`Bun.pathToFileURL()\`&quot;">​</a></h2><p>将绝对路径转换为 <code>file://</code> URL。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">url</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Bun.</span><span style="color:#B392F0;">pathToFileURL</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/foo/bar.txt&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(url); </span><span style="color:#6A737D;">// &quot;file:///foo/bar.txt&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">url</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Bun.</span><span style="color:#6F42C1;">pathToFileURL</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/foo/bar.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(url); </span><span style="color:#6A737D;">// &quot;file:///foo/bar.txt&quot;</span></span></code></pre></div><h2 id="bun-gzipsync" tabindex="-1"><code>Bun.gzipSync()</code> <a class="header-anchor" href="#bun-gzipsync" aria-label="Permalink to &quot;\`Bun.gzipSync()\`&quot;">​</a></h2><p>使用 zlib 的 GZIP 算法压缩 <code>Uint8Array</code>。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">buf</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Buffer.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">repeat</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">// Buffer 扩展 Uint8Array</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">compressed</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Bun.</span><span style="color:#B392F0;">gzipSync</span><span style="color:#E1E4E8;">(buf);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">buf; </span><span style="color:#6A737D;">// =&gt; Uint8Array(500)</span></span>
<span class="line"><span style="color:#E1E4E8;">compressed; </span><span style="color:#6A737D;">// =&gt; Uint8Array(30)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">buf</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Buffer.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">repeat</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// Buffer 扩展 Uint8Array</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">compressed</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Bun.</span><span style="color:#6F42C1;">gzipSync</span><span style="color:#24292E;">(buf);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">buf; </span><span style="color:#6A737D;">// =&gt; Uint8Array(500)</span></span>
<span class="line"><span style="color:#24292E;">compressed; </span><span style="color:#6A737D;">// =&gt; Uint8Array(30)</span></span></code></pre></div><p>可选地，作为第二个参数传递一个参数对象：</p><details><summary>zlib 压缩选项</summary> \`\`\`ts export type ZlibCompressionOptions = { /** * 要使用的压缩级别。必须在 \`-1\` 和 \`9\` 之间。 * - \`-1\` 使用默认压缩级别（当前为 \`6\`） * - \`0\` 不压缩 * - \`1\` 最低压缩，速度最快 * - \`9\` 最佳压缩，速度最慢 */ level?: -1 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9; /** * 为内部压缩状态分配的内存量。 * * \`1\` 使用最少内存，但速度慢且降低了压缩比。 * * \`9\` 使用最大内存以获得最佳速度。默认值为 \`8\`。 */ memLevel?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9; /** * 窗口大小的以 2 为底的对数（历史缓冲区的大小）。 * * 较大的值会增加内存使用量，但会提高压缩比。 * * 支持以下值范围： * - \`9..15\`：输出将具有 zlib 标头和尾部（Deflate） * - \`-9..-15\`：输出将**不会**具有 zlib 标头或尾部（原始 Deflate） * - \`25..31\`（16+\`9..15\`）：输出将具有 gzip 标头和尾部（gzip） * * gzip 标头将不包含文件名、额外数据、注释、修改时间（设置为零）和头部 CRC。 */ windowBits?: | -9 | -10 | -11 | -12 | -13 | -14 | -15 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 25 | 26 | 27 | 28 | 29 | 30 | 31; /** * 调整压缩算法。 * * - \`Z_DEFAULT_STRATEGY\`：用于正常数据 **（默认）** * - \`Z_FILTERED\`：用于由过滤器或预测器生成的数据 * - \`Z_HUFFMAN_ONLY\`：强制仅使用 Huffman 编码（没有字符串匹配） * - \`Z_RLE\`：限制匹配距离为一（游程编码） * - \`Z_FIXED\` 阻止使用动态 Huffman 编码 * * \`Z_RLE\` 设计得几乎与 \`Z_HUFFMAN_ONLY\` 一样快，但对于 PNG 图像数据提供更好的压缩。 * * \`Z_FILTERED\` 强制更多的哈夫曼编码和更少的字符串匹配，它在 \`Z_DEFAULT_STRATEGY\` 和 \`Z_HUFFMAN_ONLY\` 之间是中间的。 * 过滤数据主要由小值组成，具有稍微随机的分布。 */ strategy?: number; }; \`\`\` </details><h2 id="bun-gunzipsync" tabindex="-1"><code>Bun.gunzipSync()</code> <a class="header-anchor" href="#bun-gunzipsync" aria-label="Permalink to &quot;\`Bun.gunzipSync()\`&quot;">​</a></h2><p>使用 zlib 的 GUNZIP 算法解压缩 <code>Uint8Array</code>。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">buf</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Buffer.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">repeat</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">// Buffer 扩展 Uint8</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">Array;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">compressed</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Bun.</span><span style="color:#B392F0;">gunzipSync</span><span style="color:#E1E4E8;">(buf);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">dec</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TextDecoder</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">uncompressed</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Bun.</span><span style="color:#B392F0;">inflateSync</span><span style="color:#E1E4E8;">(compressed);</span></span>
<span class="line"><span style="color:#E1E4E8;">dec.</span><span style="color:#B392F0;">decode</span><span style="color:#E1E4E8;">(uncompressed);</span></span>
<span class="line"><span style="color:#6A737D;">// =&gt; &quot;hellohellohello...&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">buf</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Buffer.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">repeat</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// Buffer 扩展 Uint8</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Array;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">compressed</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Bun.</span><span style="color:#6F42C1;">gunzipSync</span><span style="color:#24292E;">(buf);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">dec</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TextDecoder</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">uncompressed</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Bun.</span><span style="color:#6F42C1;">inflateSync</span><span style="color:#24292E;">(compressed);</span></span>
<span class="line"><span style="color:#24292E;">dec.</span><span style="color:#6F42C1;">decode</span><span style="color:#24292E;">(uncompressed);</span></span>
<span class="line"><span style="color:#6A737D;">// =&gt; &quot;hellohellohello...&quot;</span></span></code></pre></div><h2 id="bun-deflatesync" tabindex="-1"><code>Bun.deflateSync()</code> <a class="header-anchor" href="#bun-deflatesync" aria-label="Permalink to &quot;\`Bun.deflateSync()\`&quot;">​</a></h2><p>使用 zlib 的 DEFLATE 算法压缩 <code>Uint8Array</code>。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">buf</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Buffer.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">repeat</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">compressed</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Bun.</span><span style="color:#B392F0;">deflateSync</span><span style="color:#E1E4E8;">(buf);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">buf; </span><span style="color:#6A737D;">// =&gt; Uint8Array(25)</span></span>
<span class="line"><span style="color:#E1E4E8;">compressed; </span><span style="color:#6A737D;">// =&gt; Uint8Array(10)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">buf</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Buffer.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">repeat</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">compressed</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Bun.</span><span style="color:#6F42C1;">deflateSync</span><span style="color:#24292E;">(buf);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">buf; </span><span style="color:#6A737D;">// =&gt; Uint8Array(25)</span></span>
<span class="line"><span style="color:#24292E;">compressed; </span><span style="color:#6A737D;">// =&gt; Uint8Array(10)</span></span></code></pre></div><p>第二个参数支持与 <a href="#bun.gzipSync"><code>Bun.gzipSync</code></a> 相同的一组配置选项。</p><h2 id="bun-inflatesync" tabindex="-1"><code>Bun.inflateSync()</code> <a class="header-anchor" href="#bun-inflatesync" aria-label="Permalink to &quot;\`Bun.inflateSync()\`&quot;">​</a></h2><p>使用 zlib 的 INFLATE 算法解压缩 <code>Uint8Array</code>。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">buf</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Buffer.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">repeat</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">compressed</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Bun.</span><span style="color:#B392F0;">deflateSync</span><span style="color:#E1E4E8;">(buf);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">dec</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TextDecoder</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">decompressed</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Bun.</span><span style="color:#B392F0;">inflateSync</span><span style="color:#E1E4E8;">(compressed);</span></span>
<span class="line"><span style="color:#E1E4E8;">dec.</span><span style="color:#B392F0;">decode</span><span style="color:#E1E4E8;">(decompressed);</span></span>
<span class="line"><span style="color:#6A737D;">// =&gt; &quot;hellohellohello...&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">buf</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Buffer.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">repeat</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">compressed</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Bun.</span><span style="color:#6F42C1;">deflateSync</span><span style="color:#24292E;">(buf);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">dec</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TextDecoder</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">decompressed</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Bun.</span><span style="color:#6F42C1;">inflateSync</span><span style="color:#24292E;">(compressed);</span></span>
<span class="line"><span style="color:#24292E;">dec.</span><span style="color:#6F42C1;">decode</span><span style="color:#24292E;">(decompressed);</span></span>
<span class="line"><span style="color:#6A737D;">// =&gt; &quot;hellohellohello...&quot;</span></span></code></pre></div><h2 id="bun-inspect" tabindex="-1"><code>Bun.inspect()</code> <a class="header-anchor" href="#bun-inspect" aria-label="Permalink to &quot;\`Bun.inspect()\`&quot;">​</a></h2><p>将对象序列化为与 <code>console.log</code> 打印的字符串完全相同的 <code>string</code>。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">obj</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { foo: </span><span style="color:#9ECBFF;">&quot;bar&quot;</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Bun.</span><span style="color:#B392F0;">inspect</span><span style="color:#E1E4E8;">(obj);</span></span>
<span class="line"><span style="color:#6A737D;">// =&gt; &#39;{\\nfoo: &quot;bar&quot; \\n}&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">arr</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Uint8Array</span><span style="color:#E1E4E8;">([</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Bun.</span><span style="color:#B392F0;">inspect</span><span style="color:#E1E4E8;">(arr);</span></span>
<span class="line"><span style="color:#6A737D;">// =&gt; &quot;Uint8Array(3) [ 1, 2, 3 ]&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">obj</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { foo: </span><span style="color:#032F62;">&quot;bar&quot;</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Bun.</span><span style="color:#6F42C1;">inspect</span><span style="color:#24292E;">(obj);</span></span>
<span class="line"><span style="color:#6A737D;">// =&gt; &#39;{\\nfoo: &quot;bar&quot; \\n}&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">arr</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Uint8Array</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Bun.</span><span style="color:#6F42C1;">inspect</span><span style="color:#24292E;">(arr);</span></span>
<span class="line"><span style="color:#6A737D;">// =&gt; &quot;Uint8Array(3) [ 1, 2, 3 ]&quot;</span></span></code></pre></div><h2 id="bun-inspect-custom" tabindex="-1"><code>Bun.inspect.custom</code> <a class="header-anchor" href="#bun-inspect-custom" aria-label="Permalink to &quot;\`Bun.inspect.custom\`&quot;">​</a></h2><p>这是 Bun 用于实现 <code>Bun.inspect</code> 的符号。你可以重写它以自定义如何打印你的对象。它与 Node.js 中的 <code>util.inspect.custom</code> 完全相同。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Foo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  [Bun.inspect.custom]() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;foo&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">foo</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Foo</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(foo); </span><span style="color:#6A737D;">// =&gt; &quot;foo&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Foo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  [Bun.inspect.custom]() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">foo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Foo</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(foo); </span><span style="color:#6A737D;">// =&gt; &quot;foo&quot;</span></span></code></pre></div><h2 id="bun-nanoseconds" tabindex="-1"><code>Bun.nanoseconds()</code> <a class="header-anchor" href="#bun-nanoseconds" aria-label="Permalink to &quot;\`Bun.nanoseconds()\`&quot;">​</a></h2><p>以 <code>number</code> 形式返回自当前 <code>bun</code> 进程启动以来的纳秒数。对于高精度计时和基准测试非常有用。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Bun.</span><span style="color:#B392F0;">nanoseconds</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// =&gt; 7288958</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Bun.</span><span style="color:#6F42C1;">nanoseconds</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// =&gt; 7288958</span></span></code></pre></div><h2 id="bun-readablestreamto" tabindex="-1"><code>Bun.readableStreamTo*()</code> <a class="header-anchor" href="#bun-readablestreamto" aria-label="Permalink to &quot;\`Bun.readableStreamTo*()\`&quot;">​</a></h2><p>Bun 实现了一组用于异步消耗 <code>ReadableStream</code> 主体并将其转换为各种二进制格式的便捷函数。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">stream</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fetch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;https://bun.sh&quot;</span><span style="color:#E1E4E8;">)).body;</span></span>
<span class="line"><span style="color:#E1E4E8;">stream; </span><span style="color:#6A737D;">// =&gt; ReadableStream</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> Bun.</span><span style="color:#B392F0;">readableStreamToArrayBuffer</span><span style="color:#E1E4E8;">(stream);</span></span>
<span class="line"><span style="color:#6A737D;">// =&gt; ArrayBuffer</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> Bun.</span><span style="color:#B392F0;">readableStreamToBlob</span><span style="color:#E1E4E8;">(stream);</span></span>
<span class="line"><span style="color:#6A737D;">// =&gt; Blob</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> Bun.</span><span style="color:#B392F0;">readableStreamToJSON</span><span style="color:#E1E4E8;">(stream);</span></span>
<span class="line"><span style="color:#6A737D;">// =&gt; object</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> Bun.</span><span style="color:#B392F0;">readableStreamToText</span><span style="color:#E1E4E8;">(stream);</span></span>
<span class="line"><span style="color:#6A737D;">// =&gt; string</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 作为数组返回所有块</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> Bun.</span><span style="color:#B392F0;">readableStreamToArray</span><span style="color:#E1E4E8;">(stream);</span></span>
<span class="line"><span style="color:#6A737D;">// =&gt; unknown[]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 作为 FormData 对象返回所有块（编码为 x-www-form-urlencoded）</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> Bun.</span><span style="color:#B392F0;">readableStreamToFormData</span><span style="color:#E1E4E8;">(stream);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 作为 FormData 对象返回所有块（编码为 multipart/form-data）</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> Bun.</span><span style="color:#B392F0;">readableStreamToFormData</span><span style="color:#E1E4E8;">(stream, multipartFormBoundary);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">stream</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fetch</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;https://bun.sh&quot;</span><span style="color:#24292E;">)).body;</span></span>
<span class="line"><span style="color:#24292E;">stream; </span><span style="color:#6A737D;">// =&gt; ReadableStream</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> Bun.</span><span style="color:#6F42C1;">readableStreamToArrayBuffer</span><span style="color:#24292E;">(stream);</span></span>
<span class="line"><span style="color:#6A737D;">// =&gt; ArrayBuffer</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> Bun.</span><span style="color:#6F42C1;">readableStreamToBlob</span><span style="color:#24292E;">(stream);</span></span>
<span class="line"><span style="color:#6A737D;">// =&gt; Blob</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> Bun.</span><span style="color:#6F42C1;">readableStreamToJSON</span><span style="color:#24292E;">(stream);</span></span>
<span class="line"><span style="color:#6A737D;">// =&gt; object</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> Bun.</span><span style="color:#6F42C1;">readableStreamToText</span><span style="color:#24292E;">(stream);</span></span>
<span class="line"><span style="color:#6A737D;">// =&gt; string</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 作为数组返回所有块</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> Bun.</span><span style="color:#6F42C1;">readableStreamToArray</span><span style="color:#24292E;">(stream);</span></span>
<span class="line"><span style="color:#6A737D;">// =&gt; unknown[]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 作为 FormData 对象返回所有块（编码为 x-www-form-urlencoded）</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> Bun.</span><span style="color:#6F42C1;">readableStreamToFormData</span><span style="color:#24292E;">(stream);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 作为 FormData 对象返回所有块（编码为 multipart/form-data）</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> Bun.</span><span style="color:#6F42C1;">readableStreamToFormData</span><span style="color:#24292E;">(stream, multipartFormBoundary);</span></span></code></pre></div><h2 id="bun-resolvesync" tabindex="-1"><code>Bun.resolveSync()</code> <a class="header-anchor" href="#bun-resolvesync" aria-label="Permalink to &quot;\`Bun.resolveSync()\`&quot;">​</a></h2><p>使用 Bun 的内部模块解析算法解析文件路径或模块规范符号。第一个参数是要解析的路径，第二个参数是 &quot;root&quot;。如果找不到匹配项，将抛出一个 <code>Error</code>。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Bun.</span><span style="color:#B392F0;">resolveSync</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./foo.ts&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;/path/to/project&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// =&gt; &quot;/path/to/project/foo.ts&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">Bun.</span><span style="color:#B392F0;">resolveSync</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;zod&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;/path/to/project&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// =&gt; &quot;/path/to/project/node_modules/zod/index.ts&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Bun.</span><span style="color:#6F42C1;">resolveSync</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./foo.ts&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;/path/to/project&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// =&gt; &quot;/path/to/project/foo.ts&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Bun.</span><span style="color:#6F42C1;">resolveSync</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;zod&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;/path/to/project&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// =&gt; &quot;/path/to/project/node_modules/zod/index.ts&quot;</span></span></code></pre></div><p>要相对于当前工作目录解析，将 <code>process.cwd</code> 或 <code>&quot;.&quot;</code> 作为根传递。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Bun.</span><span style="color:#B392F0;">resolveSync</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./foo.ts&quot;</span><span style="color:#E1E4E8;">, process.</span><span style="color:#B392F0;">cwd</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">Bun.</span><span style="color:#B392F0;">resolveSync</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./foo.ts&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;/path/to/project&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Bun.</span><span style="color:#6F42C1;">resolveSync</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./foo.ts&quot;</span><span style="color:#24292E;">, process.</span><span style="color:#6F42C1;">cwd</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">Bun.</span><span style="color:#6F42C1;">resolveSync</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./foo.ts&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;/path/to/project&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>要相对于包含当前文件的目录解析，传递 <code>i<wbr>mport.meta.dir</code>。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Bun.</span><span style="color:#B392F0;">resolveSync</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./foo.ts&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">meta</span><span style="color:#E1E4E8;">.dir);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Bun.</span><span style="color:#6F42C1;">resolveSync</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./foo.ts&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">import</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">meta</span><span style="color:#24292E;">.dir);</span></span></code></pre></div><h2 id="bun-jsc-中的-serialize-和-deserialize" tabindex="-1"><code>bun:jsc</code> 中的 <code>serialize</code> 和 <code>deserialize</code> <a class="header-anchor" href="#bun-jsc-中的-serialize-和-deserialize" aria-label="Permalink to &quot;\`bun:jsc\` 中的 \`serialize\` 和 \`deserialize\`&quot;">​</a></h2><p>要将 JavaScript 值保存到 ArrayBuffer 中并恢复，可以使用 <code>&quot;bun:jsc&quot;</code> 模块中的 <code>serialize</code> 和 <code>deserialize</code>。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { serialize, deserialize } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;bun:jsc&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">buf</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">serialize</span><span style="color:#E1E4E8;">({ foo: </span><span style="color:#9ECBFF;">&quot;bar&quot;</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">obj</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">deserialize</span><span style="color:#E1E4E8;">(buf);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(obj); </span><span style="color:#6A737D;">// =&gt; { foo: &quot;bar&quot; }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { serialize, deserialize } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;bun:jsc&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">buf</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">serialize</span><span style="color:#24292E;">({ foo: </span><span style="color:#032F62;">&quot;bar&quot;</span><span style="color:#24292E;"> });</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">obj</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">deserialize</span><span style="color:#24292E;">(buf);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(obj); </span><span style="color:#6A737D;">// =&gt; { foo: &quot;bar&quot; }</span></span></code></pre></div><p>在内部，<a href="https://developer.mozilla.org/en-US/docs/Web/API/structuredClone" target="_blank" rel="noreferrer"><code>structuredClone</code></a> 和 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage" target="_blank" rel="noreferrer"><code>postMessage</code></a> 以相同的方式序列化和反序列化。这将 HTML 结构化克隆算法作为 ArrayBuffer 暴露给 JavaScript。</p>`,105),e=[o];function t(c,r,y,E,i,u){return n(),a("div",null,e)}const h=s(p,[["render",t]]);export{F as __pageData,h as default};
